// Generated by github.com/davyxu/tabtoy
// Version: 2.9.1
// Modify by nuyan
// DO NOT EDIT!!

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: gameconf/game_base_config.proto

package gameconf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defined in table: GameBaseConfig
type GameBaseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoNotUseThis []*DoNotUseThisDefine `protobuf:"bytes,1,rep,name=DoNotUseThis,proto3" json:"DoNotUseThis,omitempty"` // DoNotUseThis
	Globalconf   []*GlobalconfDefine   `protobuf:"bytes,2,rep,name=Globalconf,proto3" json:"Globalconf,omitempty"`     // Globalconf
	Hero         []*HeroDefine         `protobuf:"bytes,3,rep,name=Hero,proto3" json:"Hero,omitempty"`                 // Hero
	SkillConf    []*SkillConfDefine    `protobuf:"bytes,4,rep,name=SkillConf,proto3" json:"SkillConf,omitempty"`       // SkillConf
	BuffConf     []*BuffConfDefine     `protobuf:"bytes,5,rep,name=BuffConf,proto3" json:"BuffConf,omitempty"`         // BuffConf
}

func (x *GameBaseConfig) Reset() {
	*x = GameBaseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameconf_game_base_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameBaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameBaseConfig) ProtoMessage() {}

func (x *GameBaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_gameconf_game_base_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameBaseConfig.ProtoReflect.Descriptor instead.
func (*GameBaseConfig) Descriptor() ([]byte, []int) {
	return file_gameconf_game_base_config_proto_rawDescGZIP(), []int{0}
}

func (x *GameBaseConfig) GetDoNotUseThis() []*DoNotUseThisDefine {
	if x != nil {
		return x.DoNotUseThis
	}
	return nil
}

func (x *GameBaseConfig) GetGlobalconf() []*GlobalconfDefine {
	if x != nil {
		return x.Globalconf
	}
	return nil
}

func (x *GameBaseConfig) GetHero() []*HeroDefine {
	if x != nil {
		return x.Hero
	}
	return nil
}

func (x *GameBaseConfig) GetSkillConf() []*SkillConfDefine {
	if x != nil {
		return x.SkillConf
	}
	return nil
}

func (x *GameBaseConfig) GetBuffConf() []*BuffConfDefine {
	if x != nil {
		return x.BuffConf
	}
	return nil
}

// Defined in table: Globalconf
type AutoFightMatchRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 阶段
	Status int32 `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	// 秒
	Secord int32 `protobuf:"varint,2,opt,name=Secord,proto3" json:"Secord,omitempty"`
	// 范围低
	RangeMin int32 `protobuf:"varint,3,opt,name=RangeMin,proto3" json:"RangeMin,omitempty"`
	// 范围高
	RangeMax int32 `protobuf:"varint,4,opt,name=RangeMax,proto3" json:"RangeMax,omitempty"`
}

func (x *AutoFightMatchRule) Reset() {
	*x = AutoFightMatchRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameconf_game_base_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoFightMatchRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoFightMatchRule) ProtoMessage() {}

func (x *AutoFightMatchRule) ProtoReflect() protoreflect.Message {
	mi := &file_gameconf_game_base_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoFightMatchRule.ProtoReflect.Descriptor instead.
func (*AutoFightMatchRule) Descriptor() ([]byte, []int) {
	return file_gameconf_game_base_config_proto_rawDescGZIP(), []int{1}
}

func (x *AutoFightMatchRule) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AutoFightMatchRule) GetSecord() int32 {
	if x != nil {
		return x.Secord
	}
	return 0
}

func (x *AutoFightMatchRule) GetRangeMin() int32 {
	if x != nil {
		return x.RangeMin
	}
	return 0
}

func (x *AutoFightMatchRule) GetRangeMax() int32 {
	if x != nil {
		return x.RangeMax
	}
	return 0
}

// Defined in table: Globalconf
type RPGMatchRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 秒
	Second int32 `protobuf:"varint,1,opt,name=Second,proto3" json:"Second,omitempty"`
	// 战力
	Power int32 `protobuf:"varint,2,opt,name=Power,proto3" json:"Power,omitempty"`
}

func (x *RPGMatchRule) Reset() {
	*x = RPGMatchRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameconf_game_base_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPGMatchRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPGMatchRule) ProtoMessage() {}

func (x *RPGMatchRule) ProtoReflect() protoreflect.Message {
	mi := &file_gameconf_game_base_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPGMatchRule.ProtoReflect.Descriptor instead.
func (*RPGMatchRule) Descriptor() ([]byte, []int) {
	return file_gameconf_game_base_config_proto_rawDescGZIP(), []int{2}
}

func (x *RPGMatchRule) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *RPGMatchRule) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

// Defined in table: Globalconf
type GlobalconfDefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseShowDescSec              int32      `protobuf:"varint,1,opt,name=PhaseShowDescSec,proto3" json:"PhaseShowDescSec,omitempty"`                            // 展示词时间（秒）
	PhaseDescSec                  int32      `protobuf:"varint,2,opt,name=PhaseDescSec,proto3" json:"PhaseDescSec,omitempty"`                                    // 描述时间（秒）
	PhaseVoteSec                  int32      `protobuf:"varint,3,opt,name=PhaseVoteSec,proto3" json:"PhaseVoteSec,omitempty"`                                    // 投票时间（秒）
	PhaseEndSec                   int32      `protobuf:"varint,4,opt,name=PhaseEndSec,proto3" json:"PhaseEndSec,omitempty"`                                      // 每个结束回合阶段时间（秒）
	PhaseShowResultSec            int32      `protobuf:"varint,5,opt,name=PhaseShowResultSec,proto3" json:"PhaseShowResultSec,omitempty"`                        // 结算展示时间（秒）
	NoticeReadyCondition          []*Int32KV `protobuf:"bytes,6,rep,name=NoticeReadyCondition,proto3" json:"NoticeReadyCondition,omitempty"`                     // 通知准备条件(8,4代表8人座位,4人准备就通知准备）
	NoticeReadySec                int32      `protobuf:"varint,7,opt,name=NoticeReadySec,proto3" json:"NoticeReadySec,omitempty"`                                // 通知准备倒计时（秒）
	GameMaxTimeMinute             int32      `protobuf:"varint,8,opt,name=GameMaxTimeMinute,proto3" json:"GameMaxTimeMinute,omitempty"`                          // 游戏最大时间（单位分，超过此时间判卧底赢）
	RoomSettingMinPlayerCount     uint32     `protobuf:"varint,9,opt,name=RoomSettingMinPlayerCount,proto3" json:"RoomSettingMinPlayerCount,omitempty"`          // 房间最小人数
	RoomSettingMaxPlayerCount     uint32     `protobuf:"varint,10,opt,name=RoomSettingMaxPlayerCount,proto3" json:"RoomSettingMaxPlayerCount,omitempty"`         // 房间最大人数
	RoomSettingDefaultPlayerCount uint32     `protobuf:"varint,11,opt,name=RoomSettingDefaultPlayerCount,proto3" json:"RoomSettingDefaultPlayerCount,omitempty"` // 房间默认人数
	RoomSettingDefaultRoomName    string     `protobuf:"bytes,12,opt,name=RoomSettingDefaultRoomName,proto3" json:"RoomSettingDefaultRoomName,omitempty"`        // 房间默认名字
	RoomSettingDefaultAllowEnter  bool       `protobuf:"varint,13,opt,name=RoomSettingDefaultAllowEnter,proto3" json:"RoomSettingDefaultAllowEnter,omitempty"`   // 房间是否允许进
	OpSecWhenUserLeave            int32      `protobuf:"varint,14,opt,name=OpSecWhenUserLeave,proto3" json:"OpSecWhenUserLeave,omitempty"`                       // 离开玩家（包括离线）的操作时间（语音场描述阶段）
	OperationTime                 int32      `protobuf:"varint,15,opt,name=OperationTime,proto3" json:"OperationTime,omitempty"`                                 // 出牌阶段时间限制(秒)
	CampHP                        int32      `protobuf:"varint,16,opt,name=CampHP,proto3" json:"CampHP,omitempty"`                                               // 军营初始血量(同时也是血量上限）
	HandCardCount                 int32      `protobuf:"varint,17,opt,name=HandCardCount,proto3" json:"HandCardCount,omitempty"`                                 // 手牌数上限
	CardPoolCount                 int32      `protobuf:"varint,18,opt,name=CardPoolCount,proto3" json:"CardPoolCount,omitempty"`                                 // 初始卡池数量
	CommonActionPoint             int32      `protobuf:"varint,19,opt,name=CommonActionPoint,proto3" json:"CommonActionPoint,omitempty"`                         // 玩家行动点上限
	FirtstRoundActionPoint        int32      `protobuf:"varint,20,opt,name=FirtstRoundActionPoint,proto3" json:"FirtstRoundActionPoint,omitempty"`               // 第一个操作的玩家在第一回合的行动点上限
	HeavyCost                     int32      `protobuf:"varint,21,opt,name=HeavyCost,proto3" json:"HeavyCost,omitempty"`                                         // 重装武将一次行动所消耗的行动点
	CommonCost                    int32      `protobuf:"varint,22,opt,name=CommonCost,proto3" json:"CommonCost,omitempty"`                                       // 普通武将一次行动所消耗的行动点
}

func (x *GlobalconfDefine) Reset() {
	*x = GlobalconfDefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameconf_game_base_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalconfDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalconfDefine) ProtoMessage() {}

func (x *GlobalconfDefine) ProtoReflect() protoreflect.Message {
	mi := &file_gameconf_game_base_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalconfDefine.ProtoReflect.Descriptor instead.
func (*GlobalconfDefine) Descriptor() ([]byte, []int) {
	return file_gameconf_game_base_config_proto_rawDescGZIP(), []int{3}
}

func (x *GlobalconfDefine) GetPhaseShowDescSec() int32 {
	if x != nil {
		return x.PhaseShowDescSec
	}
	return 0
}

func (x *GlobalconfDefine) GetPhaseDescSec() int32 {
	if x != nil {
		return x.PhaseDescSec
	}
	return 0
}

func (x *GlobalconfDefine) GetPhaseVoteSec() int32 {
	if x != nil {
		return x.PhaseVoteSec
	}
	return 0
}

func (x *GlobalconfDefine) GetPhaseEndSec() int32 {
	if x != nil {
		return x.PhaseEndSec
	}
	return 0
}

func (x *GlobalconfDefine) GetPhaseShowResultSec() int32 {
	if x != nil {
		return x.PhaseShowResultSec
	}
	return 0
}

func (x *GlobalconfDefine) GetNoticeReadyCondition() []*Int32KV {
	if x != nil {
		return x.NoticeReadyCondition
	}
	return nil
}

func (x *GlobalconfDefine) GetNoticeReadySec() int32 {
	if x != nil {
		return x.NoticeReadySec
	}
	return 0
}

func (x *GlobalconfDefine) GetGameMaxTimeMinute() int32 {
	if x != nil {
		return x.GameMaxTimeMinute
	}
	return 0
}

func (x *GlobalconfDefine) GetRoomSettingMinPlayerCount() uint32 {
	if x != nil {
		return x.RoomSettingMinPlayerCount
	}
	return 0
}

func (x *GlobalconfDefine) GetRoomSettingMaxPlayerCount() uint32 {
	if x != nil {
		return x.RoomSettingMaxPlayerCount
	}
	return 0
}

func (x *GlobalconfDefine) GetRoomSettingDefaultPlayerCount() uint32 {
	if x != nil {
		return x.RoomSettingDefaultPlayerCount
	}
	return 0
}

func (x *GlobalconfDefine) GetRoomSettingDefaultRoomName() string {
	if x != nil {
		return x.RoomSettingDefaultRoomName
	}
	return ""
}

func (x *GlobalconfDefine) GetRoomSettingDefaultAllowEnter() bool {
	if x != nil {
		return x.RoomSettingDefaultAllowEnter
	}
	return false
}

func (x *GlobalconfDefine) GetOpSecWhenUserLeave() int32 {
	if x != nil {
		return x.OpSecWhenUserLeave
	}
	return 0
}

func (x *GlobalconfDefine) GetOperationTime() int32 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

func (x *GlobalconfDefine) GetCampHP() int32 {
	if x != nil {
		return x.CampHP
	}
	return 0
}

func (x *GlobalconfDefine) GetHandCardCount() int32 {
	if x != nil {
		return x.HandCardCount
	}
	return 0
}

func (x *GlobalconfDefine) GetCardPoolCount() int32 {
	if x != nil {
		return x.CardPoolCount
	}
	return 0
}

func (x *GlobalconfDefine) GetCommonActionPoint() int32 {
	if x != nil {
		return x.CommonActionPoint
	}
	return 0
}

func (x *GlobalconfDefine) GetFirtstRoundActionPoint() int32 {
	if x != nil {
		return x.FirtstRoundActionPoint
	}
	return 0
}

func (x *GlobalconfDefine) GetHeavyCost() int32 {
	if x != nil {
		return x.HeavyCost
	}
	return 0
}

func (x *GlobalconfDefine) GetCommonCost() int32 {
	if x != nil {
		return x.CommonCost
	}
	return 0
}

// Defined in table: Hero
type HeroDefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroID   int32      `protobuf:"varint,1,opt,name=HeroID,proto3" json:"HeroID,omitempty"`                            // 武将唯一ID
	Name     string     `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`                                 // 武将名称
	Country  CountryTyp `protobuf:"varint,3,opt,name=Country,proto3,enum=gameconf.CountryTyp" json:"Country,omitempty"` // 武将国籍(停载)
	Gender   GenderTyp  `protobuf:"varint,4,opt,name=Gender,proto3,enum=gameconf.GenderTyp" json:"Gender,omitempty"`    // 武将性别(停载)
	HP       int32      `protobuf:"varint,5,opt,name=HP,proto3" json:"HP,omitempty"`                                    // 初始体力
	Attack   int32      `protobuf:"varint,6,opt,name=Attack,proto3" json:"Attack,omitempty"`                            // 初始攻击力
	SkillID  int32      `protobuf:"varint,7,opt,name=SkillID,proto3" json:"SkillID,omitempty"`                          // 技能ID
	IconPath string     `protobuf:"bytes,8,opt,name=IconPath,proto3" json:"IconPath,omitempty"`                         // 武将图标
	IsHeavy  bool       `protobuf:"varint,9,opt,name=IsHeavy,proto3" json:"IsHeavy,omitempty"`                          // 武将是否为重装
}

func (x *HeroDefine) Reset() {
	*x = HeroDefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameconf_game_base_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroDefine) ProtoMessage() {}

func (x *HeroDefine) ProtoReflect() protoreflect.Message {
	mi := &file_gameconf_game_base_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroDefine.ProtoReflect.Descriptor instead.
func (*HeroDefine) Descriptor() ([]byte, []int) {
	return file_gameconf_game_base_config_proto_rawDescGZIP(), []int{4}
}

func (x *HeroDefine) GetHeroID() int32 {
	if x != nil {
		return x.HeroID
	}
	return 0
}

func (x *HeroDefine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HeroDefine) GetCountry() CountryTyp {
	if x != nil {
		return x.Country
	}
	return CountryTyp_KDTInvalid
}

func (x *HeroDefine) GetGender() GenderTyp {
	if x != nil {
		return x.Gender
	}
	return GenderTyp_SETInvalid
}

func (x *HeroDefine) GetHP() int32 {
	if x != nil {
		return x.HP
	}
	return 0
}

func (x *HeroDefine) GetAttack() int32 {
	if x != nil {
		return x.Attack
	}
	return 0
}

func (x *HeroDefine) GetSkillID() int32 {
	if x != nil {
		return x.SkillID
	}
	return 0
}

func (x *HeroDefine) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *HeroDefine) GetIsHeavy() bool {
	if x != nil {
		return x.IsHeavy
	}
	return false
}

// Defined in table: SkillConf
type SkillConfDefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillID         int32    `protobuf:"varint,1,opt,name=SkillID,proto3" json:"SkillID,omitempty"`                                 // 技能ID
	Name            string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`                                        // 技能名
	Desc            string   `protobuf:"bytes,3,opt,name=Desc,proto3" json:"Desc,omitempty"`                                        // 通用描述
	SkillType       SkillTyp `protobuf:"varint,4,opt,name=SkillType,proto3,enum=gameconf.SkillTyp" json:"SkillType,omitempty"`      // 技能类型
	SelectCardCount int32    `protobuf:"varint,6,opt,name=SelectCardCount,proto3" json:"SelectCardCount,omitempty"`                 // 操作类翻牌技作用对象数量
	GainAreaType    AreaTyp  `protobuf:"varint,7,opt,name=GainAreaType,proto3,enum=gameconf.AreaTyp" json:"GainAreaType,omitempty"` // 区域增益（数量加1）
	Buffs           []int32  `protobuf:"varint,8,rep,packed,name=Buffs,proto3" json:"Buffs,omitempty"`                              // 该技能会产生的buff
	Value1          int32    `protobuf:"varint,9,opt,name=Value1,proto3" json:"Value1,omitempty"`                                   // 技能涉及的数值（对应buff涉及的数值请在buff表配置）
	Value2          int32    `protobuf:"varint,10,opt,name=Value2,proto3" json:"Value2,omitempty"`
}

func (x *SkillConfDefine) Reset() {
	*x = SkillConfDefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameconf_game_base_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillConfDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillConfDefine) ProtoMessage() {}

func (x *SkillConfDefine) ProtoReflect() protoreflect.Message {
	mi := &file_gameconf_game_base_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillConfDefine.ProtoReflect.Descriptor instead.
func (*SkillConfDefine) Descriptor() ([]byte, []int) {
	return file_gameconf_game_base_config_proto_rawDescGZIP(), []int{5}
}

func (x *SkillConfDefine) GetSkillID() int32 {
	if x != nil {
		return x.SkillID
	}
	return 0
}

func (x *SkillConfDefine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SkillConfDefine) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SkillConfDefine) GetSkillType() SkillTyp {
	if x != nil {
		return x.SkillType
	}
	return SkillTyp_STInvalid
}

func (x *SkillConfDefine) GetSelectCardCount() int32 {
	if x != nil {
		return x.SelectCardCount
	}
	return 0
}

func (x *SkillConfDefine) GetGainAreaType() AreaTyp {
	if x != nil {
		return x.GainAreaType
	}
	return AreaTyp_ATNone
}

func (x *SkillConfDefine) GetBuffs() []int32 {
	if x != nil {
		return x.Buffs
	}
	return nil
}

func (x *SkillConfDefine) GetValue1() int32 {
	if x != nil {
		return x.Value1
	}
	return 0
}

func (x *SkillConfDefine) GetValue2() int32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

// Defined in table: BuffConf
type BuffConfDefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffID     int32  `protobuf:"varint,1,opt,name=BuffID,proto3" json:"BuffID,omitempty"` // 技能ID
	Name       string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`      // 技能名
	Desc       string `protobuf:"bytes,3,opt,name=Desc,proto3" json:"Desc,omitempty"`      // 通用描述
	IconPath   string `protobuf:"bytes,4,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	IsOverlap  bool   `protobuf:"varint,5,opt,name=IsOverlap,proto3" json:"IsOverlap,omitempty"`
	BuffAttack int32  `protobuf:"varint,6,opt,name=BuffAttack,proto3" json:"BuffAttack,omitempty"` // 攻击相关数值（区分正负）
	BuffHP     int32  `protobuf:"varint,7,opt,name=BuffHP,proto3" json:"BuffHP,omitempty"`         // 血量相关数值（区分正负）
	BuffDamage int32  `protobuf:"varint,8,opt,name=BuffDamage,proto3" json:"BuffDamage,omitempty"` // 伤害相关数值（绝对值）
	ExpireV    int32  `protobuf:"varint,9,opt,name=ExpireV,proto3" json:"ExpireV,omitempty"`       // buff生命周期（次数或者回合数）
}

func (x *BuffConfDefine) Reset() {
	*x = BuffConfDefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameconf_game_base_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffConfDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffConfDefine) ProtoMessage() {}

func (x *BuffConfDefine) ProtoReflect() protoreflect.Message {
	mi := &file_gameconf_game_base_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffConfDefine.ProtoReflect.Descriptor instead.
func (*BuffConfDefine) Descriptor() ([]byte, []int) {
	return file_gameconf_game_base_config_proto_rawDescGZIP(), []int{6}
}

func (x *BuffConfDefine) GetBuffID() int32 {
	if x != nil {
		return x.BuffID
	}
	return 0
}

func (x *BuffConfDefine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BuffConfDefine) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *BuffConfDefine) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *BuffConfDefine) GetIsOverlap() bool {
	if x != nil {
		return x.IsOverlap
	}
	return false
}

func (x *BuffConfDefine) GetBuffAttack() int32 {
	if x != nil {
		return x.BuffAttack
	}
	return 0
}

func (x *BuffConfDefine) GetBuffHP() int32 {
	if x != nil {
		return x.BuffHP
	}
	return 0
}

func (x *BuffConfDefine) GetBuffDamage() int32 {
	if x != nil {
		return x.BuffDamage
	}
	return 0
}

func (x *BuffConfDefine) GetExpireV() int32 {
	if x != nil {
		return x.ExpireV
	}
	return 0
}

var File_gameconf_game_base_config_proto protoreflect.FileDescriptor

var file_gameconf_game_base_config_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x1a, 0x18, 0x67, 0x61, 0x6d,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x02, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0c, 0x44, 0x6f, 0x4e, 0x6f,
	0x74, 0x55, 0x73, 0x65, 0x54, 0x68, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x55,
	0x73, 0x65, 0x54, 0x68, 0x69, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x0c, 0x44, 0x6f,
	0x4e, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x54, 0x68, 0x69, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x63, 0x6f, 0x6e, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x0a, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x28, 0x0a, 0x04, 0x48, 0x65, 0x72, 0x6f, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e,
	0x48, 0x65, 0x72, 0x6f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x48, 0x65, 0x72, 0x6f,
	0x12, 0x37, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x09,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x34, 0x0a, 0x08, 0x42, 0x75, 0x66,
	0x66, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x42, 0x75, 0x66, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x22,
	0x7c, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x22, 0x3c, 0x0a,
	0x0c, 0x52, 0x50, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x99, 0x08, 0x0a, 0x10,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x73,
	0x63, 0x53, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x73, 0x63, 0x53, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x53, 0x65, 0x63,
	0x12, 0x22, 0x0a, 0x0c, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x64,
	0x53, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x45, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53,
	0x68, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x12, 0x45, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x4b, 0x56, 0x52, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x65, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x53, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x78,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x19, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x44, 0x0a, 0x1d, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x52, 0x6f, 0x6f, 0x6d, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x70, 0x53,
	0x65, 0x63, 0x57, 0x68, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4f, 0x70, 0x53, 0x65, 0x63, 0x57, 0x68, 0x65, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x43, 0x61, 0x6d, 0x70, 0x48, 0x50, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x43, 0x61, 0x6d, 0x70, 0x48, 0x50, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x61, 0x6e, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x16, 0x46, 0x69, 0x72, 0x74, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x46, 0x69, 0x72, 0x74, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x61,
	0x76, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65,
	0x61, 0x76, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x8d, 0x02, 0x0a, 0x0a, 0x48, 0x65, 0x72, 0x6f,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x48, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x48, 0x50, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x73, 0x48, 0x65, 0x61, 0x76, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x49, 0x73, 0x48, 0x65, 0x61, 0x76, 0x79, 0x22, 0xac, 0x02, 0x0a, 0x0f, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x30, 0x0a,
	0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x52, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0c, 0x47, 0x61, 0x69,
	0x6e, 0x41, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x54,
	0x79, 0x70, 0x52, 0x0c, 0x47, 0x61, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x42, 0x75, 0x66, 0x66, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x42, 0x75, 0x66, 0x66, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x16,
	0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x42, 0x75, 0x66, 0x66, 0x43,
	0x6f, 0x6e, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x75, 0x66,
	0x66, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x42, 0x75, 0x66, 0x66, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x66, 0x66, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x75, 0x66, 0x66, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66, 0x48, 0x50, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x42, 0x75, 0x66, 0x66, 0x48, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x42,
	0x75, 0x66, 0x66, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x42, 0x75, 0x66, 0x66, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x56, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x56, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gameconf_game_base_config_proto_rawDescOnce sync.Once
	file_gameconf_game_base_config_proto_rawDescData = file_gameconf_game_base_config_proto_rawDesc
)

func file_gameconf_game_base_config_proto_rawDescGZIP() []byte {
	file_gameconf_game_base_config_proto_rawDescOnce.Do(func() {
		file_gameconf_game_base_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_gameconf_game_base_config_proto_rawDescData)
	})
	return file_gameconf_game_base_config_proto_rawDescData
}

var file_gameconf_game_base_config_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_gameconf_game_base_config_proto_goTypes = []interface{}{
	(*GameBaseConfig)(nil),     // 0: gameconf.GameBaseConfig
	(*AutoFightMatchRule)(nil), // 1: gameconf.AutoFightMatchRule
	(*RPGMatchRule)(nil),       // 2: gameconf.RPGMatchRule
	(*GlobalconfDefine)(nil),   // 3: gameconf.GlobalconfDefine
	(*HeroDefine)(nil),         // 4: gameconf.HeroDefine
	(*SkillConfDefine)(nil),    // 5: gameconf.SkillConfDefine
	(*BuffConfDefine)(nil),     // 6: gameconf.BuffConfDefine
	(*DoNotUseThisDefine)(nil), // 7: gameconf.DoNotUseThisDefine
	(*Int32KV)(nil),            // 8: gameconf.Int32KV
	(CountryTyp)(0),            // 9: gameconf.CountryTyp
	(GenderTyp)(0),             // 10: gameconf.GenderTyp
	(SkillTyp)(0),              // 11: gameconf.SkillTyp
	(AreaTyp)(0),               // 12: gameconf.AreaTyp
}
var file_gameconf_game_base_config_proto_depIdxs = []int32{
	7,  // 0: gameconf.GameBaseConfig.DoNotUseThis:type_name -> gameconf.DoNotUseThisDefine
	3,  // 1: gameconf.GameBaseConfig.Globalconf:type_name -> gameconf.GlobalconfDefine
	4,  // 2: gameconf.GameBaseConfig.Hero:type_name -> gameconf.HeroDefine
	5,  // 3: gameconf.GameBaseConfig.SkillConf:type_name -> gameconf.SkillConfDefine
	6,  // 4: gameconf.GameBaseConfig.BuffConf:type_name -> gameconf.BuffConfDefine
	8,  // 5: gameconf.GlobalconfDefine.NoticeReadyCondition:type_name -> gameconf.Int32KV
	9,  // 6: gameconf.HeroDefine.Country:type_name -> gameconf.CountryTyp
	10, // 7: gameconf.HeroDefine.Gender:type_name -> gameconf.GenderTyp
	11, // 8: gameconf.SkillConfDefine.SkillType:type_name -> gameconf.SkillTyp
	12, // 9: gameconf.SkillConfDefine.GainAreaType:type_name -> gameconf.AreaTyp
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_gameconf_game_base_config_proto_init() }
func file_gameconf_game_base_config_proto_init() {
	if File_gameconf_game_base_config_proto != nil {
		return
	}
	file_gameconf_game_type_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gameconf_game_base_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameBaseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameconf_game_base_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoFightMatchRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameconf_game_base_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPGMatchRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameconf_game_base_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalconfDefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameconf_game_base_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeroDefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameconf_game_base_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillConfDefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameconf_game_base_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffConfDefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gameconf_game_base_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gameconf_game_base_config_proto_goTypes,
		DependencyIndexes: file_gameconf_game_base_config_proto_depIdxs,
		MessageInfos:      file_gameconf_game_base_config_proto_msgTypes,
	}.Build()
	File_gameconf_game_base_config_proto = out.File
	file_gameconf_game_base_config_proto_rawDesc = nil
	file_gameconf_game_base_config_proto_goTypes = nil
	file_gameconf_game_base_config_proto_depIdxs = nil
}
