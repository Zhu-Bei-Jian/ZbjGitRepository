syntax = "proto3";

// 服务内部交互协议

package smsg;
import "sanguosha.com/sgs_herox/proto/gameconf/game_type.proto";
import "sanguosha.com/sgs_herox/proto/def/def.proto";
import "sanguosha.com/sgs_herox/proto/db/db.proto";

message SyncServerInfo{
    repeated string keys = 1;
    repeated string values = 2;
}

message SyncServerVersion{
    uint32 id = 1;
    uint32 ver = 2;
}

message SyncServerOpenInfo{
    int64 timeOpen = 1;
    int64 timeClose = 2;
    repeated string innerIp = 3;
    int32 gateLoad = 4;
    int32 gateLoadAuth = 5;
}

message ReqResponseTest {

}

message RespResponseTest {

}

message ReqUserSyncDB{
    uint64 userid = 2;
    int32 syncType = 3;//1 save(内存存到数据库) 2 recover(从数据库覆盖到内存) 11 (try-save后）获取所有数据
}

message RespUserSyncDB{
    uint32 errCode = 2;
    uint64 userid = 3;
    string data = 4;

}

// ...->entity
message ReqUserData {
    uint64 userid = 2;
    enum Type {
        All = 0;
        Info = 1;
    }
    Type type = 3;
}

message SyncReqMyData {
    uint64 userid = 1;
    uint32 gateid = 2;
    uint64 session = 3;
}

message RespUserData {
    enum ErrCode {
        ErrUnknow = 0;
    }

    string nickname = 2;
    int64 money = 4;
    int32 level = 5;
    int32 star = 6;
    int32 ELOScore = 7;
    int32 icon = 8;
	  int32 iconEdge = 9;
    int32 sex = 10;
    int32 vipLevel = 11;
    uint64 showid = 12;
    int32 gmLevel = 13;
    int32 power = 15;
    gamedef.CardGroup cardGroup = 16;
}

message PuAcReqUserSummary{
    uint64 userid = 2;
    repeated uint64 userids = 3;
}

message PuAcRespUserSummary{
    enum ErrCode{
        Succ = 0;
        ErrSystem = 1;
    }
    ErrCode errCode = 2;
    map<uint64,gamedef.UserSummary> summaries = 4;
}

message PuAcReqQueryUserID{
    enum QueryType{
        Invalid = 0;
        ByNickName = 1;
        ByAccount = 2;
        LikeNickName = 3;
        ByUnionId = 4;
    }
    uint64 userid = 2;
    QueryType queryType = 3;
    uint64 paramInt = 4;
    string paramStr = 5;
    gameconf.AccountLoginTyp accountType = 6;//账号类型 仅用于ByUnionId
}

message PuAcRespQueryUserID{
    enum ErrCode{
        Succ = 0;
        ErrSytem = 1;
        ErrQueryType = 2;
    }
    ErrCode errCode = 2;
    repeated uint64 userIds = 3;
}

message AcEnReqCacheUserSummary{
    uint64 userid = 2;
}
message AcEnRespCacheUserSummary{
    uint64 userid = 2;
    uint32 errCode = 3;
    gamedef.UserSummary summary = 4;
}

message ReqGameTest {
    uint64 userid = 2;
    int32 total =3;
    int32 tick = 4;
    int32 each = 5;
    repeated int32 mode = 6;
    string arg = 7;
}

message ReqMatch {
    uint64 userid = 2;
    int32 modeID = 3;
    int32 matchScore = 5;
    string testInfo = 6;
    gamedef.UserBrief userBrief = 10;
}

message RespMatch {
    enum ErrCode{
        Invalid = 0;
        Gaming = 1;//游戏中
        Matching = 2;//匹配中
        JoinMatchErr = 3;//加入匹配失败
        CreateGaming= 4;//正在创建游戏中
        NoGameServer = 5;//没有可用的游戏服务器
        LoadFull = 6;
    }
    uint64 userid = 2;
    int32 result = 3;
    ErrCode errCode = 4;
}

message ReqCancelMatch {
    uint64 userid = 2;
}

message LoGaReqNewGame {
    message UserInfo{
        uint64 userId = 1;
        uint32 gateId = 2;
        uint64 session = 3;
        int32 seatId = 4;
        bool isRobot = 12;//是否是机器人
        gamedef.UserBrief userBrief = 13;//玩家信息
    }

    string gameUUID = 2;

    repeated UserInfo users = 4;
    uint32 aiSvrID = 5;
    repeated UserInfo lookers = 6;//旁观的玩家

    uint32 roomNO = 14;//房间NO
    uint32 roomId = 15; //房间id
    gamedef.RoomSetting roomSetting = 16;//房间配置
    string voiceId = 17;//房间语音id,用于语音场
}

message LoGaRespNewPVPGame {
    enum ErrCode {
        None = 0;
        ErrCreateGameFailed = 1;
    }
    string gameUUID = 2;
    ErrCode errCode = 3;
}

message LoGaReqLookGame {
	message UserInfo{
        uint64 userId = 1;
        uint32 gateId = 2;
        uint64 session = 3;
        int32 seatId = 4;
        bool isRobot = 12;//是否是机器人
        gamedef.UserBrief userBrief = 13;//玩家信息
    }

	string gameUUID = 2;
	UserInfo looker = 3;
    uint32 roomNO = 4;//房间NO
    uint32 roomId = 5; //房间id
	
}

message LoGaRespLookGame {
    enum ErrCode {
        None = 0;
        ErrLookGameFailed = 1;
    }
    string gameUUID = 2;
    ErrCode errCode = 3;
}

message LoGaReqUserQuit{
    uint64 userid = 2;
}

message LoGaRespUserQuit{
    enum ErrCode{
        None = 0;
        ErrQuitFailed= 1;
    }
    uint64 userid = 2;
    ErrCode errCode = 3;
}


//跑马灯消息
message ServerNotice {
	uint32 appID = 1;
	uint64 userID = 2;
	int32 noticeID = 3;
	string msg = 4;
	repeated string data = 5;
	int32 channelID = 6;
}


message ReqGameRemove{
    int64 seqid = 1;
    repeated string gameIDs = 2;//空的删全部
}
message RespGameRemove{
    int64 seqid = 1;
    uint32 errCode = 2;
    repeated string gameIDs = 3;
}

//游戏服向大厅请求改变游戏进程
message NtfGameStateChange{
    enum State{
        Init = 0;
        Start = 1;
        End = 2;
    }
    State state = 1;
    string gameUUID = 2;
}


message AdAllReqPingServer{
    int64 seqid = 1;

}
message AdAllRespPingServer{
    int64 seqid = 1;
}

//同步gm命令
message SyncGMCommand{
    enum CommandType{
        CloseChat = 0;//禁言
        OpenChat = 1;//允许聊天
        Common = 99;
    }
    CommandType commandType = 1;
    uint64 targetUserID = 2;
    int64 param0 = 3;//参数0
    string sParam = 4;
}

message RemoteGMCommand {
    uint64 userid = 1;
    uint64 gmid = 2;
    string command = 3;
}

// game->entity
message GsEsGameOver {
    uint64 userid = 2;
    bool isException = 3;//是否异常结算
    int32 level = 4;
    int32 exp = 5;

    gameconf.GameModeTyp gameModeType = 10; // 模式id
    string gameId = 13;
    int64 gameStartTime = 14;
    int64 gameEndTime = 15;
    int32 roundCount = 16;
    string word = 17;
    int32 wordId = 18;


    gameconf.WinLoseTyp winLoseType = 20; // 自己输赢平
    gameconf.RoleTyp roleType = 21;
    int32 seatId = 22;
    bool isEscape = 23;//玩家是否逃跑

    repeated db.Score score = 31;
}


//Entity到Lobby消息，目的是发送消息给目的在线玩家
message EnLoRawMessage{
    uint64 userID = 1;
    uint32 msgId = 2;
    bytes  data = 3;
}

message EsAllNtfUserBrief{
    uint64 userid = 1;
    gamedef.UserBrief UserBrief = 2;
}


//单播通知玩家
message SSNoticeUser{
    uint64 userId = 1;
    uint32 msgId = 2;
    bytes logicMsg = 3;
}

//gm命令
message EnAcGMCommand{
    uint64 userid = 2;
    string cmd = 3;
}

