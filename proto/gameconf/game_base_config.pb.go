// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gameconf/game_base_config.proto

/*
Package gameconf is a generated protocol buffer package.

It is generated from these files:
	gameconf/game_base_config.proto
	gameconf/game_stable_config.proto
	gameconf/game_type.proto

It has these top-level messages:
	GameBaseConfig
	AutoFightMatchRule
	RPGMatchRule
	GlobalconfDefine
	HeroDefine
	SkillConfDefine
	BuffConfDefine
	GameStableConfig
	UsernameConfDefine
	DoNotUseThis
	Position
	PropPack
	Int32KV
	DoNotUseThisDefine
*/
package gameconf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Defined in table: GameBaseConfig
type GameBaseConfig struct {
	DoNotUseThis []*DoNotUseThisDefine `protobuf:"bytes,1,rep,name=DoNotUseThis" json:"DoNotUseThis,omitempty"`
	Globalconf   []*GlobalconfDefine   `protobuf:"bytes,2,rep,name=Globalconf" json:"Globalconf,omitempty"`
	Hero         []*HeroDefine         `protobuf:"bytes,3,rep,name=Hero" json:"Hero,omitempty"`
	SkillConf    []*SkillConfDefine    `protobuf:"bytes,4,rep,name=SkillConf" json:"SkillConf,omitempty"`
	BuffConf     []*BuffConfDefine     `protobuf:"bytes,5,rep,name=BuffConf" json:"BuffConf,omitempty"`
}

func (m *GameBaseConfig) Reset()                    { *m = GameBaseConfig{} }
func (m *GameBaseConfig) String() string            { return proto.CompactTextString(m) }
func (*GameBaseConfig) ProtoMessage()               {}
func (*GameBaseConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GameBaseConfig) GetDoNotUseThis() []*DoNotUseThisDefine {
	if m != nil {
		return m.DoNotUseThis
	}
	return nil
}

func (m *GameBaseConfig) GetGlobalconf() []*GlobalconfDefine {
	if m != nil {
		return m.Globalconf
	}
	return nil
}

func (m *GameBaseConfig) GetHero() []*HeroDefine {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *GameBaseConfig) GetSkillConf() []*SkillConfDefine {
	if m != nil {
		return m.SkillConf
	}
	return nil
}

func (m *GameBaseConfig) GetBuffConf() []*BuffConfDefine {
	if m != nil {
		return m.BuffConf
	}
	return nil
}

// Defined in table: Globalconf
type AutoFightMatchRule struct {
	// 阶段
	Status int32 `protobuf:"varint,1,opt,name=Status" json:"Status,omitempty"`
	// 秒
	Secord int32 `protobuf:"varint,2,opt,name=Secord" json:"Secord,omitempty"`
	// 范围低
	RangeMin int32 `protobuf:"varint,3,opt,name=RangeMin" json:"RangeMin,omitempty"`
	// 范围高
	RangeMax int32 `protobuf:"varint,4,opt,name=RangeMax" json:"RangeMax,omitempty"`
}

func (m *AutoFightMatchRule) Reset()                    { *m = AutoFightMatchRule{} }
func (m *AutoFightMatchRule) String() string            { return proto.CompactTextString(m) }
func (*AutoFightMatchRule) ProtoMessage()               {}
func (*AutoFightMatchRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AutoFightMatchRule) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *AutoFightMatchRule) GetSecord() int32 {
	if m != nil {
		return m.Secord
	}
	return 0
}

func (m *AutoFightMatchRule) GetRangeMin() int32 {
	if m != nil {
		return m.RangeMin
	}
	return 0
}

func (m *AutoFightMatchRule) GetRangeMax() int32 {
	if m != nil {
		return m.RangeMax
	}
	return 0
}

// Defined in table: Globalconf
type RPGMatchRule struct {
	// 秒
	Second int32 `protobuf:"varint,1,opt,name=Second" json:"Second,omitempty"`
	// 战力
	Power int32 `protobuf:"varint,2,opt,name=Power" json:"Power,omitempty"`
}

func (m *RPGMatchRule) Reset()                    { *m = RPGMatchRule{} }
func (m *RPGMatchRule) String() string            { return proto.CompactTextString(m) }
func (*RPGMatchRule) ProtoMessage()               {}
func (*RPGMatchRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RPGMatchRule) GetSecond() int32 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *RPGMatchRule) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

// Defined in table: Globalconf
type GlobalconfDefine struct {
	PhaseShowDescSec              int32      `protobuf:"varint,1,opt,name=PhaseShowDescSec" json:"PhaseShowDescSec,omitempty"`
	PhaseDescSec                  int32      `protobuf:"varint,2,opt,name=PhaseDescSec" json:"PhaseDescSec,omitempty"`
	PhaseVoteSec                  int32      `protobuf:"varint,3,opt,name=PhaseVoteSec" json:"PhaseVoteSec,omitempty"`
	PhaseEndSec                   int32      `protobuf:"varint,4,opt,name=PhaseEndSec" json:"PhaseEndSec,omitempty"`
	PhaseShowResultSec            int32      `protobuf:"varint,5,opt,name=PhaseShowResultSec" json:"PhaseShowResultSec,omitempty"`
	NoticeReadyCondition          []*Int32KV `protobuf:"bytes,6,rep,name=NoticeReadyCondition" json:"NoticeReadyCondition,omitempty"`
	NoticeReadySec                int32      `protobuf:"varint,7,opt,name=NoticeReadySec" json:"NoticeReadySec,omitempty"`
	GameMaxTimeMinute             int32      `protobuf:"varint,8,opt,name=GameMaxTimeMinute" json:"GameMaxTimeMinute,omitempty"`
	RoomSettingMinPlayerCount     uint32     `protobuf:"varint,9,opt,name=RoomSettingMinPlayerCount" json:"RoomSettingMinPlayerCount,omitempty"`
	RoomSettingMaxPlayerCount     uint32     `protobuf:"varint,10,opt,name=RoomSettingMaxPlayerCount" json:"RoomSettingMaxPlayerCount,omitempty"`
	RoomSettingDefaultPlayerCount uint32     `protobuf:"varint,11,opt,name=RoomSettingDefaultPlayerCount" json:"RoomSettingDefaultPlayerCount,omitempty"`
	RoomSettingDefaultRoomName    string     `protobuf:"bytes,12,opt,name=RoomSettingDefaultRoomName" json:"RoomSettingDefaultRoomName,omitempty"`
	RoomSettingDefaultAllowEnter  bool       `protobuf:"varint,13,opt,name=RoomSettingDefaultAllowEnter" json:"RoomSettingDefaultAllowEnter,omitempty"`
	OpSecWhenUserLeave            int32      `protobuf:"varint,14,opt,name=OpSecWhenUserLeave" json:"OpSecWhenUserLeave,omitempty"`
	OperationTime                 int32      `protobuf:"varint,15,opt,name=OperationTime" json:"OperationTime,omitempty"`
	CampHP                        int32      `protobuf:"varint,16,opt,name=CampHP" json:"CampHP,omitempty"`
	HandCardCount                 int32      `protobuf:"varint,17,opt,name=HandCardCount" json:"HandCardCount,omitempty"`
	CardPoolCount                 int32      `protobuf:"varint,18,opt,name=CardPoolCount" json:"CardPoolCount,omitempty"`
	CommonActionPoint             int32      `protobuf:"varint,19,opt,name=CommonActionPoint" json:"CommonActionPoint,omitempty"`
	FirtstRoundActionPoint        int32      `protobuf:"varint,20,opt,name=FirtstRoundActionPoint" json:"FirtstRoundActionPoint,omitempty"`
	HeavyCost                     int32      `protobuf:"varint,21,opt,name=HeavyCost" json:"HeavyCost,omitempty"`
	CommonCost                    int32      `protobuf:"varint,22,opt,name=CommonCost" json:"CommonCost,omitempty"`
}

func (m *GlobalconfDefine) Reset()                    { *m = GlobalconfDefine{} }
func (m *GlobalconfDefine) String() string            { return proto.CompactTextString(m) }
func (*GlobalconfDefine) ProtoMessage()               {}
func (*GlobalconfDefine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GlobalconfDefine) GetPhaseShowDescSec() int32 {
	if m != nil {
		return m.PhaseShowDescSec
	}
	return 0
}

func (m *GlobalconfDefine) GetPhaseDescSec() int32 {
	if m != nil {
		return m.PhaseDescSec
	}
	return 0
}

func (m *GlobalconfDefine) GetPhaseVoteSec() int32 {
	if m != nil {
		return m.PhaseVoteSec
	}
	return 0
}

func (m *GlobalconfDefine) GetPhaseEndSec() int32 {
	if m != nil {
		return m.PhaseEndSec
	}
	return 0
}

func (m *GlobalconfDefine) GetPhaseShowResultSec() int32 {
	if m != nil {
		return m.PhaseShowResultSec
	}
	return 0
}

func (m *GlobalconfDefine) GetNoticeReadyCondition() []*Int32KV {
	if m != nil {
		return m.NoticeReadyCondition
	}
	return nil
}

func (m *GlobalconfDefine) GetNoticeReadySec() int32 {
	if m != nil {
		return m.NoticeReadySec
	}
	return 0
}

func (m *GlobalconfDefine) GetGameMaxTimeMinute() int32 {
	if m != nil {
		return m.GameMaxTimeMinute
	}
	return 0
}

func (m *GlobalconfDefine) GetRoomSettingMinPlayerCount() uint32 {
	if m != nil {
		return m.RoomSettingMinPlayerCount
	}
	return 0
}

func (m *GlobalconfDefine) GetRoomSettingMaxPlayerCount() uint32 {
	if m != nil {
		return m.RoomSettingMaxPlayerCount
	}
	return 0
}

func (m *GlobalconfDefine) GetRoomSettingDefaultPlayerCount() uint32 {
	if m != nil {
		return m.RoomSettingDefaultPlayerCount
	}
	return 0
}

func (m *GlobalconfDefine) GetRoomSettingDefaultRoomName() string {
	if m != nil {
		return m.RoomSettingDefaultRoomName
	}
	return ""
}

func (m *GlobalconfDefine) GetRoomSettingDefaultAllowEnter() bool {
	if m != nil {
		return m.RoomSettingDefaultAllowEnter
	}
	return false
}

func (m *GlobalconfDefine) GetOpSecWhenUserLeave() int32 {
	if m != nil {
		return m.OpSecWhenUserLeave
	}
	return 0
}

func (m *GlobalconfDefine) GetOperationTime() int32 {
	if m != nil {
		return m.OperationTime
	}
	return 0
}

func (m *GlobalconfDefine) GetCampHP() int32 {
	if m != nil {
		return m.CampHP
	}
	return 0
}

func (m *GlobalconfDefine) GetHandCardCount() int32 {
	if m != nil {
		return m.HandCardCount
	}
	return 0
}

func (m *GlobalconfDefine) GetCardPoolCount() int32 {
	if m != nil {
		return m.CardPoolCount
	}
	return 0
}

func (m *GlobalconfDefine) GetCommonActionPoint() int32 {
	if m != nil {
		return m.CommonActionPoint
	}
	return 0
}

func (m *GlobalconfDefine) GetFirtstRoundActionPoint() int32 {
	if m != nil {
		return m.FirtstRoundActionPoint
	}
	return 0
}

func (m *GlobalconfDefine) GetHeavyCost() int32 {
	if m != nil {
		return m.HeavyCost
	}
	return 0
}

func (m *GlobalconfDefine) GetCommonCost() int32 {
	if m != nil {
		return m.CommonCost
	}
	return 0
}

// Defined in table: Hero
type HeroDefine struct {
	HeroID   int32      `protobuf:"varint,1,opt,name=HeroID" json:"HeroID,omitempty"`
	Name     string     `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Country  CountryTyp `protobuf:"varint,3,opt,name=Country,enum=gameconf.CountryTyp" json:"Country,omitempty"`
	Gender   GenderTyp  `protobuf:"varint,4,opt,name=Gender,enum=gameconf.GenderTyp" json:"Gender,omitempty"`
	HP       int32      `protobuf:"varint,5,opt,name=HP" json:"HP,omitempty"`
	Attack   int32      `protobuf:"varint,6,opt,name=Attack" json:"Attack,omitempty"`
	SkillID  int32      `protobuf:"varint,7,opt,name=SkillID" json:"SkillID,omitempty"`
	IconPath string     `protobuf:"bytes,8,opt,name=IconPath" json:"IconPath,omitempty"`
	IsHeavy  bool       `protobuf:"varint,9,opt,name=IsHeavy" json:"IsHeavy,omitempty"`
}

func (m *HeroDefine) Reset()                    { *m = HeroDefine{} }
func (m *HeroDefine) String() string            { return proto.CompactTextString(m) }
func (*HeroDefine) ProtoMessage()               {}
func (*HeroDefine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HeroDefine) GetHeroID() int32 {
	if m != nil {
		return m.HeroID
	}
	return 0
}

func (m *HeroDefine) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HeroDefine) GetCountry() CountryTyp {
	if m != nil {
		return m.Country
	}
	return CountryTyp_KDTInvalid
}

func (m *HeroDefine) GetGender() GenderTyp {
	if m != nil {
		return m.Gender
	}
	return GenderTyp_SETInvalid
}

func (m *HeroDefine) GetHP() int32 {
	if m != nil {
		return m.HP
	}
	return 0
}

func (m *HeroDefine) GetAttack() int32 {
	if m != nil {
		return m.Attack
	}
	return 0
}

func (m *HeroDefine) GetSkillID() int32 {
	if m != nil {
		return m.SkillID
	}
	return 0
}

func (m *HeroDefine) GetIconPath() string {
	if m != nil {
		return m.IconPath
	}
	return ""
}

func (m *HeroDefine) GetIsHeavy() bool {
	if m != nil {
		return m.IsHeavy
	}
	return false
}

// Defined in table: SkillConf
type SkillConfDefine struct {
	SkillID          int32         `protobuf:"varint,1,opt,name=SkillID" json:"SkillID,omitempty"`
	Name             string        `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	SkillType        SkillTyp      `protobuf:"varint,4,opt,name=SkillType,enum=gameconf.SkillTyp" json:"SkillType,omitempty"`
	AttckCountInTurn int32         `protobuf:"varint,5,opt,name=AttckCountInTurn" json:"AttckCountInTurn,omitempty"`
	SelectCardType   SelectCardTyp `protobuf:"varint,6,opt,name=SelectCardType,enum=gameconf.SelectCardTyp" json:"SelectCardType,omitempty"`
	SelectCardCount  int32         `protobuf:"varint,7,opt,name=SelectCardCount" json:"SelectCardCount,omitempty"`
	GainAreaType     AreaTyp       `protobuf:"varint,8,opt,name=GainAreaType,enum=gameconf.AreaTyp" json:"GainAreaType,omitempty"`
	Buffs            []int32       `protobuf:"varint,9,rep,packed,name=Buffs" json:"Buffs,omitempty"`
}

func (m *SkillConfDefine) Reset()                    { *m = SkillConfDefine{} }
func (m *SkillConfDefine) String() string            { return proto.CompactTextString(m) }
func (*SkillConfDefine) ProtoMessage()               {}
func (*SkillConfDefine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SkillConfDefine) GetSkillID() int32 {
	if m != nil {
		return m.SkillID
	}
	return 0
}

func (m *SkillConfDefine) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SkillConfDefine) GetSkillType() SkillTyp {
	if m != nil {
		return m.SkillType
	}
	return SkillTyp_STInvalid
}

func (m *SkillConfDefine) GetAttckCountInTurn() int32 {
	if m != nil {
		return m.AttckCountInTurn
	}
	return 0
}

func (m *SkillConfDefine) GetSelectCardType() SelectCardTyp {
	if m != nil {
		return m.SelectCardType
	}
	return SelectCardTyp_SCTNone
}

func (m *SkillConfDefine) GetSelectCardCount() int32 {
	if m != nil {
		return m.SelectCardCount
	}
	return 0
}

func (m *SkillConfDefine) GetGainAreaType() AreaTyp {
	if m != nil {
		return m.GainAreaType
	}
	return AreaTyp_ATNone
}

func (m *SkillConfDefine) GetBuffs() []int32 {
	if m != nil {
		return m.Buffs
	}
	return nil
}

// Defined in table: BuffConf
type BuffConfDefine struct {
	BuffID    int32  `protobuf:"varint,1,opt,name=BuffID" json:"BuffID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Desc      string `protobuf:"bytes,3,opt,name=Desc" json:"Desc,omitempty"`
	IconPath  string `protobuf:"bytes,4,opt,name=IconPath" json:"IconPath,omitempty"`
	IsOverlap bool   `protobuf:"varint,5,opt,name=IsOverlap" json:"IsOverlap,omitempty"`
}

func (m *BuffConfDefine) Reset()                    { *m = BuffConfDefine{} }
func (m *BuffConfDefine) String() string            { return proto.CompactTextString(m) }
func (*BuffConfDefine) ProtoMessage()               {}
func (*BuffConfDefine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BuffConfDefine) GetBuffID() int32 {
	if m != nil {
		return m.BuffID
	}
	return 0
}

func (m *BuffConfDefine) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BuffConfDefine) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *BuffConfDefine) GetIconPath() string {
	if m != nil {
		return m.IconPath
	}
	return ""
}

func (m *BuffConfDefine) GetIsOverlap() bool {
	if m != nil {
		return m.IsOverlap
	}
	return false
}

func init() {
	proto.RegisterType((*GameBaseConfig)(nil), "gameconf.GameBaseConfig")
	proto.RegisterType((*AutoFightMatchRule)(nil), "gameconf.AutoFightMatchRule")
	proto.RegisterType((*RPGMatchRule)(nil), "gameconf.RPGMatchRule")
	proto.RegisterType((*GlobalconfDefine)(nil), "gameconf.GlobalconfDefine")
	proto.RegisterType((*HeroDefine)(nil), "gameconf.HeroDefine")
	proto.RegisterType((*SkillConfDefine)(nil), "gameconf.SkillConfDefine")
	proto.RegisterType((*BuffConfDefine)(nil), "gameconf.BuffConfDefine")
}

func init() { proto.RegisterFile("gameconf/game_base_config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 984 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xef, 0x6e, 0xe2, 0x46,
	0x10, 0x17, 0x84, 0x10, 0x98, 0x24, 0x24, 0xd9, 0x4b, 0xd3, 0xbd, 0x28, 0x6d, 0x11, 0xaa, 0x2a,
	0xd4, 0x56, 0x69, 0x95, 0xeb, 0x1f, 0xa9, 0x3a, 0xb5, 0x25, 0x90, 0x0b, 0xa8, 0x4d, 0x62, 0x2d,
	0xdc, 0xf5, 0xe3, 0x69, 0x63, 0x06, 0xb0, 0x62, 0x76, 0x91, 0xbd, 0x4e, 0x82, 0xd4, 0x27, 0xa8,
	0xd4, 0x07, 0xe8, 0x13, 0xf4, 0x89, 0xfa, 0x3e, 0xd5, 0x8e, 0x0d, 0xb6, 0x21, 0x97, 0x6f, 0xcc,
	0xef, 0xcf, 0x8e, 0x77, 0x66, 0x77, 0x07, 0xf8, 0x6c, 0x2c, 0xa7, 0xe8, 0x6a, 0x35, 0xfa, 0xc6,
	0xfe, 0x78, 0x7f, 0x2b, 0x43, 0x7c, 0x6f, 0x43, 0x6f, 0x7c, 0x3a, 0x0b, 0xb4, 0xd1, 0xac, 0xb2,
	0x10, 0x1c, 0xf3, 0xbc, 0xd4, 0xcc, 0x67, 0x18, 0x6b, 0x1a, 0xff, 0x16, 0xa1, 0x76, 0x29, 0xa7,
	0x78, 0x2e, 0x43, 0x6c, 0x93, 0x99, 0xfd, 0x0a, 0x3b, 0x1d, 0x7d, 0xad, 0xcd, 0xdb, 0x10, 0x07,
	0x13, 0x2f, 0xe4, 0x85, 0xfa, 0x46, 0x73, 0xfb, 0xec, 0xe4, 0x74, 0xb1, 0xc6, 0x69, 0x96, 0xed,
	0xe0, 0xc8, 0x53, 0x28, 0x72, 0x0e, 0xf6, 0x13, 0xc0, 0xa5, 0xaf, 0x6f, 0xa5, 0x6f, 0xe5, 0xbc,
	0x48, 0xfe, 0xe3, 0xd4, 0x9f, 0x72, 0x89, 0x3b, 0xa3, 0x66, 0x4d, 0x28, 0x75, 0x31, 0xd0, 0x7c,
	0x83, 0x5c, 0x87, 0xa9, 0xcb, 0xa2, 0x89, 0x9e, 0x14, 0xec, 0x47, 0xa8, 0xf6, 0xef, 0x3c, 0xdf,
	0xb7, 0x9f, 0xcd, 0x4b, 0x24, 0x7f, 0x99, 0xca, 0x97, 0x54, 0xe2, 0x49, 0xb5, 0xec, 0x3b, 0xa8,
	0x9c, 0x47, 0xa3, 0x11, 0xf9, 0x36, 0xc9, 0xc7, 0x53, 0xdf, 0x82, 0x49, 0x6c, 0x4b, 0x65, 0xe3,
	0x4f, 0x60, 0xad, 0xc8, 0xe8, 0x37, 0xde, 0x78, 0x62, 0xae, 0xa4, 0x71, 0x27, 0x22, 0xf2, 0x91,
	0x1d, 0x41, 0xb9, 0x6f, 0xa4, 0x89, 0x6c, 0x99, 0x0a, 0xcd, 0x4d, 0x91, 0x44, 0x84, 0xa3, 0xab,
	0x83, 0x21, 0x2f, 0x26, 0x38, 0x45, 0xec, 0x18, 0x2a, 0x42, 0xaa, 0x31, 0x5e, 0x79, 0x8a, 0x6f,
	0x10, 0xb3, 0x8c, 0x53, 0x4e, 0x3e, 0xf2, 0x52, 0x96, 0x93, 0x8f, 0x8d, 0xd7, 0xb0, 0x23, 0x9c,
	0xcb, 0x7c, 0x5e, 0xfb, 0xc1, 0xc3, 0x65, 0x5e, 0x8a, 0xd8, 0x21, 0x6c, 0x3a, 0xfa, 0x01, 0x83,
	0x24, 0x6d, 0x1c, 0x34, 0xfe, 0xa9, 0xc0, 0xfe, 0x6a, 0xd5, 0xd9, 0x97, 0xb0, 0xef, 0x4c, 0x64,
	0x88, 0xfd, 0x89, 0x7e, 0xe8, 0x60, 0xe8, 0xf6, 0xd1, 0x4d, 0x16, 0x5b, 0xc3, 0x59, 0x03, 0x76,
	0x08, 0x5b, 0xe8, 0xe2, 0xd5, 0x73, 0xd8, 0x52, 0xf3, 0x4e, 0x1b, 0xb4, 0x9a, 0x8d, 0x8c, 0x26,
	0xc1, 0x58, 0x1d, 0xb6, 0x29, 0xbe, 0x50, 0x43, 0x2b, 0x89, 0x77, 0x99, 0x85, 0xd8, 0x29, 0xb0,
	0x65, 0x76, 0x81, 0x61, 0xe4, 0x1b, 0x2b, 0xdc, 0x24, 0xe1, 0x13, 0x0c, 0xbb, 0x80, 0xc3, 0x6b,
	0x6d, 0x3c, 0x17, 0x05, 0xca, 0xe1, 0xbc, 0xad, 0xd5, 0xd0, 0x33, 0x9e, 0x56, 0xbc, 0x4c, 0x8d,
	0x3d, 0x48, 0x1b, 0xdb, 0x53, 0xe6, 0xd5, 0xd9, 0x6f, 0xef, 0xc4, 0x93, 0x72, 0xf6, 0x05, 0xd4,
	0x32, 0xb8, 0x4d, 0xb9, 0x45, 0x29, 0x57, 0x50, 0xf6, 0x35, 0x1c, 0xd8, 0xeb, 0x72, 0x25, 0x1f,
	0x07, 0xde, 0xd4, 0x76, 0x2d, 0x32, 0xc8, 0x2b, 0x24, 0x5d, 0x27, 0xd8, 0x6b, 0x78, 0x29, 0xb4,
	0x9e, 0xf6, 0xd1, 0x18, 0x4f, 0x8d, 0xaf, 0x3c, 0xe5, 0xf8, 0x72, 0x8e, 0x41, 0x5b, 0x47, 0xca,
	0xf0, 0x6a, 0xbd, 0xd0, 0xdc, 0x15, 0x1f, 0x16, 0xac, 0xba, 0xe5, 0x63, 0xd6, 0x0d, 0xeb, 0xee,
	0x9c, 0x80, 0x75, 0xe0, 0x93, 0x0c, 0xd9, 0xc1, 0x91, 0x8c, 0x7c, 0x93, 0x5d, 0x61, 0x9b, 0x56,
	0x78, 0x5e, 0xc4, 0x7e, 0x86, 0xe3, 0x75, 0x81, 0x45, 0xae, 0xe5, 0x14, 0xf9, 0x4e, 0xbd, 0xd0,
	0xac, 0x8a, 0x67, 0x14, 0xec, 0x1c, 0x4e, 0xd6, 0xd9, 0x96, 0xef, 0xeb, 0x87, 0x0b, 0x65, 0x30,
	0xe0, 0xbb, 0xf5, 0x42, 0xb3, 0x22, 0x9e, 0xd5, 0xd8, 0x23, 0x71, 0x33, 0xeb, 0xa3, 0xfb, 0xc7,
	0x04, 0xd5, 0xdb, 0x10, 0x83, 0xdf, 0x51, 0xde, 0x23, 0xaf, 0xc5, 0x47, 0x62, 0x9d, 0x61, 0x9f,
	0xc3, 0xee, 0xcd, 0x0c, 0x03, 0x69, 0x1b, 0x6b, 0x9b, 0xc1, 0xf7, 0x48, 0x9a, 0x07, 0xed, 0x0d,
	0x6a, 0xcb, 0xe9, 0xac, 0xeb, 0xf0, 0xfd, 0xf8, 0x06, 0xc5, 0x91, 0x75, 0x77, 0xa5, 0x1a, 0xb6,
	0x65, 0x30, 0x8c, 0xeb, 0x74, 0x10, 0xbb, 0x73, 0xa0, 0x55, 0xd9, 0xc0, 0xd1, 0xda, 0x8f, 0x55,
	0x2c, 0x56, 0xe5, 0x40, 0x7b, 0x5a, 0xda, 0x7a, 0x3a, 0xd5, 0xaa, 0xe5, 0xda, 0xbc, 0x8e, 0xf6,
	0x94, 0xe1, 0x2f, 0xe2, 0xd3, 0xb2, 0x46, 0xb0, 0x1f, 0xe0, 0xe8, 0x8d, 0x17, 0x98, 0xd0, 0x08,
	0x1d, 0xa9, 0x61, 0xd6, 0x72, 0x48, 0x96, 0x0f, 0xb0, 0xec, 0x04, 0xaa, 0x5d, 0x94, 0xf7, 0xf3,
	0xb6, 0x0e, 0x0d, 0xff, 0x88, 0xa4, 0x29, 0xc0, 0x3e, 0x05, 0x88, 0x53, 0x11, 0x7d, 0x44, 0x74,
	0x06, 0x69, 0xfc, 0x5d, 0x04, 0x48, 0xdf, 0x56, 0x5b, 0x16, 0x1b, 0xf5, 0x3a, 0x8b, 0x87, 0x25,
	0x8e, 0x18, 0x83, 0x12, 0xb5, 0xbc, 0x48, 0x2d, 0xa7, 0xdf, 0xec, 0x14, 0xb6, 0x68, 0x9f, 0xc1,
	0x9c, 0x2e, 0x7b, 0x2d, 0xfb, 0x5c, 0x27, 0xc4, 0x60, 0x3e, 0x13, 0x0b, 0x11, 0xfb, 0x0a, 0xca,
	0x97, 0xa8, 0x86, 0x18, 0xd0, 0xc5, 0xaf, 0x9d, 0xbd, 0xc8, 0xcc, 0x04, 0xc2, 0xad, 0x3a, 0x91,
	0xb0, 0x1a, 0x14, 0xbb, 0x4e, 0x72, 0xf1, 0x8b, 0x5d, 0xc7, 0x7e, 0x58, 0xcb, 0x18, 0xe9, 0xde,
	0xf1, 0x72, 0xfc, 0x61, 0x71, 0xc4, 0x38, 0x6c, 0xd1, 0xd3, 0xde, 0xeb, 0x24, 0x57, 0x76, 0x11,
	0xda, 0xf7, 0xb4, 0xe7, 0x6a, 0xe5, 0x48, 0x33, 0xa1, 0x2b, 0x5a, 0x15, 0xcb, 0xd8, 0xba, 0x7a,
	0x21, 0x15, 0x89, 0xee, 0x61, 0x45, 0x2c, 0xc2, 0xc6, 0x7f, 0x45, 0xd8, 0x5b, 0x19, 0x1e, 0xd9,
	0x1c, 0x85, 0x7c, 0x8e, 0xa7, 0xca, 0xf2, 0x6d, 0x32, 0x98, 0x06, 0xf3, 0x19, 0x26, 0x3b, 0x65,
	0x2b, 0x83, 0xc9, 0x6e, 0x34, 0x15, 0xd9, 0xa7, 0xb8, 0x65, 0x8c, 0x7b, 0x47, 0x85, 0xea, 0xa9,
	0x41, 0x14, 0xa8, 0x64, 0xe7, 0x6b, 0x38, 0xfb, 0x05, 0x6a, 0x7d, 0xf4, 0xd1, 0x35, 0xf6, 0xa8,
	0x51, 0x8a, 0x32, 0xa5, 0xf8, 0x38, 0x93, 0x22, 0xcb, 0x8b, 0x15, 0x39, 0x6b, 0xc2, 0x5e, 0x8a,
	0xc4, 0x87, 0x37, 0x2e, 0xdc, 0x2a, 0xcc, 0xbe, 0x87, 0x9d, 0x4b, 0xe9, 0xa9, 0x56, 0x80, 0x92,
	0x12, 0x55, 0x28, 0x51, 0xe6, 0x4d, 0x4d, 0x18, 0x91, 0x93, 0xd9, 0x19, 0x64, 0xa7, 0x66, 0xc8,
	0xab, 0xf5, 0x0d, 0x3b, 0x83, 0x28, 0x68, 0xfc, 0x55, 0x80, 0x5a, 0x7e, 0xb8, 0xda, 0x96, 0x5a,
	0x24, 0x3d, 0x6b, 0x71, 0xf4, 0x64, 0x51, 0x19, 0x94, 0xec, 0xa0, 0xa1, 0x83, 0x56, 0x15, 0xf4,
	0x3b, 0xd7, 0xe0, 0xd2, 0x4a, 0x83, 0x4f, 0xa0, 0xda, 0x0b, 0x6f, 0xee, 0x31, 0xf0, 0xe5, 0x8c,
	0x6a, 0x59, 0x11, 0x29, 0x70, 0x5b, 0xa6, 0x7f, 0x3f, 0xaf, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0x7a, 0xf0, 0x0f, 0x08, 0x44, 0x09, 0x00, 0x00,
}
