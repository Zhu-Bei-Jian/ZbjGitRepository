// Generated by github.com/davyxu/tabtoy
// Version: 2.9.1
// Modify by nuyan
// DO NOT EDIT!!

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: gameconf/game_type.proto

package gameconf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defined in table: DoNotUseThis
type ClientDeviceTyp int32

const (
	ClientDeviceTyp_CDTInvalid ClientDeviceTyp = 0 // 设备类型
	// 安卓
	ClientDeviceTyp_CDTAndroid ClientDeviceTyp = 1
	// IOS
	ClientDeviceTyp_CDTIOS ClientDeviceTyp = 2
	// PC
	ClientDeviceTyp_CDTPC ClientDeviceTyp = 11
)

// Enum value maps for ClientDeviceTyp.
var (
	ClientDeviceTyp_name = map[int32]string{
		0:  "CDTInvalid",
		1:  "CDTAndroid",
		2:  "CDTIOS",
		11: "CDTPC",
	}
	ClientDeviceTyp_value = map[string]int32{
		"CDTInvalid": 0,
		"CDTAndroid": 1,
		"CDTIOS":     2,
		"CDTPC":      11,
	}
)

func (x ClientDeviceTyp) Enum() *ClientDeviceTyp {
	p := new(ClientDeviceTyp)
	*p = x
	return p
}

func (x ClientDeviceTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientDeviceTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[0].Descriptor()
}

func (ClientDeviceTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[0]
}

func (x ClientDeviceTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientDeviceTyp.Descriptor instead.
func (ClientDeviceTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{0}
}

// Defined in table: DoNotUseThis
type AccountLoginTyp int32

const (
	AccountLoginTyp_ALTInvalid AccountLoginTyp = 0 // 账号登录类型
	// 测试账号
	AccountLoginTyp_ALTTest AccountLoginTyp = 1
	// 桌上学院
	AccountLoginTyp_ALTTablePark AccountLoginTyp = 2
)

// Enum value maps for AccountLoginTyp.
var (
	AccountLoginTyp_name = map[int32]string{
		0: "ALTInvalid",
		1: "ALTTest",
		2: "ALTTablePark",
	}
	AccountLoginTyp_value = map[string]int32{
		"ALTInvalid":   0,
		"ALTTest":      1,
		"ALTTablePark": 2,
	}
)

func (x AccountLoginTyp) Enum() *AccountLoginTyp {
	p := new(AccountLoginTyp)
	*p = x
	return p
}

func (x AccountLoginTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountLoginTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[1].Descriptor()
}

func (AccountLoginTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[1]
}

func (x AccountLoginTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountLoginTyp.Descriptor instead.
func (AccountLoginTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{1}
}

// Defined in table: DoNotUseThis
type GenderTyp int32

const (
	GenderTyp_SETInvalid GenderTyp = 0 // 性别
	// 男
	GenderTyp_SETMale GenderTyp = 1
	// 女
	GenderTyp_SETFemale GenderTyp = 2
	// 第三性别
	GenderTyp_SETThird GenderTyp = 3
)

// Enum value maps for GenderTyp.
var (
	GenderTyp_name = map[int32]string{
		0: "SETInvalid",
		1: "SETMale",
		2: "SETFemale",
		3: "SETThird",
	}
	GenderTyp_value = map[string]int32{
		"SETInvalid": 0,
		"SETMale":    1,
		"SETFemale":  2,
		"SETThird":   3,
	}
)

func (x GenderTyp) Enum() *GenderTyp {
	p := new(GenderTyp)
	*p = x
	return p
}

func (x GenderTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenderTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[2].Descriptor()
}

func (GenderTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[2]
}

func (x GenderTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenderTyp.Descriptor instead.
func (GenderTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{2}
}

// Defined in table: DoNotUseThis
type WinLoseTyp int32

const (
	WinLoseTyp_WLTInvalid WinLoseTyp = 0 // 胜负类型
	// 胜利
	WinLoseTyp_WLTWin WinLoseTyp = 1
	// 失败
	WinLoseTyp_WLTLose WinLoseTyp = 2
	// 平局
	WinLoseTyp_WLTDraw WinLoseTyp = 3
)

// Enum value maps for WinLoseTyp.
var (
	WinLoseTyp_name = map[int32]string{
		0: "WLTInvalid",
		1: "WLTWin",
		2: "WLTLose",
		3: "WLTDraw",
	}
	WinLoseTyp_value = map[string]int32{
		"WLTInvalid": 0,
		"WLTWin":     1,
		"WLTLose":    2,
		"WLTDraw":    3,
	}
)

func (x WinLoseTyp) Enum() *WinLoseTyp {
	p := new(WinLoseTyp)
	*p = x
	return p
}

func (x WinLoseTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WinLoseTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[3].Descriptor()
}

func (WinLoseTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[3]
}

func (x WinLoseTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WinLoseTyp.Descriptor instead.
func (WinLoseTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{3}
}

// Defined in table: DoNotUseThis
type RoleTyp int32

const (
	RoleTyp_RTInvalid RoleTyp = 0 // 游戏身份
	// 平民
	RoleTyp_RTPleb RoleTyp = 1
	// 卧底
	RoleTyp_RTSpy RoleTyp = 2
)

// Enum value maps for RoleTyp.
var (
	RoleTyp_name = map[int32]string{
		0: "RTInvalid",
		1: "RTPleb",
		2: "RTSpy",
	}
	RoleTyp_value = map[string]int32{
		"RTInvalid": 0,
		"RTPleb":    1,
		"RTSpy":     2,
	}
)

func (x RoleTyp) Enum() *RoleTyp {
	p := new(RoleTyp)
	*p = x
	return p
}

func (x RoleTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoleTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[4].Descriptor()
}

func (RoleTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[4]
}

func (x RoleTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoleTyp.Descriptor instead.
func (RoleTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{4}
}

// Defined in table: DoNotUseThis
type GameModeTyp int32

const (
	GameModeTyp_MGTInvalid GameModeTyp = 0 // 游戏模式类型
	// 谁是卧底文本场
	GameModeTyp_MGTSpyText GameModeTyp = 1
	// 谁是卧底语音场
	GameModeTyp_MGTSpyVoice GameModeTyp = 2
)

// Enum value maps for GameModeTyp.
var (
	GameModeTyp_name = map[int32]string{
		0: "MGTInvalid",
		1: "MGTSpyText",
		2: "MGTSpyVoice",
	}
	GameModeTyp_value = map[string]int32{
		"MGTInvalid":  0,
		"MGTSpyText":  1,
		"MGTSpyVoice": 2,
	}
)

func (x GameModeTyp) Enum() *GameModeTyp {
	p := new(GameModeTyp)
	*p = x
	return p
}

func (x GameModeTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameModeTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[5].Descriptor()
}

func (GameModeTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[5]
}

func (x GameModeTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameModeTyp.Descriptor instead.
func (GameModeTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{5}
}

// Defined in table: DoNotUseThis
type ChatChannelTyp int32

const (
	ChatChannelTyp_ChatCTInvalid ChatChannelTyp = 0 // 聊天频道
	// 私人
	ChatChannelTyp_ChatCTPrivate ChatChannelTyp = 1
	// 游戏
	ChatChannelTyp_ChatCTGame ChatChannelTyp = 2
	// 大厅
	ChatChannelTyp_ChatCTLobby ChatChannelTyp = 3
	// 全局
	ChatChannelTyp_ChatCTGlobal ChatChannelTyp = 4
	// 组队
	ChatChannelTyp_ChatCTTeam ChatChannelTyp = 5
	// 房间
	ChatChannelTyp_ChatCTRoom ChatChannelTyp = 7
)

// Enum value maps for ChatChannelTyp.
var (
	ChatChannelTyp_name = map[int32]string{
		0: "ChatCTInvalid",
		1: "ChatCTPrivate",
		2: "ChatCTGame",
		3: "ChatCTLobby",
		4: "ChatCTGlobal",
		5: "ChatCTTeam",
		7: "ChatCTRoom",
	}
	ChatChannelTyp_value = map[string]int32{
		"ChatCTInvalid": 0,
		"ChatCTPrivate": 1,
		"ChatCTGame":    2,
		"ChatCTLobby":   3,
		"ChatCTGlobal":  4,
		"ChatCTTeam":    5,
		"ChatCTRoom":    7,
	}
)

func (x ChatChannelTyp) Enum() *ChatChannelTyp {
	p := new(ChatChannelTyp)
	*p = x
	return p
}

func (x ChatChannelTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatChannelTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[6].Descriptor()
}

func (ChatChannelTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[6]
}

func (x ChatChannelTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatChannelTyp.Descriptor instead.
func (ChatChannelTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{6}
}

// Defined in table: DoNotUseThis
type ChatMsgTyp int32

const (
	ChatMsgTyp_CMTInvalid    ChatMsgTyp = 0 // 聊天消息类型
	ChatMsgTyp_CMTText       ChatMsgTyp = 1 // 文字
	ChatMsgTyp_CMTMsgID      ChatMsgTyp = 2 // MsgID的方式
	ChatMsgTyp_CMTSysTip     ChatMsgTyp = 3 // 系统提示
	ChatMsgTyp_CMTExpression ChatMsgTyp = 4 // 表情
)

// Enum value maps for ChatMsgTyp.
var (
	ChatMsgTyp_name = map[int32]string{
		0: "CMTInvalid",
		1: "CMTText",
		2: "CMTMsgID",
		3: "CMTSysTip",
		4: "CMTExpression",
	}
	ChatMsgTyp_value = map[string]int32{
		"CMTInvalid":    0,
		"CMTText":       1,
		"CMTMsgID":      2,
		"CMTSysTip":     3,
		"CMTExpression": 4,
	}
)

func (x ChatMsgTyp) Enum() *ChatMsgTyp {
	p := new(ChatMsgTyp)
	*p = x
	return p
}

func (x ChatMsgTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatMsgTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[7].Descriptor()
}

func (ChatMsgTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[7]
}

func (x ChatMsgTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatMsgTyp.Descriptor instead.
func (ChatMsgTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{7}
}

// Defined in table: DoNotUseThis
type DateTyp int32

const (
	DateTyp_DTTInvalid DateTyp = 0 // 日期类型
	// 秒
	DateTyp_DTTSecond DateTyp = 1
	// 分
	DateTyp_DTTMinute DateTyp = 2
	// 时
	DateTyp_DTTHour DateTyp = 3
	// 天
	DateTyp_DTTDay DateTyp = 4
	// 周
	DateTyp_DTTWeek DateTyp = 5
	// 月
	DateTyp_DTTMonth DateTyp = 6
	// 年
	DateTyp_DTTYear DateTyp = 7
)

// Enum value maps for DateTyp.
var (
	DateTyp_name = map[int32]string{
		0: "DTTInvalid",
		1: "DTTSecond",
		2: "DTTMinute",
		3: "DTTHour",
		4: "DTTDay",
		5: "DTTWeek",
		6: "DTTMonth",
		7: "DTTYear",
	}
	DateTyp_value = map[string]int32{
		"DTTInvalid": 0,
		"DTTSecond":  1,
		"DTTMinute":  2,
		"DTTHour":    3,
		"DTTDay":     4,
		"DTTWeek":    5,
		"DTTMonth":   6,
		"DTTYear":    7,
	}
)

func (x DateTyp) Enum() *DateTyp {
	p := new(DateTyp)
	*p = x
	return p
}

func (x DateTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[8].Descriptor()
}

func (DateTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[8]
}

func (x DateTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateTyp.Descriptor instead.
func (DateTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{8}
}

// Defined in table: DoNotUseThis
type KickUserOutReason int32

const (
	KickUserOutReason_KUOInvalid KickUserOutReason = 0 // 踢用户原因
	// 重复登录
	KickUserOutReason_KUORelogin KickUserOutReason = 1
	// 封号
	KickUserOutReason_KUOAccountLock KickUserOutReason = 2
	// 服务器出错
	KickUserOutReason_KUOServerError KickUserOutReason = 3
	// 服务器维护
	KickUserOutReason_KUOServerUpgrade KickUserOutReason = 4
)

// Enum value maps for KickUserOutReason.
var (
	KickUserOutReason_name = map[int32]string{
		0: "KUOInvalid",
		1: "KUORelogin",
		2: "KUOAccountLock",
		3: "KUOServerError",
		4: "KUOServerUpgrade",
	}
	KickUserOutReason_value = map[string]int32{
		"KUOInvalid":       0,
		"KUORelogin":       1,
		"KUOAccountLock":   2,
		"KUOServerError":   3,
		"KUOServerUpgrade": 4,
	}
)

func (x KickUserOutReason) Enum() *KickUserOutReason {
	p := new(KickUserOutReason)
	*p = x
	return p
}

func (x KickUserOutReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KickUserOutReason) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[9].Descriptor()
}

func (KickUserOutReason) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[9]
}

func (x KickUserOutReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KickUserOutReason.Descriptor instead.
func (KickUserOutReason) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{9}
}

// Defined in table: DoNotUseThis
type UserConnectState int32

const (
	UserConnectState_USConnect    UserConnectState = 0 // 玩家状态在线
	UserConnectState_USDisconnect UserConnectState = 1 // 玩家状态离线
	UserConnectState_USQuit       UserConnectState = 2 // 玩家状态离开（玩家已退出，但游戏中该角色仍需存在）
)

// Enum value maps for UserConnectState.
var (
	UserConnectState_name = map[int32]string{
		0: "USConnect",
		1: "USDisconnect",
		2: "USQuit",
	}
	UserConnectState_value = map[string]int32{
		"USConnect":    0,
		"USDisconnect": 1,
		"USQuit":       2,
	}
)

func (x UserConnectState) Enum() *UserConnectState {
	p := new(UserConnectState)
	*p = x
	return p
}

func (x UserConnectState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserConnectState) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[10].Descriptor()
}

func (UserConnectState) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[10]
}

func (x UserConnectState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserConnectState.Descriptor instead.
func (UserConnectState) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{10}
}

// Defined in table: DoNotUseThis
type LookerTyp int32

const (
	LookerTyp_LTInvalid LookerTyp = 0 // 旁观类型
	// 双盲视角
	LookerTyp_LTBlind LookerTyp = 1
	// 玩家视角
	LookerTyp_LTPlayer LookerTyp = 2
	// 上帝视角
	LookerTyp_LTGod LookerTyp = 3
)

// Enum value maps for LookerTyp.
var (
	LookerTyp_name = map[int32]string{
		0: "LTInvalid",
		1: "LTBlind",
		2: "LTPlayer",
		3: "LTGod",
	}
	LookerTyp_value = map[string]int32{
		"LTInvalid": 0,
		"LTBlind":   1,
		"LTPlayer":  2,
		"LTGod":     3,
	}
)

func (x LookerTyp) Enum() *LookerTyp {
	p := new(LookerTyp)
	*p = x
	return p
}

func (x LookerTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LookerTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[11].Descriptor()
}

func (LookerTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[11]
}

func (x LookerTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LookerTyp.Descriptor instead.
func (LookerTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{11}
}

// Defined in table: DoNotUseThis
type CardColorTyp int32

const (
	CardColorTyp_CCTInvalid CardColorTyp = 0 // 牌色
	// 红桃
	CardColorTyp_CCTHeart CardColorTyp = 1 // 红桃
	// 梅花
	CardColorTyp_CCTClub CardColorTyp = 2 // 梅花
	// 方块
	CardColorTyp_CCTDiamond CardColorTyp = 3 // 方块
	// 黑桃
	CardColorTyp_CCTSpade CardColorTyp = 4 // 黑桃
)

// Enum value maps for CardColorTyp.
var (
	CardColorTyp_name = map[int32]string{
		0: "CCTInvalid",
		1: "CCTHeart",
		2: "CCTClub",
		3: "CCTDiamond",
		4: "CCTSpade",
	}
	CardColorTyp_value = map[string]int32{
		"CCTInvalid": 0,
		"CCTHeart":   1,
		"CCTClub":    2,
		"CCTDiamond": 3,
		"CCTSpade":   4,
	}
)

func (x CardColorTyp) Enum() *CardColorTyp {
	p := new(CardColorTyp)
	*p = x
	return p
}

func (x CardColorTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardColorTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[12].Descriptor()
}

func (CardColorTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[12]
}

func (x CardColorTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardColorTyp.Descriptor instead.
func (CardColorTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{12}
}

// Defined in table: DoNotUseThis
type CountryTyp int32

const (
	CountryTyp_KDTInvalid CountryTyp = 0 // 国籍
	// 魏
	CountryTyp_KITWei CountryTyp = 1
	// 蜀
	CountryTyp_KITSHu CountryTyp = 2
	// 吴
	CountryTyp_KITWu CountryTyp = 3
	// 群
	CountryTyp_KITQun CountryTyp = 4
)

// Enum value maps for CountryTyp.
var (
	CountryTyp_name = map[int32]string{
		0: "KDTInvalid",
		1: "KITWei",
		2: "KITSHu",
		3: "KITWu",
		4: "KITQun",
	}
	CountryTyp_value = map[string]int32{
		"KDTInvalid": 0,
		"KITWei":     1,
		"KITSHu":     2,
		"KITWu":      3,
		"KITQun":     4,
	}
)

func (x CountryTyp) Enum() *CountryTyp {
	p := new(CountryTyp)
	*p = x
	return p
}

func (x CountryTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountryTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[13].Descriptor()
}

func (CountryTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[13]
}

func (x CountryTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CountryTyp.Descriptor instead.
func (CountryTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{13}
}

// Defined in table: DoNotUseThis
type SkillTyp int32

const (
	SkillTyp_STInvalid SkillTyp = 0 // 技能类型
	// 翻牌技
	SkillTyp_STFaceUp SkillTyp = 1
	// 被动技
	SkillTyp_STPassive SkillTyp = 2
)

// Enum value maps for SkillTyp.
var (
	SkillTyp_name = map[int32]string{
		0: "STInvalid",
		1: "STFaceUp",
		2: "STPassive",
	}
	SkillTyp_value = map[string]int32{
		"STInvalid": 0,
		"STFaceUp":  1,
		"STPassive": 2,
	}
)

func (x SkillTyp) Enum() *SkillTyp {
	p := new(SkillTyp)
	*p = x
	return p
}

func (x SkillTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkillTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[14].Descriptor()
}

func (SkillTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[14]
}

func (x SkillTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkillTyp.Descriptor instead.
func (SkillTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{14}
}

// Defined in table: DoNotUseThis
type UserGameStatusTyp int32

const (
	UserGameStatusTyp_UGSTInvalid   UserGameStatusTyp = 0
	UserGameStatusTyp_UGSTFree      UserGameStatusTyp = 1
	UserGameStatusTyp_UGSTMatching  UserGameStatusTyp = 2
	UserGameStatusTyp_UGSTReadyRoom UserGameStatusTyp = 3
	UserGameStatusTyp_UGSTGame      UserGameStatusTyp = 4
)

// Enum value maps for UserGameStatusTyp.
var (
	UserGameStatusTyp_name = map[int32]string{
		0: "UGSTInvalid",
		1: "UGSTFree",
		2: "UGSTMatching",
		3: "UGSTReadyRoom",
		4: "UGSTGame",
	}
	UserGameStatusTyp_value = map[string]int32{
		"UGSTInvalid":   0,
		"UGSTFree":      1,
		"UGSTMatching":  2,
		"UGSTReadyRoom": 3,
		"UGSTGame":      4,
	}
)

func (x UserGameStatusTyp) Enum() *UserGameStatusTyp {
	p := new(UserGameStatusTyp)
	*p = x
	return p
}

func (x UserGameStatusTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserGameStatusTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[15].Descriptor()
}

func (UserGameStatusTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[15]
}

func (x UserGameStatusTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserGameStatusTyp.Descriptor instead.
func (UserGameStatusTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{15}
}

// Defined in table: DoNotUseThis
type GameStartTyp int32

const (
	GameStartTyp_GSTypeInvalid GameStartTyp = 0 // 开始游戏类别
	GameStartTyp_GSTypeNormal  GameStartTyp = 1
	GameStartTyp_GSTypeMatch   GameStartTyp = 2
)

// Enum value maps for GameStartTyp.
var (
	GameStartTyp_name = map[int32]string{
		0: "GSTypeInvalid",
		1: "GSTypeNormal",
		2: "GSTypeMatch",
	}
	GameStartTyp_value = map[string]int32{
		"GSTypeInvalid": 0,
		"GSTypeNormal":  1,
		"GSTypeMatch":   2,
	}
)

func (x GameStartTyp) Enum() *GameStartTyp {
	p := new(GameStartTyp)
	*p = x
	return p
}

func (x GameStartTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameStartTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[16].Descriptor()
}

func (GameStartTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[16]
}

func (x GameStartTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameStartTyp.Descriptor instead.
func (GameStartTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{16}
}

// Defined in table: DoNotUseThis
type SelectCardTyp int32

const (
	// 无
	SelectCardTyp_SCTNone SelectCardTyp = 0
	// 任意卡牌
	SelectCardTyp_SCTAny SelectCardTyp = 1
	// 己方卡牌
	SelectCardTyp_SCTMyOwn SelectCardTyp = 2
	// 敌方卡牌
	SelectCardTyp_SCTEnemy SelectCardTyp = 3
	// 己方正面朝上的卡牌
	SelectCardTyp_SCTMyOwnFaceUp SelectCardTyp = 4
	// 己方背面朝上的卡牌
	SelectCardTyp_SCTMyOwnBack SelectCardTyp = 5
	// 敌方正面朝上的卡牌
	SelectCardTyp_SCTEnemyFaceUp SelectCardTyp = 6
	// 敌方背面朝上的卡牌
	SelectCardTyp_SCTEnemyBack SelectCardTyp = 7
	// 其他己方卡牌
	SelectCardTyp_SCTOtherMyOwn SelectCardTyp = 8
	// 其他己方正面朝上的卡牌
	SelectCardTyp_SCTOtherMyOwnFaceUp SelectCardTyp = 9
	// 其他己方背面朝上的卡牌
	SelectCardTyp_SCTOtherMyOwnBack SelectCardTyp = 10
	// 其他敌方正面朝上的卡牌
	SelectCardTyp_SCTOtherEnemyFaceUp SelectCardTyp = 11
	// 其他敌方背面朝上的卡牌
	SelectCardTyp_SCTOtherEnemyBack SelectCardTyp = 12
	// 非重装卡牌
	SelectCardTyp_SCTNotHeavy SelectCardTyp = 13
	// 一张己方卡牌和一张敌方卡牌
	SelectCardTyp_SCTOneMyOwnAndOneEnemy SelectCardTyp = 14
	// 其他卡牌
	SelectCardTyp_SCTOther SelectCardTyp = 15
	// 我方军营或者敌方军营
	SelectCardTyp_SCTMyOwnBaseOrEnemyBase SelectCardTyp = 16
	// 任意一张可以后退一格的卡牌
	SelectCardTyp_SCTAnyCanBack SelectCardTyp = 17
)

// Enum value maps for SelectCardTyp.
var (
	SelectCardTyp_name = map[int32]string{
		0:  "SCTNone",
		1:  "SCTAny",
		2:  "SCTMyOwn",
		3:  "SCTEnemy",
		4:  "SCTMyOwnFaceUp",
		5:  "SCTMyOwnBack",
		6:  "SCTEnemyFaceUp",
		7:  "SCTEnemyBack",
		8:  "SCTOtherMyOwn",
		9:  "SCTOtherMyOwnFaceUp",
		10: "SCTOtherMyOwnBack",
		11: "SCTOtherEnemyFaceUp",
		12: "SCTOtherEnemyBack",
		13: "SCTNotHeavy",
		14: "SCTOneMyOwnAndOneEnemy",
		15: "SCTOther",
		16: "SCTMyOwnBaseOrEnemyBase",
		17: "SCTAnyCanBack",
	}
	SelectCardTyp_value = map[string]int32{
		"SCTNone":                 0,
		"SCTAny":                  1,
		"SCTMyOwn":                2,
		"SCTEnemy":                3,
		"SCTMyOwnFaceUp":          4,
		"SCTMyOwnBack":            5,
		"SCTEnemyFaceUp":          6,
		"SCTEnemyBack":            7,
		"SCTOtherMyOwn":           8,
		"SCTOtherMyOwnFaceUp":     9,
		"SCTOtherMyOwnBack":       10,
		"SCTOtherEnemyFaceUp":     11,
		"SCTOtherEnemyBack":       12,
		"SCTNotHeavy":             13,
		"SCTOneMyOwnAndOneEnemy":  14,
		"SCTOther":                15,
		"SCTMyOwnBaseOrEnemyBase": 16,
		"SCTAnyCanBack":           17,
	}
)

func (x SelectCardTyp) Enum() *SelectCardTyp {
	p := new(SelectCardTyp)
	*p = x
	return p
}

func (x SelectCardTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelectCardTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[17].Descriptor()
}

func (SelectCardTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[17]
}

func (x SelectCardTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelectCardTyp.Descriptor instead.
func (SelectCardTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{17}
}

// Defined in table: DoNotUseThis
type AreaTyp int32

const (
	// 无
	AreaTyp_ATNone AreaTyp = 0
	// 我方置牌区
	AreaTyp_ATMyPlace AreaTyp = 1
	// 交战区
	AreaTyp_ATBattle AreaTyp = 2
	// 敌方置牌区
	AreaTyp_ATEnemyPlace AreaTyp = 3
)

// Enum value maps for AreaTyp.
var (
	AreaTyp_name = map[int32]string{
		0: "ATNone",
		1: "ATMyPlace",
		2: "ATBattle",
		3: "ATEnemyPlace",
	}
	AreaTyp_value = map[string]int32{
		"ATNone":       0,
		"ATMyPlace":    1,
		"ATBattle":     2,
		"ATEnemyPlace": 3,
	}
)

func (x AreaTyp) Enum() *AreaTyp {
	p := new(AreaTyp)
	*p = x
	return p
}

func (x AreaTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AreaTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[18].Descriptor()
}

func (AreaTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[18]
}

func (x AreaTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AreaTyp.Descriptor instead.
func (AreaTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{18}
}

// Defined in table: DoNotUseThis
type ExpireTyp int32

const (
	ExpireTyp_ETInvalid ExpireTyp = 0
	ExpireTyp_ETRound   ExpireTyp = 1
	ExpireTyp_ETTimes   ExpireTyp = 2
)

// Enum value maps for ExpireTyp.
var (
	ExpireTyp_name = map[int32]string{
		0: "ETInvalid",
		1: "ETRound",
		2: "ETTimes",
	}
	ExpireTyp_value = map[string]int32{
		"ETInvalid": 0,
		"ETRound":   1,
		"ETTimes":   2,
	}
)

func (x ExpireTyp) Enum() *ExpireTyp {
	p := new(ExpireTyp)
	*p = x
	return p
}

func (x ExpireTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpireTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[19].Descriptor()
}

func (ExpireTyp) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[19]
}

func (x ExpireTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpireTyp.Descriptor instead.
func (ExpireTyp) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{19}
}

// Defined in table: DoNotUseThis
type Map int32

const (
	// 地图行数
	Map_MRow Map = 0
	// 地图列数
	Map_MCol Map = 1
)

// Enum value maps for Map.
var (
	Map_name = map[int32]string{
		0: "MRow",
		1: "MCol",
	}
	Map_value = map[string]int32{
		"MRow": 0,
		"MCol": 1,
	}
)

func (x Map) Enum() *Map {
	p := new(Map)
	*p = x
	return p
}

func (x Map) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Map) Descriptor() protoreflect.EnumDescriptor {
	return file_gameconf_game_type_proto_enumTypes[20].Descriptor()
}

func (Map) Type() protoreflect.EnumType {
	return &file_gameconf_game_type_proto_enumTypes[20]
}

func (x Map) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Map.Descriptor instead.
func (Map) EnumDescriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{20}
}

// Defined in table: DoNotUseThis
type DoNotUseThis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoNotUseThis []*DoNotUseThisDefine `protobuf:"bytes,1,rep,name=DoNotUseThis,proto3" json:"DoNotUseThis,omitempty"` // DoNotUseThis
}

func (x *DoNotUseThis) Reset() {
	*x = DoNotUseThis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameconf_game_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoNotUseThis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoNotUseThis) ProtoMessage() {}

func (x *DoNotUseThis) ProtoReflect() protoreflect.Message {
	mi := &file_gameconf_game_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoNotUseThis.ProtoReflect.Descriptor instead.
func (*DoNotUseThis) Descriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{0}
}

func (x *DoNotUseThis) GetDoNotUseThis() []*DoNotUseThisDefine {
	if x != nil {
		return x.DoNotUseThis
	}
	return nil
}

// Defined in table: DoNotUseThis
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=X,proto3" json:"X,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameconf_game_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_gameconf_game_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{1}
}

func (x *Position) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Position) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

// Defined in table: DoNotUseThis
type PropPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 道具
	PropID int32 `protobuf:"varint,1,opt,name=PropID,proto3" json:"PropID,omitempty"`
	// 数量
	Num int32 `protobuf:"varint,2,opt,name=Num,proto3" json:"Num,omitempty"`
}

func (x *PropPack) Reset() {
	*x = PropPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameconf_game_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropPack) ProtoMessage() {}

func (x *PropPack) ProtoReflect() protoreflect.Message {
	mi := &file_gameconf_game_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropPack.ProtoReflect.Descriptor instead.
func (*PropPack) Descriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{2}
}

func (x *PropPack) GetPropID() int32 {
	if x != nil {
		return x.PropID
	}
	return 0
}

func (x *PropPack) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

// Defined in table: DoNotUseThis
type Int32KV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K int32 `protobuf:"varint,1,opt,name=K,proto3" json:"K,omitempty"`
	V int32 `protobuf:"varint,2,opt,name=V,proto3" json:"V,omitempty"`
}

func (x *Int32KV) Reset() {
	*x = Int32KV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameconf_game_type_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32KV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32KV) ProtoMessage() {}

func (x *Int32KV) ProtoReflect() protoreflect.Message {
	mi := &file_gameconf_game_type_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32KV.ProtoReflect.Descriptor instead.
func (*Int32KV) Descriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{3}
}

func (x *Int32KV) GetK() int32 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *Int32KV) GetV() int32 {
	if x != nil {
		return x.V
	}
	return 0
}

// Defined in table: DoNotUseThis
type DoNotUseThisDefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfID int32 `protobuf:"varint,1,opt,name=ConfID,proto3" json:"ConfID,omitempty"` // 唯一ID
}

func (x *DoNotUseThisDefine) Reset() {
	*x = DoNotUseThisDefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameconf_game_type_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoNotUseThisDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoNotUseThisDefine) ProtoMessage() {}

func (x *DoNotUseThisDefine) ProtoReflect() protoreflect.Message {
	mi := &file_gameconf_game_type_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoNotUseThisDefine.ProtoReflect.Descriptor instead.
func (*DoNotUseThisDefine) Descriptor() ([]byte, []int) {
	return file_gameconf_game_type_proto_rawDescGZIP(), []int{4}
}

func (x *DoNotUseThisDefine) GetConfID() int32 {
	if x != nil {
		return x.ConfID
	}
	return 0
}

var File_gameconf_game_type_proto protoreflect.FileDescriptor

var file_gameconf_game_type_proto_rawDesc = []byte{
	0x0a, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x22, 0x50, 0x0a, 0x0c, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x55, 0x73, 0x65,
	0x54, 0x68, 0x69, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x55, 0x73, 0x65,
	0x54, 0x68, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x54, 0x68,
	0x69, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x0c, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x55,
	0x73, 0x65, 0x54, 0x68, 0x69, 0x73, 0x22, 0x26, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x58,
	0x12, 0x0c, 0x0a, 0x01, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x59, 0x22, 0x34,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72,
	0x6f, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x72, 0x6f, 0x70,
	0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x4e, 0x75, 0x6d, 0x22, 0x25, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4b, 0x56, 0x12,
	0x0c, 0x0a, 0x01, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x4b, 0x12, 0x0c, 0x0a,
	0x01, 0x56, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x56, 0x22, 0x2c, 0x0a, 0x12, 0x44,
	0x6f, 0x4e, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x54, 0x68, 0x69, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x49, 0x44, 0x2a, 0x48, 0x0a, 0x0f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x44, 0x54, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x44, 0x54, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x44, 0x54, 0x49, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x44, 0x54, 0x50,
	0x43, 0x10, 0x0b, 0x2a, 0x40, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x54, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c, 0x54, 0x54, 0x65, 0x73,
	0x74, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x54, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x6b, 0x10, 0x02, 0x2a, 0x45, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x54, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x54, 0x4d, 0x61, 0x6c, 0x65, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x45, 0x54, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x45, 0x54, 0x54, 0x68, 0x69, 0x72, 0x64, 0x10, 0x03, 0x2a, 0x42, 0x0a, 0x0a,
	0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x4c,
	0x54, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x4c,
	0x54, 0x57, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4c, 0x54, 0x4c, 0x6f, 0x73,
	0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4c, 0x54, 0x44, 0x72, 0x61, 0x77, 0x10, 0x03,
	0x2a, 0x2f, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x54, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x54,
	0x50, 0x6c, 0x65, 0x62, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x54, 0x53, 0x70, 0x79, 0x10,
	0x02, 0x2a, 0x3e, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x47, 0x54, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x47, 0x54, 0x53, 0x70, 0x79, 0x54, 0x65, 0x78, 0x74, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x47, 0x54, 0x53, 0x70, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x10,
	0x02, 0x2a, 0x89, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x54, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x54, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x54, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x54, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x54, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x68, 0x61, 0x74, 0x43, 0x54, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x05, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x68, 0x61, 0x74, 0x43, 0x54, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x07, 0x2a, 0x59, 0x0a,
	0x0a, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x4d, 0x54, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x4d, 0x54, 0x54, 0x65, 0x78, 0x74, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4d, 0x54, 0x4d,
	0x73, 0x67, 0x49, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4d, 0x54, 0x53, 0x79, 0x73,
	0x54, 0x69, 0x70, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4d, 0x54, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x2a, 0x78, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x54, 0x54, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x54, 0x54, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x54, 0x54, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x54, 0x54, 0x48, 0x6f, 0x75, 0x72, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x54, 0x54, 0x44, 0x61, 0x79, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x54,
	0x54, 0x57, 0x65, 0x65, 0x6b, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x54, 0x54, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x54, 0x54, 0x59, 0x65, 0x61, 0x72,
	0x10, 0x07, 0x2a, 0x71, 0x0a, 0x11, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x55, 0x4f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x55, 0x4f, 0x52, 0x65,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x55, 0x4f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4b,
	0x55, 0x4f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x4b, 0x55, 0x4f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x10, 0x04, 0x2a, 0x3f, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x53,
	0x51, 0x75, 0x69, 0x74, 0x10, 0x02, 0x2a, 0x40, 0x0a, 0x09, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x54, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x54, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x4c, 0x54, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x54, 0x47, 0x6f, 0x64, 0x10, 0x03, 0x2a, 0x57, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x43, 0x54, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x43, 0x54, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x43, 0x54, 0x43, 0x6c, 0x75,
	0x62, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x43, 0x54, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e,
	0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x43, 0x54, 0x53, 0x70, 0x61, 0x64, 0x65, 0x10,
	0x04, 0x2a, 0x4b, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x12,
	0x0e, 0x0a, 0x0a, 0x4b, 0x44, 0x54, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4b, 0x49, 0x54, 0x57, 0x65, 0x69, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4b,
	0x49, 0x54, 0x53, 0x48, 0x75, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x49, 0x54, 0x57, 0x75,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x49, 0x54, 0x51, 0x75, 0x6e, 0x10, 0x04, 0x2a, 0x36,
	0x0a, 0x08, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x46,
	0x61, 0x63, 0x65, 0x55, 0x70, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x10, 0x02, 0x2a, 0x65, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x47, 0x53, 0x54, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x55, 0x47, 0x53, 0x54, 0x46, 0x72, 0x65, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x47,
	0x53, 0x54, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x47, 0x53, 0x54, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x55, 0x47, 0x53, 0x54, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x04, 0x2a, 0x44, 0x0a,
	0x0c, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x12, 0x11, 0x0a,
	0x0d, 0x47, 0x53, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x47, 0x53, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x53, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x10, 0x02, 0x2a, 0xee, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x43, 0x54, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x43, 0x54, 0x41, 0x6e, 0x79, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x43, 0x54, 0x4d, 0x79, 0x4f, 0x77, 0x6e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x43, 0x54, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x43,
	0x54, 0x4d, 0x79, 0x4f, 0x77, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x55, 0x70, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x43, 0x54, 0x4d, 0x79, 0x4f, 0x77, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x10, 0x05,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x43, 0x54, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x46, 0x61, 0x63, 0x65,
	0x55, 0x70, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x54, 0x45, 0x6e, 0x65, 0x6d, 0x79,
	0x42, 0x61, 0x63, 0x6b, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x43, 0x54, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x4d, 0x79, 0x4f, 0x77, 0x6e, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x54,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x79, 0x4f, 0x77, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x55, 0x70,
	0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x54, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x79,
	0x4f, 0x77, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x54,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x46, 0x61, 0x63, 0x65, 0x55, 0x70,
	0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x54, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6e,
	0x65, 0x6d, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x43, 0x54,
	0x4e, 0x6f, 0x74, 0x48, 0x65, 0x61, 0x76, 0x79, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43,
	0x54, 0x4f, 0x6e, 0x65, 0x4d, 0x79, 0x4f, 0x77, 0x6e, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x45,
	0x6e, 0x65, 0x6d, 0x79, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x43, 0x54, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43, 0x54, 0x4d, 0x79, 0x4f, 0x77, 0x6e,
	0x42, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x42, 0x61, 0x73, 0x65, 0x10,
	0x10, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x43, 0x54, 0x41, 0x6e, 0x79, 0x43, 0x61, 0x6e, 0x42, 0x61,
	0x63, 0x6b, 0x10, 0x11, 0x2a, 0x44, 0x0a, 0x07, 0x41, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x54, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x54, 0x4d, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x54, 0x45, 0x6e,
	0x65, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x03, 0x2a, 0x34, 0x0a, 0x09, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x79, 0x70, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x54, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x54, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x54, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x10, 0x02,
	0x2a, 0x19, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x52, 0x6f, 0x77, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x43, 0x6f, 0x6c, 0x10, 0x01, 0x42, 0x0c, 0x5a, 0x0a, 0x2e,
	0x2f, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_gameconf_game_type_proto_rawDescOnce sync.Once
	file_gameconf_game_type_proto_rawDescData = file_gameconf_game_type_proto_rawDesc
)

func file_gameconf_game_type_proto_rawDescGZIP() []byte {
	file_gameconf_game_type_proto_rawDescOnce.Do(func() {
		file_gameconf_game_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_gameconf_game_type_proto_rawDescData)
	})
	return file_gameconf_game_type_proto_rawDescData
}

var file_gameconf_game_type_proto_enumTypes = make([]protoimpl.EnumInfo, 21)
var file_gameconf_game_type_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_gameconf_game_type_proto_goTypes = []interface{}{
	(ClientDeviceTyp)(0),       // 0: gameconf.ClientDeviceTyp
	(AccountLoginTyp)(0),       // 1: gameconf.AccountLoginTyp
	(GenderTyp)(0),             // 2: gameconf.GenderTyp
	(WinLoseTyp)(0),            // 3: gameconf.WinLoseTyp
	(RoleTyp)(0),               // 4: gameconf.RoleTyp
	(GameModeTyp)(0),           // 5: gameconf.GameModeTyp
	(ChatChannelTyp)(0),        // 6: gameconf.ChatChannelTyp
	(ChatMsgTyp)(0),            // 7: gameconf.ChatMsgTyp
	(DateTyp)(0),               // 8: gameconf.DateTyp
	(KickUserOutReason)(0),     // 9: gameconf.KickUserOutReason
	(UserConnectState)(0),      // 10: gameconf.UserConnectState
	(LookerTyp)(0),             // 11: gameconf.LookerTyp
	(CardColorTyp)(0),          // 12: gameconf.CardColorTyp
	(CountryTyp)(0),            // 13: gameconf.CountryTyp
	(SkillTyp)(0),              // 14: gameconf.SkillTyp
	(UserGameStatusTyp)(0),     // 15: gameconf.UserGameStatusTyp
	(GameStartTyp)(0),          // 16: gameconf.GameStartTyp
	(SelectCardTyp)(0),         // 17: gameconf.SelectCardTyp
	(AreaTyp)(0),               // 18: gameconf.AreaTyp
	(ExpireTyp)(0),             // 19: gameconf.ExpireTyp
	(Map)(0),                   // 20: gameconf.Map
	(*DoNotUseThis)(nil),       // 21: gameconf.DoNotUseThis
	(*Position)(nil),           // 22: gameconf.Position
	(*PropPack)(nil),           // 23: gameconf.PropPack
	(*Int32KV)(nil),            // 24: gameconf.Int32KV
	(*DoNotUseThisDefine)(nil), // 25: gameconf.DoNotUseThisDefine
}
var file_gameconf_game_type_proto_depIdxs = []int32{
	25, // 0: gameconf.DoNotUseThis.DoNotUseThis:type_name -> gameconf.DoNotUseThisDefine
	1,  // [1:1] is the sub-list for method output_type
	1,  // [1:1] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_gameconf_game_type_proto_init() }
func file_gameconf_game_type_proto_init() {
	if File_gameconf_game_type_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gameconf_game_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoNotUseThis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameconf_game_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameconf_game_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameconf_game_type_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32KV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameconf_game_type_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoNotUseThisDefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gameconf_game_type_proto_rawDesc,
			NumEnums:      21,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gameconf_game_type_proto_goTypes,
		DependencyIndexes: file_gameconf_game_type_proto_depIdxs,
		EnumInfos:         file_gameconf_game_type_proto_enumTypes,
		MessageInfos:      file_gameconf_game_type_proto_msgTypes,
	}.Build()
	File_gameconf_game_type_proto = out.File
	file_gameconf_game_type_proto_rawDesc = nil
	file_gameconf_game_type_proto_goTypes = nil
	file_gameconf_game_type_proto_depIdxs = nil
}
