// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cmsg/client_msg.proto

/*
Package cmsg is a generated protocol buffer package.

It is generated from these files:
	cmsg/client_msg.proto

It has these top-level messages:
	CReqPing
	SRespPing
	CReqLogin
	SRespLogin
	SSyncUserBrief
	CReqMyData
	SRespMyData
	SNoticeGameReady
	CReqGameScene
	SRespGameScene
	CReqSceneReady
	SRespSceneReady
	SNoticeGameStart
	SNoticeEnterPhase
	SNoticeDrawCard
	SNoticeOp
	CReqOpt
	SRespOpt
	CReqAct
	SRespAct
	SSyncAct
	SSyncCard
	SSyncUseSkill
	SSyncUseSkillEnd
	SSyncCamp
	SSyncHandCard
	SSyncGameBoard
	SNoticeGameOver
	CReqCancelCurOpt
	SRespCancelCurOpt
	CReqGameExit
	SRespGameExit
	SSyncPlayerState
	CReqGMCommand
	SReqGMCommand
	ServerNotice
	CReqChat
	SRespChat
	SNoticeChatMsg
	CReqMyRoom
	SRespMyRoom
	CReqRoomCreate
	SRespRoomCreate
	CReqRoomQuickJoin
	SRespRoomQuickJoin
	CReqRoomSettingChange
	SRespRoomSettingChange
	CReqRoomJoin
	SRespRoomJoin
	CReqRoomSeatChange
	SRespRoomSeatChange
	CReqRoomLookerInfo
	SRespRoomLookerInfo
	CReqRoomReady
	SRespRoomReady
	CReqRoomLeave
	SRespRoomLeave
	CReqRoomKick
	SRespRoomKick
	SNoticeRoomTimer
	SNoticeRoomKick
	SNoticeRoomChangeSeat
	CReqRoomStartGame
	SRespRoomStartGame
	SNotifyRoomChange
	SNoticeRoomEvent
	SSyncLookerCount
	SNoticeDebugInfo
	SNoticeLogout
	SSyncServerTime
	SRespCommonError
	CReqMatch
	SRespMatch
	SNoticeMatchResult
	CCancelMatch
	SRespCancelMatch
	CCardGroupOpt
	SRespCardGroupOpt
	CReqCardGroups
	SRespCardGroups
*/
package cmsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gameconf "sanguosha.com/sgs_herox/proto/gameconf"
import gamedef "sanguosha.com/sgs_herox/proto/def"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SRespLogin_ErrCode int32

const (
	SRespLogin_Succ                   SRespLogin_ErrCode = 0
	SRespLogin_ErrSystem              SRespLogin_ErrCode = 1
	SRespLogin_ErrTicketInvalid       SRespLogin_ErrCode = 2
	SRespLogin_ErrForceRealName       SRespLogin_ErrCode = 3
	SRespLogin_ErrExtraInfoInvalid    SRespLogin_ErrCode = 4
	SRespLogin_ErrAccountBan          SRespLogin_ErrCode = 5
	SRespLogin_ErrCreateAccountFailed SRespLogin_ErrCode = 6
	SRespLogin_ErrLoadAccountFailed   SRespLogin_ErrCode = 7
	SRespLogin_ErrNotInWhiteList      SRespLogin_ErrCode = 8
	SRespLogin_ErrNotOpenTime         SRespLogin_ErrCode = 9
	SRespLogin_ErrVersionNotMatch     SRespLogin_ErrCode = 10
)

var SRespLogin_ErrCode_name = map[int32]string{
	0:  "Succ",
	1:  "ErrSystem",
	2:  "ErrTicketInvalid",
	3:  "ErrForceRealName",
	4:  "ErrExtraInfoInvalid",
	5:  "ErrAccountBan",
	6:  "ErrCreateAccountFailed",
	7:  "ErrLoadAccountFailed",
	8:  "ErrNotInWhiteList",
	9:  "ErrNotOpenTime",
	10: "ErrVersionNotMatch",
}
var SRespLogin_ErrCode_value = map[string]int32{
	"Succ":                   0,
	"ErrSystem":              1,
	"ErrTicketInvalid":       2,
	"ErrForceRealName":       3,
	"ErrExtraInfoInvalid":    4,
	"ErrAccountBan":          5,
	"ErrCreateAccountFailed": 6,
	"ErrLoadAccountFailed":   7,
	"ErrNotInWhiteList":      8,
	"ErrNotOpenTime":         9,
	"ErrVersionNotMatch":     10,
}

func (x SRespLogin_ErrCode) String() string {
	return proto.EnumName(SRespLogin_ErrCode_name, int32(x))
}
func (SRespLogin_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type SRespMyData_ErrCode int32

const (
	SRespMyData_Succ      SRespMyData_ErrCode = 0
	SRespMyData_ErrUnknow SRespMyData_ErrCode = 1
)

var SRespMyData_ErrCode_name = map[int32]string{
	0: "Succ",
	1: "ErrUnknow",
}
var SRespMyData_ErrCode_value = map[string]int32{
	"Succ":      0,
	"ErrUnknow": 1,
}

func (x SRespMyData_ErrCode) String() string {
	return proto.EnumName(SRespMyData_ErrCode_name, int32(x))
}
func (SRespMyData_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

type SRespGameScene_ErrCode int32

const (
	SRespGameScene_None            SRespGameScene_ErrCode = 0
	SRespGameScene_ErrUnknown      SRespGameScene_ErrCode = 1
	SRespGameScene_ErrGameNotFound SRespGameScene_ErrCode = 2
	SRespGameScene_ErrGameOver     SRespGameScene_ErrCode = 3
)

var SRespGameScene_ErrCode_name = map[int32]string{
	0: "None",
	1: "ErrUnknown",
	2: "ErrGameNotFound",
	3: "ErrGameOver",
}
var SRespGameScene_ErrCode_value = map[string]int32{
	"None":            0,
	"ErrUnknown":      1,
	"ErrGameNotFound": 2,
	"ErrGameOver":     3,
}

func (x SRespGameScene_ErrCode) String() string {
	return proto.EnumName(SRespGameScene_ErrCode_name, int32(x))
}
func (SRespGameScene_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

type SRespSceneReady_ErrCode int32

const (
	SRespSceneReady_None      SRespSceneReady_ErrCode = 0
	SRespSceneReady_ErrSystem SRespSceneReady_ErrCode = 1
)

var SRespSceneReady_ErrCode_name = map[int32]string{
	0: "None",
	1: "ErrSystem",
}
var SRespSceneReady_ErrCode_value = map[string]int32{
	"None":      0,
	"ErrSystem": 1,
}

func (x SRespSceneReady_ErrCode) String() string {
	return proto.EnumName(SRespSceneReady_ErrCode_name, int32(x))
}
func (SRespSceneReady_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

type SNoticeOp_OpType int32

const (
	SNoticeOp_Invalid     SNoticeOp_OpType = 0
	SNoticeOp_ActionStart SNoticeOp_OpType = 1
	SNoticeOp_SelectCard  SNoticeOp_OpType = 2
	SNoticeOp_SelectCamp  SNoticeOp_OpType = 3
)

var SNoticeOp_OpType_name = map[int32]string{
	0: "Invalid",
	1: "ActionStart",
	2: "SelectCard",
	3: "SelectCamp",
}
var SNoticeOp_OpType_value = map[string]int32{
	"Invalid":     0,
	"ActionStart": 1,
	"SelectCard":  2,
	"SelectCamp":  3,
}

func (x SNoticeOp_OpType) String() string {
	return proto.EnumName(SNoticeOp_OpType_name, int32(x))
}
func (SNoticeOp_OpType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{15, 0} }

type CReqOpt_OpType int32

const (
	CReqOpt_Invalid    CReqOpt_OpType = 0
	CReqOpt_SelectCard CReqOpt_OpType = 1
	CReqOpt_SelectCamp CReqOpt_OpType = 2
)

var CReqOpt_OpType_name = map[int32]string{
	0: "Invalid",
	1: "SelectCard",
	2: "SelectCamp",
}
var CReqOpt_OpType_value = map[string]int32{
	"Invalid":    0,
	"SelectCard": 1,
	"SelectCamp": 2,
}

func (x CReqOpt_OpType) String() string {
	return proto.EnumName(CReqOpt_OpType_name, int32(x))
}
func (CReqOpt_OpType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 0} }

type SRespOpt_ErrCode int32

const (
	SRespOpt_None                  SRespOpt_ErrCode = 0
	SRespOpt_ErrUnKnow             SRespOpt_ErrCode = 1
	SRespOpt_ErrNotMyTurn          SRespOpt_ErrCode = 2
	SRespOpt_ErrSelectCountNotSame SRespOpt_ErrCode = 3
	SRespOpt_ErrSelectType         SRespOpt_ErrCode = 4
)

var SRespOpt_ErrCode_name = map[int32]string{
	0: "None",
	1: "ErrUnKnow",
	2: "ErrNotMyTurn",
	3: "ErrSelectCountNotSame",
	4: "ErrSelectType",
}
var SRespOpt_ErrCode_value = map[string]int32{
	"None":                  0,
	"ErrUnKnow":             1,
	"ErrNotMyTurn":          2,
	"ErrSelectCountNotSame": 3,
	"ErrSelectType":         4,
}

func (x SRespOpt_ErrCode) String() string {
	return proto.EnumName(SRespOpt_ErrCode_name, int32(x))
}
func (SRespOpt_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{17, 0} }

type SRespAct_ErrCode int32

const (
	SRespAct_None                       SRespAct_ErrCode = 0
	SRespAct_ErrUnKnow                  SRespAct_ErrCode = 1
	SRespAct_ErrInputParam              SRespAct_ErrCode = 2
	SRespAct_ErrCardNotExist            SRespAct_ErrCode = 3
	SRespAct_ErrTargetPosNotEmpty       SRespAct_ErrCode = 4
	SRespAct_ErrTargetPosNotMyPlaceArea SRespAct_ErrCode = 5
	SRespAct_ErrAPNotEnough             SRespAct_ErrCode = 6
	SRespAct_ErrNotMyTurn               SRespAct_ErrCode = 7
	SRespAct_ErrDistanceLimit           SRespAct_ErrCode = 8
	SRespAct_ErrCardCfgNotExist         SRespAct_ErrCode = 9
	SRespAct_ErrHeroCfgNotExist         SRespAct_ErrCode = 10
	SRespAct_ErrSkillCfgNotExist        SRespAct_ErrCode = 11
	SRespAct_ErrActionNotSupport        SRespAct_ErrCode = 12
	SRespAct_ErrCardAlreadyFaceUp       SRespAct_ErrCode = 13
	SRespAct_ErrCreateFaceUpSkill       SRespAct_ErrCode = 14
	SRespAct_ErrTargetPosCardNotExist   SRespAct_ErrCode = 15
	SRespAct_ErrCampCannotAttack        SRespAct_ErrCode = 16
	SRespAct_ErrAttackCardNotFaceUp     SRespAct_ErrCode = 17
	SRespAct_ErrCardRoundNotEnough      SRespAct_ErrCode = 18
	SRespAct_ErrAttackCountNotEnough    SRespAct_ErrCode = 19
	SRespAct_ErrCanNotAttackMyOwnCard   SRespAct_ErrCode = 20
	SRespAct_ErrCanNotAttackMyOwnCamp   SRespAct_ErrCode = 21
	SRespAct_ErrActSelectNotRight       SRespAct_ErrCode = 22
	SRespAct_ErrNoSelectTarget          SRespAct_ErrCode = 23
)

var SRespAct_ErrCode_name = map[int32]string{
	0:  "None",
	1:  "ErrUnKnow",
	2:  "ErrInputParam",
	3:  "ErrCardNotExist",
	4:  "ErrTargetPosNotEmpty",
	5:  "ErrTargetPosNotMyPlaceArea",
	6:  "ErrAPNotEnough",
	7:  "ErrNotMyTurn",
	8:  "ErrDistanceLimit",
	9:  "ErrCardCfgNotExist",
	10: "ErrHeroCfgNotExist",
	11: "ErrSkillCfgNotExist",
	12: "ErrActionNotSupport",
	13: "ErrCardAlreadyFaceUp",
	14: "ErrCreateFaceUpSkill",
	15: "ErrTargetPosCardNotExist",
	16: "ErrCampCannotAttack",
	17: "ErrAttackCardNotFaceUp",
	18: "ErrCardRoundNotEnough",
	19: "ErrAttackCountNotEnough",
	20: "ErrCanNotAttackMyOwnCard",
	21: "ErrCanNotAttackMyOwnCamp",
	22: "ErrActSelectNotRight",
	23: "ErrNoSelectTarget",
}
var SRespAct_ErrCode_value = map[string]int32{
	"None":                       0,
	"ErrUnKnow":                  1,
	"ErrInputParam":              2,
	"ErrCardNotExist":            3,
	"ErrTargetPosNotEmpty":       4,
	"ErrTargetPosNotMyPlaceArea": 5,
	"ErrAPNotEnough":             6,
	"ErrNotMyTurn":               7,
	"ErrDistanceLimit":           8,
	"ErrCardCfgNotExist":         9,
	"ErrHeroCfgNotExist":         10,
	"ErrSkillCfgNotExist":        11,
	"ErrActionNotSupport":        12,
	"ErrCardAlreadyFaceUp":       13,
	"ErrCreateFaceUpSkill":       14,
	"ErrTargetPosCardNotExist":   15,
	"ErrCampCannotAttack":        16,
	"ErrAttackCardNotFaceUp":     17,
	"ErrCardRoundNotEnough":      18,
	"ErrAttackCountNotEnough":    19,
	"ErrCanNotAttackMyOwnCard":   20,
	"ErrCanNotAttackMyOwnCamp":   21,
	"ErrActSelectNotRight":       22,
	"ErrNoSelectTarget":          23,
}

func (x SRespAct_ErrCode) String() string {
	return proto.EnumName(SRespAct_ErrCode_name, int32(x))
}
func (SRespAct_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 0} }

type SSyncCard_ChangeType int32

const (
	SSyncCard_None           SSyncCard_ChangeType = 0
	SSyncCard_Place          SSyncCard_ChangeType = 1
	SSyncCard_FaceUp         SSyncCard_ChangeType = 2
	SSyncCard_HP             SSyncCard_ChangeType = 3
	SSyncCard_HPMax          SSyncCard_ChangeType = 4
	SSyncCard_Attack         SSyncCard_ChangeType = 5
	SSyncCard_Die            SSyncCard_ChangeType = 6
	SSyncCard_Pos            SSyncCard_ChangeType = 7
	SSyncCard_Buff           SSyncCard_ChangeType = 8
	SSyncCard_Skill          SSyncCard_ChangeType = 9
	SSyncCard_AttackCnt      SSyncCard_ChangeType = 10
	SSyncCard_FaceDown       SSyncCard_ChangeType = 11
	SSyncCard_AttackDistance SSyncCard_ChangeType = 12
	SSyncCard_CanFaceUp      SSyncCard_ChangeType = 13
)

var SSyncCard_ChangeType_name = map[int32]string{
	0:  "None",
	1:  "Place",
	2:  "FaceUp",
	3:  "HP",
	4:  "HPMax",
	5:  "Attack",
	6:  "Die",
	7:  "Pos",
	8:  "Buff",
	9:  "Skill",
	10: "AttackCnt",
	11: "FaceDown",
	12: "AttackDistance",
	13: "CanFaceUp",
}
var SSyncCard_ChangeType_value = map[string]int32{
	"None":           0,
	"Place":          1,
	"FaceUp":         2,
	"HP":             3,
	"HPMax":          4,
	"Attack":         5,
	"Die":            6,
	"Pos":            7,
	"Buff":           8,
	"Skill":          9,
	"AttackCnt":      10,
	"FaceDown":       11,
	"AttackDistance": 12,
	"CanFaceUp":      13,
}

func (x SSyncCard_ChangeType) String() string {
	return proto.EnumName(SSyncCard_ChangeType_name, int32(x))
}
func (SSyncCard_ChangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{21, 0} }

type SSyncCamp_ChangeType int32

const (
	SSyncCamp_None SSyncCamp_ChangeType = 0
	SSyncCamp_HP   SSyncCamp_ChangeType = 1
	SSyncCamp_Buff SSyncCamp_ChangeType = 2
)

var SSyncCamp_ChangeType_name = map[int32]string{
	0: "None",
	1: "HP",
	2: "Buff",
}
var SSyncCamp_ChangeType_value = map[string]int32{
	"None": 0,
	"HP":   1,
	"Buff": 2,
}

func (x SSyncCamp_ChangeType) String() string {
	return proto.EnumName(SSyncCamp_ChangeType_name, int32(x))
}
func (SSyncCamp_ChangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{24, 0} }

type SSyncHandCard_ChangeType int32

const (
	SSyncHandCard_None  SSyncHandCard_ChangeType = 0
	SSyncHandCard_Draw  SSyncHandCard_ChangeType = 1
	SSyncHandCard_Skill SSyncHandCard_ChangeType = 2
	SSyncHandCard_Place SSyncHandCard_ChangeType = 3
)

var SSyncHandCard_ChangeType_name = map[int32]string{
	0: "None",
	1: "Draw",
	2: "Skill",
	3: "Place",
}
var SSyncHandCard_ChangeType_value = map[string]int32{
	"None":  0,
	"Draw":  1,
	"Skill": 2,
	"Place": 3,
}

func (x SSyncHandCard_ChangeType) String() string {
	return proto.EnumName(SSyncHandCard_ChangeType_name, int32(x))
}
func (SSyncHandCard_ChangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{25, 0} }

type SRespCancelCurOpt_ErrCode int32

const (
	SRespCancelCurOpt_None         SRespCancelCurOpt_ErrCode = 0
	SRespCancelCurOpt_ErrNotMyTurn SRespCancelCurOpt_ErrCode = 1
)

var SRespCancelCurOpt_ErrCode_name = map[int32]string{
	0: "None",
	1: "ErrNotMyTurn",
}
var SRespCancelCurOpt_ErrCode_value = map[string]int32{
	"None":         0,
	"ErrNotMyTurn": 1,
}

func (x SRespCancelCurOpt_ErrCode) String() string {
	return proto.EnumName(SRespCancelCurOpt_ErrCode_name, int32(x))
}
func (SRespCancelCurOpt_ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29, 0}
}

type SSyncPlayerState_ChangeType int32

const (
	SSyncPlayerState_Invalid       SSyncPlayerState_ChangeType = 0
	SSyncPlayerState_HP            SSyncPlayerState_ChangeType = 1
	SSyncPlayerState_Die           SSyncPlayerState_ChangeType = 2
	SSyncPlayerState_State         SSyncPlayerState_ChangeType = 3
	SSyncPlayerState_AP            SSyncPlayerState_ChangeType = 4
	SSyncPlayerState_CardPoolCount SSyncPlayerState_ChangeType = 5
)

var SSyncPlayerState_ChangeType_name = map[int32]string{
	0: "Invalid",
	1: "HP",
	2: "Die",
	3: "State",
	4: "AP",
	5: "CardPoolCount",
}
var SSyncPlayerState_ChangeType_value = map[string]int32{
	"Invalid":       0,
	"HP":            1,
	"Die":           2,
	"State":         3,
	"AP":            4,
	"CardPoolCount": 5,
}

func (x SSyncPlayerState_ChangeType) String() string {
	return proto.EnumName(SSyncPlayerState_ChangeType_name, int32(x))
}
func (SSyncPlayerState_ChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32, 0}
}

type SRespChat_ErrCode int32

const (
	SRespChat_None               SRespChat_ErrCode = 0
	SRespChat_ErrNotInRoom       SRespChat_ErrCode = 1
	SRespChat_ErrTargetNotOnline SRespChat_ErrCode = 2
	SRespChat_ErrNotSupport      SRespChat_ErrCode = 3
	SRespChat_ErrWordFilterError SRespChat_ErrCode = 4
	SRespChat_ErrNotInGame       SRespChat_ErrCode = 5
)

var SRespChat_ErrCode_name = map[int32]string{
	0: "None",
	1: "ErrNotInRoom",
	2: "ErrTargetNotOnline",
	3: "ErrNotSupport",
	4: "ErrWordFilterError",
	5: "ErrNotInGame",
}
var SRespChat_ErrCode_value = map[string]int32{
	"None":               0,
	"ErrNotInRoom":       1,
	"ErrTargetNotOnline": 2,
	"ErrNotSupport":      3,
	"ErrWordFilterError": 4,
	"ErrNotInGame":       5,
}

func (x SRespChat_ErrCode) String() string {
	return proto.EnumName(SRespChat_ErrCode_name, int32(x))
}
func (SRespChat_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{37, 0} }

type SRespMyRoom_ErrCode int32

const (
	SRespMyRoom_None       SRespMyRoom_ErrCode = 0
	SRespMyRoom_ErrUnknown SRespMyRoom_ErrCode = 1
)

var SRespMyRoom_ErrCode_name = map[int32]string{
	0: "None",
	1: "ErrUnknown",
}
var SRespMyRoom_ErrCode_value = map[string]int32{
	"None":       0,
	"ErrUnknown": 1,
}

func (x SRespMyRoom_ErrCode) String() string {
	return proto.EnumName(SRespMyRoom_ErrCode_name, int32(x))
}
func (SRespMyRoom_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{40, 0} }

type SRespRoomCreate_ErrCode int32

const (
	SRespRoomCreate_None             SRespRoomCreate_ErrCode = 0
	SRespRoomCreate_ErrUnknown       SRespRoomCreate_ErrCode = 1
	SRespRoomCreate_ErrAlreadyInRoom SRespRoomCreate_ErrCode = 2
	SRespRoomCreate_ErrAlreadyInGame SRespRoomCreate_ErrCode = 3
	SRespRoomCreate_ErrRoomSetting   SRespRoomCreate_ErrCode = 4
	SRespRoomCreate_ErrCreateRoom    SRespRoomCreate_ErrCode = 5
	SRespRoomCreate_ErrSitDownFail   SRespRoomCreate_ErrCode = 6
)

var SRespRoomCreate_ErrCode_name = map[int32]string{
	0: "None",
	1: "ErrUnknown",
	2: "ErrAlreadyInRoom",
	3: "ErrAlreadyInGame",
	4: "ErrRoomSetting",
	5: "ErrCreateRoom",
	6: "ErrSitDownFail",
}
var SRespRoomCreate_ErrCode_value = map[string]int32{
	"None":             0,
	"ErrUnknown":       1,
	"ErrAlreadyInRoom": 2,
	"ErrAlreadyInGame": 3,
	"ErrRoomSetting":   4,
	"ErrCreateRoom":    5,
	"ErrSitDownFail":   6,
}

func (x SRespRoomCreate_ErrCode) String() string {
	return proto.EnumName(SRespRoomCreate_ErrCode_name, int32(x))
}
func (SRespRoomCreate_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{42, 0} }

type SRespRoomQuickJoin_ErrCode int32

const (
	SRespRoomQuickJoin_None             SRespRoomQuickJoin_ErrCode = 0
	SRespRoomQuickJoin_ErrUnknown       SRespRoomQuickJoin_ErrCode = 1
	SRespRoomQuickJoin_ErrAlreadyInGame SRespRoomQuickJoin_ErrCode = 2
	SRespRoomQuickJoin_ErrCreateRoom    SRespRoomQuickJoin_ErrCode = 3
	SRespRoomQuickJoin_ErrSitDownFail   SRespRoomQuickJoin_ErrCode = 6
)

var SRespRoomQuickJoin_ErrCode_name = map[int32]string{
	0: "None",
	1: "ErrUnknown",
	2: "ErrAlreadyInGame",
	3: "ErrCreateRoom",
	6: "ErrSitDownFail",
}
var SRespRoomQuickJoin_ErrCode_value = map[string]int32{
	"None":             0,
	"ErrUnknown":       1,
	"ErrAlreadyInGame": 2,
	"ErrCreateRoom":    3,
	"ErrSitDownFail":   6,
}

func (x SRespRoomQuickJoin_ErrCode) String() string {
	return proto.EnumName(SRespRoomQuickJoin_ErrCode_name, int32(x))
}
func (SRespRoomQuickJoin_ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{44, 0}
}

type SRespRoomSettingChange_ErrCode int32

const (
	SRespRoomSettingChange_None               SRespRoomSettingChange_ErrCode = 0
	SRespRoomSettingChange_ErrUnknown         SRespRoomSettingChange_ErrCode = 1
	SRespRoomSettingChange_ErrNoAuthority     SRespRoomSettingChange_ErrCode = 2
	SRespRoomSettingChange_ErrAlreadyInGame   SRespRoomSettingChange_ErrCode = 3
	SRespRoomSettingChange_ErrNotInRoom       SRespRoomSettingChange_ErrCode = 4
	SRespRoomSettingChange_ErrRoomSetting     SRespRoomSettingChange_ErrCode = 5
	SRespRoomSettingChange_ErrChangeSeatCount SRespRoomSettingChange_ErrCode = 6
)

var SRespRoomSettingChange_ErrCode_name = map[int32]string{
	0: "None",
	1: "ErrUnknown",
	2: "ErrNoAuthority",
	3: "ErrAlreadyInGame",
	4: "ErrNotInRoom",
	5: "ErrRoomSetting",
	6: "ErrChangeSeatCount",
}
var SRespRoomSettingChange_ErrCode_value = map[string]int32{
	"None":               0,
	"ErrUnknown":         1,
	"ErrNoAuthority":     2,
	"ErrAlreadyInGame":   3,
	"ErrNotInRoom":       4,
	"ErrRoomSetting":     5,
	"ErrChangeSeatCount": 6,
}

func (x SRespRoomSettingChange_ErrCode) String() string {
	return proto.EnumName(SRespRoomSettingChange_ErrCode_name, int32(x))
}
func (SRespRoomSettingChange_ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{46, 0}
}

type SRespRoomJoin_ErrCode int32

const (
	SRespRoomJoin_None                  SRespRoomJoin_ErrCode = 0
	SRespRoomJoin_ErrUnknown            SRespRoomJoin_ErrCode = 1
	SRespRoomJoin_ErrRoomNotExist       SRespRoomJoin_ErrCode = 2
	SRespRoomJoin_ErrRoomFull           SRespRoomJoin_ErrCode = 3
	SRespRoomJoin_ErrRoomInGame         SRespRoomJoin_ErrCode = 4
	SRespRoomJoin_ErrRoomNotAllowEnter  SRespRoomJoin_ErrCode = 5
	SRespRoomJoin_ErrSitDownFail        SRespRoomJoin_ErrCode = 6
	SRespRoomJoin_ErrAlreadyLooker      SRespRoomJoin_ErrCode = 7
	SRespRoomJoin_ErrPlayerInGame       SRespRoomJoin_ErrCode = 8
	SRespRoomJoin_ErrCanNotFindLookSeat SRespRoomJoin_ErrCode = 9
	SRespRoomJoin_ErrSitLookerFailed    SRespRoomJoin_ErrCode = 10
)

var SRespRoomJoin_ErrCode_name = map[int32]string{
	0:  "None",
	1:  "ErrUnknown",
	2:  "ErrRoomNotExist",
	3:  "ErrRoomFull",
	4:  "ErrRoomInGame",
	5:  "ErrRoomNotAllowEnter",
	6:  "ErrSitDownFail",
	7:  "ErrAlreadyLooker",
	8:  "ErrPlayerInGame",
	9:  "ErrCanNotFindLookSeat",
	10: "ErrSitLookerFailed",
}
var SRespRoomJoin_ErrCode_value = map[string]int32{
	"None":                  0,
	"ErrUnknown":            1,
	"ErrRoomNotExist":       2,
	"ErrRoomFull":           3,
	"ErrRoomInGame":         4,
	"ErrRoomNotAllowEnter":  5,
	"ErrSitDownFail":        6,
	"ErrAlreadyLooker":      7,
	"ErrPlayerInGame":       8,
	"ErrCanNotFindLookSeat": 9,
	"ErrSitLookerFailed":    10,
}

func (x SRespRoomJoin_ErrCode) String() string {
	return proto.EnumName(SRespRoomJoin_ErrCode_name, int32(x))
}
func (SRespRoomJoin_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{48, 0} }

type SRespRoomSeatChange_ErrCode int32

const (
	SRespRoomSeatChange_None                          SRespRoomSeatChange_ErrCode = 0
	SRespRoomSeatChange_ErrUnknown                    SRespRoomSeatChange_ErrCode = 1
	SRespRoomSeatChange_ErrNotInRoom                  SRespRoomSeatChange_ErrCode = 2
	SRespRoomSeatChange_ErrTargetSeatNotExist         SRespRoomSeatChange_ErrCode = 3
	SRespRoomSeatChange_ErrTargetSeatAlreadySeated    SRespRoomSeatChange_ErrCode = 4
	SRespRoomSeatChange_ErrSitUpFail_AlreadySitUp     SRespRoomSeatChange_ErrCode = 5
	SRespRoomSeatChange_ErrSitDownFail_AlreadySitDown SRespRoomSeatChange_ErrCode = 6
	SRespRoomSeatChange_ErrSitUpFail_IsLastUser       SRespRoomSeatChange_ErrCode = 7
)

var SRespRoomSeatChange_ErrCode_name = map[int32]string{
	0: "None",
	1: "ErrUnknown",
	2: "ErrNotInRoom",
	3: "ErrTargetSeatNotExist",
	4: "ErrTargetSeatAlreadySeated",
	5: "ErrSitUpFail_AlreadySitUp",
	6: "ErrSitDownFail_AlreadySitDown",
	7: "ErrSitUpFail_IsLastUser",
}
var SRespRoomSeatChange_ErrCode_value = map[string]int32{
	"None":                          0,
	"ErrUnknown":                    1,
	"ErrNotInRoom":                  2,
	"ErrTargetSeatNotExist":         3,
	"ErrTargetSeatAlreadySeated":    4,
	"ErrSitUpFail_AlreadySitUp":     5,
	"ErrSitDownFail_AlreadySitDown": 6,
	"ErrSitUpFail_IsLastUser":       7,
}

func (x SRespRoomSeatChange_ErrCode) String() string {
	return proto.EnumName(SRespRoomSeatChange_ErrCode_name, int32(x))
}
func (SRespRoomSeatChange_ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{50, 0}
}

type SRespRoomLookerInfo_ErrCode int32

const (
	SRespRoomLookerInfo_None         SRespRoomLookerInfo_ErrCode = 0
	SRespRoomLookerInfo_ErrUnknown   SRespRoomLookerInfo_ErrCode = 1
	SRespRoomLookerInfo_ErrNotInRoom SRespRoomLookerInfo_ErrCode = 2
)

var SRespRoomLookerInfo_ErrCode_name = map[int32]string{
	0: "None",
	1: "ErrUnknown",
	2: "ErrNotInRoom",
}
var SRespRoomLookerInfo_ErrCode_value = map[string]int32{
	"None":         0,
	"ErrUnknown":   1,
	"ErrNotInRoom": 2,
}

func (x SRespRoomLookerInfo_ErrCode) String() string {
	return proto.EnumName(SRespRoomLookerInfo_ErrCode_name, int32(x))
}
func (SRespRoomLookerInfo_ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{52, 0}
}

type SRespRoomReady_ErrCode int32

const (
	SRespRoomReady_None                SRespRoomReady_ErrCode = 0
	SRespRoomReady_ErrUnknown          SRespRoomReady_ErrCode = 1
	SRespRoomReady_ErrNotInRoom        SRespRoomReady_ErrCode = 2
	SRespRoomReady_ErrRoomInGame       SRespRoomReady_ErrCode = 3
	SRespRoomReady_ErrOwnerNoNeedReady SRespRoomReady_ErrCode = 4
)

var SRespRoomReady_ErrCode_name = map[int32]string{
	0: "None",
	1: "ErrUnknown",
	2: "ErrNotInRoom",
	3: "ErrRoomInGame",
	4: "ErrOwnerNoNeedReady",
}
var SRespRoomReady_ErrCode_value = map[string]int32{
	"None":                0,
	"ErrUnknown":          1,
	"ErrNotInRoom":        2,
	"ErrRoomInGame":       3,
	"ErrOwnerNoNeedReady": 4,
}

func (x SRespRoomReady_ErrCode) String() string {
	return proto.EnumName(SRespRoomReady_ErrCode_name, int32(x))
}
func (SRespRoomReady_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{54, 0} }

type SRespRoomLeave_ErrCode int32

const (
	SRespRoomLeave_None         SRespRoomLeave_ErrCode = 0
	SRespRoomLeave_ErrUnknown   SRespRoomLeave_ErrCode = 1
	SRespRoomLeave_ErrNotInRoom SRespRoomLeave_ErrCode = 2
)

var SRespRoomLeave_ErrCode_name = map[int32]string{
	0: "None",
	1: "ErrUnknown",
	2: "ErrNotInRoom",
}
var SRespRoomLeave_ErrCode_value = map[string]int32{
	"None":         0,
	"ErrUnknown":   1,
	"ErrNotInRoom": 2,
}

func (x SRespRoomLeave_ErrCode) String() string {
	return proto.EnumName(SRespRoomLeave_ErrCode_name, int32(x))
}
func (SRespRoomLeave_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{56, 0} }

type SRespRoomKick_ErrCode int32

const (
	SRespRoomKick_None               SRespRoomKick_ErrCode = 0
	SRespRoomKick_ErrUnknown         SRespRoomKick_ErrCode = 1
	SRespRoomKick_ErrNoSeat          SRespRoomKick_ErrCode = 2
	SRespRoomKick_ErrNoAuthority     SRespRoomKick_ErrCode = 3
	SRespRoomKick_ErrNotInRoom       SRespRoomKick_ErrCode = 4
	SRespRoomKick_ErrRoomInGame      SRespRoomKick_ErrCode = 5
	SRespRoomKick_ErrTargetNotInRoom SRespRoomKick_ErrCode = 6
)

var SRespRoomKick_ErrCode_name = map[int32]string{
	0: "None",
	1: "ErrUnknown",
	2: "ErrNoSeat",
	3: "ErrNoAuthority",
	4: "ErrNotInRoom",
	5: "ErrRoomInGame",
	6: "ErrTargetNotInRoom",
}
var SRespRoomKick_ErrCode_value = map[string]int32{
	"None":               0,
	"ErrUnknown":         1,
	"ErrNoSeat":          2,
	"ErrNoAuthority":     3,
	"ErrNotInRoom":       4,
	"ErrRoomInGame":      5,
	"ErrTargetNotInRoom": 6,
}

func (x SRespRoomKick_ErrCode) String() string {
	return proto.EnumName(SRespRoomKick_ErrCode_name, int32(x))
}
func (SRespRoomKick_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{58, 0} }

type SNoticeRoomTimer_NoticeType int32

const (
	SNoticeRoomTimer_Invalid          SNoticeRoomTimer_NoticeType = 0
	SNoticeRoomTimer_ReadyTimerStart  SNoticeRoomTimer_NoticeType = 1
	SNoticeRoomTimer_ReadyTimerCancel SNoticeRoomTimer_NoticeType = 2
)

var SNoticeRoomTimer_NoticeType_name = map[int32]string{
	0: "Invalid",
	1: "ReadyTimerStart",
	2: "ReadyTimerCancel",
}
var SNoticeRoomTimer_NoticeType_value = map[string]int32{
	"Invalid":          0,
	"ReadyTimerStart":  1,
	"ReadyTimerCancel": 2,
}

func (x SNoticeRoomTimer_NoticeType) String() string {
	return proto.EnumName(SNoticeRoomTimer_NoticeType_name, int32(x))
}
func (SNoticeRoomTimer_NoticeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{59, 0}
}

type SNoticeRoomKick_KickTyp int32

const (
	SNoticeRoomKick_Invalid      SNoticeRoomKick_KickTyp = 0
	SNoticeRoomKick_MatchGameEnd SNoticeRoomKick_KickTyp = 1
)

var SNoticeRoomKick_KickTyp_name = map[int32]string{
	0: "Invalid",
	1: "MatchGameEnd",
}
var SNoticeRoomKick_KickTyp_value = map[string]int32{
	"Invalid":      0,
	"MatchGameEnd": 1,
}

func (x SNoticeRoomKick_KickTyp) String() string {
	return proto.EnumName(SNoticeRoomKick_KickTyp_name, int32(x))
}
func (SNoticeRoomKick_KickTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{60, 0} }

type SRespRoomStartGame_ErrCode int32

const (
	SRespRoomStartGame_None              SRespRoomStartGame_ErrCode = 0
	SRespRoomStartGame_ErrUnknown        SRespRoomStartGame_ErrCode = 1
	SRespRoomStartGame_ErrNoAuthority    SRespRoomStartGame_ErrCode = 2
	SRespRoomStartGame_ErrNotInRoom      SRespRoomStartGame_ErrCode = 3
	SRespRoomStartGame_ErrRoomInGame     SRespRoomStartGame_ErrCode = 4
	SRespRoomStartGame_ErrCreateGameFail SRespRoomStartGame_ErrCode = 5
	SRespRoomStartGame_ErrNotAllReady    SRespRoomStartGame_ErrCode = 6
)

var SRespRoomStartGame_ErrCode_name = map[int32]string{
	0: "None",
	1: "ErrUnknown",
	2: "ErrNoAuthority",
	3: "ErrNotInRoom",
	4: "ErrRoomInGame",
	5: "ErrCreateGameFail",
	6: "ErrNotAllReady",
}
var SRespRoomStartGame_ErrCode_value = map[string]int32{
	"None":              0,
	"ErrUnknown":        1,
	"ErrNoAuthority":    2,
	"ErrNotInRoom":      3,
	"ErrRoomInGame":     4,
	"ErrCreateGameFail": 5,
	"ErrNotAllReady":    6,
}

func (x SRespRoomStartGame_ErrCode) String() string {
	return proto.EnumName(SRespRoomStartGame_ErrCode_name, int32(x))
}
func (SRespRoomStartGame_ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{63, 0}
}

type SNotifyRoomChange_Action int32

const (
	SNotifyRoomChange_Invalid       SNotifyRoomChange_Action = 0
	SNotifyRoomChange_SitDown       SNotifyRoomChange_Action = 1
	SNotifyRoomChange_Leave         SNotifyRoomChange_Action = 2
	SNotifyRoomChange_LeaveByKick   SNotifyRoomChange_Action = 3
	SNotifyRoomChange_OwnerChange   SNotifyRoomChange_Action = 4
	SNotifyRoomChange_Ready         SNotifyRoomChange_Action = 5
	SNotifyRoomChange_ReadyCancel   SNotifyRoomChange_Action = 6
	SNotifyRoomChange_SettingChange SNotifyRoomChange_Action = 7
	SNotifyRoomChange_SitUpToLooker SNotifyRoomChange_Action = 8
)

var SNotifyRoomChange_Action_name = map[int32]string{
	0: "Invalid",
	1: "SitDown",
	2: "Leave",
	3: "LeaveByKick",
	4: "OwnerChange",
	5: "Ready",
	6: "ReadyCancel",
	7: "SettingChange",
	8: "SitUpToLooker",
}
var SNotifyRoomChange_Action_value = map[string]int32{
	"Invalid":       0,
	"SitDown":       1,
	"Leave":         2,
	"LeaveByKick":   3,
	"OwnerChange":   4,
	"Ready":         5,
	"ReadyCancel":   6,
	"SettingChange": 7,
	"SitUpToLooker": 8,
}

func (x SNotifyRoomChange_Action) String() string {
	return proto.EnumName(SNotifyRoomChange_Action_name, int32(x))
}
func (SNotifyRoomChange_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{64, 0} }

type SNoticeRoomEvent_Event int32

const (
	SNoticeRoomEvent_Invalid SNoticeRoomEvent_Event = 0
	SNoticeRoomEvent_Enter   SNoticeRoomEvent_Event = 1
	SNoticeRoomEvent_Leave   SNoticeRoomEvent_Event = 2
	SNoticeRoomEvent_SitFull SNoticeRoomEvent_Event = 3
)

var SNoticeRoomEvent_Event_name = map[int32]string{
	0: "Invalid",
	1: "Enter",
	2: "Leave",
	3: "SitFull",
}
var SNoticeRoomEvent_Event_value = map[string]int32{
	"Invalid": 0,
	"Enter":   1,
	"Leave":   2,
	"SitFull": 3,
}

func (x SNoticeRoomEvent_Event) String() string {
	return proto.EnumName(SNoticeRoomEvent_Event_name, int32(x))
}
func (SNoticeRoomEvent_Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{65, 0} }

type SRespCommonError_ErrCode int32

const (
	SRespCommonError_None              SRespCommonError_ErrCode = 0
	SRespCommonError_SessionNotInLobby SRespCommonError_ErrCode = 1
	SRespCommonError_LookerCannotOp    SRespCommonError_ErrCode = 2
	SRespCommonError_SessionNotInGame  SRespCommonError_ErrCode = 3
)

var SRespCommonError_ErrCode_name = map[int32]string{
	0: "None",
	1: "SessionNotInLobby",
	2: "LookerCannotOp",
	3: "SessionNotInGame",
}
var SRespCommonError_ErrCode_value = map[string]int32{
	"None":              0,
	"SessionNotInLobby": 1,
	"LookerCannotOp":    2,
	"SessionNotInGame":  3,
}

func (x SRespCommonError_ErrCode) String() string {
	return proto.EnumName(SRespCommonError_ErrCode_name, int32(x))
}
func (SRespCommonError_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{70, 0} }

type CReqMatch_ModeID int32

const (
	CReqMatch_ModeNone  CReqMatch_ModeID = 0
	CReqMatch_ModeText  CReqMatch_ModeID = 1
	CReqMatch_ModeVoice CReqMatch_ModeID = 2
)

var CReqMatch_ModeID_name = map[int32]string{
	0: "ModeNone",
	1: "ModeText",
	2: "ModeVoice",
}
var CReqMatch_ModeID_value = map[string]int32{
	"ModeNone":  0,
	"ModeText":  1,
	"ModeVoice": 2,
}

func (x CReqMatch_ModeID) String() string {
	return proto.EnumName(CReqMatch_ModeID_name, int32(x))
}
func (CReqMatch_ModeID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{71, 0} }

type SRespMatch_ErrCode int32

const (
	SRespMatch_None    SRespMatch_ErrCode = 0
	SRespMatch_Success SRespMatch_ErrCode = 1
	SRespMatch_Failed  SRespMatch_ErrCode = 2
)

var SRespMatch_ErrCode_name = map[int32]string{
	0: "None",
	1: "Success",
	2: "Failed",
}
var SRespMatch_ErrCode_value = map[string]int32{
	"None":    0,
	"Success": 1,
	"Failed":  2,
}

func (x SRespMatch_ErrCode) String() string {
	return proto.EnumName(SRespMatch_ErrCode_name, int32(x))
}
func (SRespMatch_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{72, 0} }

type SNoticeMatchResult_NoticeType int32

const (
	SNoticeMatchResult_Invalid        SNoticeMatchResult_NoticeType = 0
	SNoticeMatchResult_MatchSucess    SNoticeMatchResult_NoticeType = 1
	SNoticeMatchResult_MatchStartGame SNoticeMatchResult_NoticeType = 2
)

var SNoticeMatchResult_NoticeType_name = map[int32]string{
	0: "Invalid",
	1: "MatchSucess",
	2: "MatchStartGame",
}
var SNoticeMatchResult_NoticeType_value = map[string]int32{
	"Invalid":        0,
	"MatchSucess":    1,
	"MatchStartGame": 2,
}

func (x SNoticeMatchResult_NoticeType) String() string {
	return proto.EnumName(SNoticeMatchResult_NoticeType_name, int32(x))
}
func (SNoticeMatchResult_NoticeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{73, 0}
}

type SRespCancelMatch_ErrCode int32

const (
	SRespCancelMatch_None    SRespCancelMatch_ErrCode = 0
	SRespCancelMatch_Failed  SRespCancelMatch_ErrCode = 1
	SRespCancelMatch_Success SRespCancelMatch_ErrCode = 2
)

var SRespCancelMatch_ErrCode_name = map[int32]string{
	0: "None",
	1: "Failed",
	2: "Success",
}
var SRespCancelMatch_ErrCode_value = map[string]int32{
	"None":    0,
	"Failed":  1,
	"Success": 2,
}

func (x SRespCancelMatch_ErrCode) String() string {
	return proto.EnumName(SRespCancelMatch_ErrCode_name, int32(x))
}
func (SRespCancelMatch_ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{75, 0} }

type CCardGroupOpt_OptType int32

const (
	CCardGroupOpt_OptNone   CCardGroupOpt_OptType = 0
	CCardGroupOpt_OptCreat  CCardGroupOpt_OptType = 1
	CCardGroupOpt_OptModify CCardGroupOpt_OptType = 2
	CCardGroupOpt_OptSelect CCardGroupOpt_OptType = 3
)

var CCardGroupOpt_OptType_name = map[int32]string{
	0: "OptNone",
	1: "OptCreat",
	2: "OptModify",
	3: "OptSelect",
}
var CCardGroupOpt_OptType_value = map[string]int32{
	"OptNone":   0,
	"OptCreat":  1,
	"OptModify": 2,
	"OptSelect": 3,
}

func (x CCardGroupOpt_OptType) String() string {
	return proto.EnumName(CCardGroupOpt_OptType_name, int32(x))
}
func (CCardGroupOpt_OptType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{76, 0} }

type SRespCardGroupOpt_ErrCode int32

const (
	SRespCardGroupOpt_ErrNone       SRespCardGroupOpt_ErrCode = 0
	SRespCardGroupOpt_ErrCardsCount SRespCardGroupOpt_ErrCode = 1
	SRespCardGroupOpt_ErrCardSame   SRespCardGroupOpt_ErrCode = 2
)

var SRespCardGroupOpt_ErrCode_name = map[int32]string{
	0: "ErrNone",
	1: "ErrCardsCount",
	2: "ErrCardSame",
}
var SRespCardGroupOpt_ErrCode_value = map[string]int32{
	"ErrNone":       0,
	"ErrCardsCount": 1,
	"ErrCardSame":   2,
}

func (x SRespCardGroupOpt_ErrCode) String() string {
	return proto.EnumName(SRespCardGroupOpt_ErrCode_name, int32(x))
}
func (SRespCardGroupOpt_ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{77, 0}
}

type SRespCardGroupOpt_SuccessCode int32

const (
	SRespCardGroupOpt_SuccessNone   SRespCardGroupOpt_SuccessCode = 0
	SRespCardGroupOpt_SuccessCreat  SRespCardGroupOpt_SuccessCode = 1
	SRespCardGroupOpt_SuccessModify SRespCardGroupOpt_SuccessCode = 2
	SRespCardGroupOpt_SuccessSelect SRespCardGroupOpt_SuccessCode = 3
)

var SRespCardGroupOpt_SuccessCode_name = map[int32]string{
	0: "SuccessNone",
	1: "SuccessCreat",
	2: "SuccessModify",
	3: "SuccessSelect",
}
var SRespCardGroupOpt_SuccessCode_value = map[string]int32{
	"SuccessNone":   0,
	"SuccessCreat":  1,
	"SuccessModify": 2,
	"SuccessSelect": 3,
}

func (x SRespCardGroupOpt_SuccessCode) String() string {
	return proto.EnumName(SRespCardGroupOpt_SuccessCode_name, int32(x))
}
func (SRespCardGroupOpt_SuccessCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{77, 1}
}

type CReqPing struct {
	TimeTag int64 `protobuf:"varint,1,opt,name=timeTag" json:"timeTag,omitempty"`
	SvrType int32 `protobuf:"varint,2,opt,name=svrType" json:"svrType,omitempty"`
}

func (m *CReqPing) Reset()                    { *m = CReqPing{} }
func (m *CReqPing) String() string            { return proto.CompactTextString(m) }
func (*CReqPing) ProtoMessage()               {}
func (*CReqPing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CReqPing) GetTimeTag() int64 {
	if m != nil {
		return m.TimeTag
	}
	return 0
}

func (m *CReqPing) GetSvrType() int32 {
	if m != nil {
		return m.SvrType
	}
	return 0
}

type SRespPing struct {
	TimeTag int64 `protobuf:"varint,1,opt,name=timeTag" json:"timeTag,omitempty"`
	SvrType int32 `protobuf:"varint,2,opt,name=svrType" json:"svrType,omitempty"`
}

func (m *SRespPing) Reset()                    { *m = SRespPing{} }
func (m *SRespPing) String() string            { return proto.CompactTextString(m) }
func (*SRespPing) ProtoMessage()               {}
func (*SRespPing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SRespPing) GetTimeTag() int64 {
	if m != nil {
		return m.TimeTag
	}
	return 0
}

func (m *SRespPing) GetSvrType() int32 {
	if m != nil {
		return m.SvrType
	}
	return 0
}

// 请求登陆.
type CReqLogin struct {
	Ticket    string                   `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	LoginType gameconf.AccountLoginTyp `protobuf:"varint,2,opt,name=loginType,enum=gameconf.AccountLoginTyp" json:"loginType,omitempty"`
	Version   string                   `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
}

func (m *CReqLogin) Reset()                    { *m = CReqLogin{} }
func (m *CReqLogin) String() string            { return proto.CompactTextString(m) }
func (*CReqLogin) ProtoMessage()               {}
func (*CReqLogin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CReqLogin) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *CReqLogin) GetLoginType() gameconf.AccountLoginTyp {
	if m != nil {
		return m.LoginType
	}
	return gameconf.AccountLoginTyp_ALTInvalid
}

func (m *CReqLogin) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// 响应登陆请求.
type SRespLogin struct {
	ErrCode    SRespLogin_ErrCode    `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespLogin_ErrCode" json:"errCode,omitempty"`
	ErrData    []int64               `protobuf:"varint,2,rep,name=errData" json:"errData,omitempty"`
	UserId     uint64                `protobuf:"varint,3,opt,name=userId" json:"userId,omitempty"`
	Account    string                `protobuf:"bytes,4,opt,name=account" json:"account,omitempty"`
	UserBrief  *gamedef.UserBrief    `protobuf:"bytes,10,opt,name=userBrief" json:"userBrief,omitempty"`
	ServerTime int64                 `protobuf:"varint,11,opt,name=serverTime" json:"serverTime,omitempty"`
	IsInGame   bool                  `protobuf:"varint,20,opt,name=isInGame" json:"isInGame,omitempty"`
	ServerCfg  *gamedef.ServerConfig `protobuf:"bytes,21,opt,name=serverCfg" json:"serverCfg,omitempty"`
}

func (m *SRespLogin) Reset()                    { *m = SRespLogin{} }
func (m *SRespLogin) String() string            { return proto.CompactTextString(m) }
func (*SRespLogin) ProtoMessage()               {}
func (*SRespLogin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SRespLogin) GetErrCode() SRespLogin_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespLogin_Succ
}

func (m *SRespLogin) GetErrData() []int64 {
	if m != nil {
		return m.ErrData
	}
	return nil
}

func (m *SRespLogin) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SRespLogin) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *SRespLogin) GetUserBrief() *gamedef.UserBrief {
	if m != nil {
		return m.UserBrief
	}
	return nil
}

func (m *SRespLogin) GetServerTime() int64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *SRespLogin) GetIsInGame() bool {
	if m != nil {
		return m.IsInGame
	}
	return false
}

func (m *SRespLogin) GetServerCfg() *gamedef.ServerConfig {
	if m != nil {
		return m.ServerCfg
	}
	return nil
}

// 同步玩家信息
type SSyncUserBrief struct {
	UserBrief *gamedef.UserBrief `protobuf:"bytes,1,opt,name=userBrief" json:"userBrief,omitempty"`
}

func (m *SSyncUserBrief) Reset()                    { *m = SSyncUserBrief{} }
func (m *SSyncUserBrief) String() string            { return proto.CompactTextString(m) }
func (*SSyncUserBrief) ProtoMessage()               {}
func (*SSyncUserBrief) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SSyncUserBrief) GetUserBrief() *gamedef.UserBrief {
	if m != nil {
		return m.UserBrief
	}
	return nil
}

// 请求我的数据(暂时不用)
type CReqMyData struct {
}

func (m *CReqMyData) Reset()                    { *m = CReqMyData{} }
func (m *CReqMyData) String() string            { return proto.CompactTextString(m) }
func (*CReqMyData) ProtoMessage()               {}
func (*CReqMyData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// 响应我的数据请求（暂时不用）
type SRespMyData struct {
	ErrCode SRespMyData_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespMyData_ErrCode" json:"errCode,omitempty"`
	ErrMsg  string              `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
	// 基础信息
	UserBase *gamedef.UserBase `protobuf:"bytes,5,opt,name=userBase" json:"userBase,omitempty"`
}

func (m *SRespMyData) Reset()                    { *m = SRespMyData{} }
func (m *SRespMyData) String() string            { return proto.CompactTextString(m) }
func (*SRespMyData) ProtoMessage()               {}
func (*SRespMyData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SRespMyData) GetErrCode() SRespMyData_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespMyData_Succ
}

func (m *SRespMyData) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *SRespMyData) GetUserBase() *gamedef.UserBase {
	if m != nil {
		return m.UserBase
	}
	return nil
}

// 通知游戏开始，可以进入场景了
type SNoticeGameReady struct {
	GameMode gameconf.GameModeTyp     `protobuf:"varint,1,opt,name=gameMode,enum=gameconf.GameModeTyp" json:"gameMode,omitempty"`
	Seats    []*SNoticeGameReady_Seat `protobuf:"bytes,2,rep,name=seats" json:"seats,omitempty"`
	GameUUID string                   `protobuf:"bytes,3,opt,name=gameUUID" json:"gameUUID,omitempty"`
	RoomId   uint32                   `protobuf:"varint,4,opt,name=roomId" json:"roomId,omitempty"`
	VoiceId  string                   `protobuf:"bytes,6,opt,name=voiceId" json:"voiceId,omitempty"`
}

func (m *SNoticeGameReady) Reset()                    { *m = SNoticeGameReady{} }
func (m *SNoticeGameReady) String() string            { return proto.CompactTextString(m) }
func (*SNoticeGameReady) ProtoMessage()               {}
func (*SNoticeGameReady) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SNoticeGameReady) GetGameMode() gameconf.GameModeTyp {
	if m != nil {
		return m.GameMode
	}
	return gameconf.GameModeTyp_MGTInvalid
}

func (m *SNoticeGameReady) GetSeats() []*SNoticeGameReady_Seat {
	if m != nil {
		return m.Seats
	}
	return nil
}

func (m *SNoticeGameReady) GetGameUUID() string {
	if m != nil {
		return m.GameUUID
	}
	return ""
}

func (m *SNoticeGameReady) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *SNoticeGameReady) GetVoiceId() string {
	if m != nil {
		return m.VoiceId
	}
	return ""
}

type SNoticeGameReady_Seat struct {
	SeatId       int32                     `protobuf:"varint,1,opt,name=seatId" json:"seatId,omitempty"`
	Head         *gamedef.HeadInfo         `protobuf:"bytes,2,opt,name=head" json:"head,omitempty"`
	ConnectState gameconf.UserConnectState `protobuf:"varint,3,opt,name=connectState,enum=gameconf.UserConnectState" json:"connectState,omitempty"`
}

func (m *SNoticeGameReady_Seat) Reset()                    { *m = SNoticeGameReady_Seat{} }
func (m *SNoticeGameReady_Seat) String() string            { return proto.CompactTextString(m) }
func (*SNoticeGameReady_Seat) ProtoMessage()               {}
func (*SNoticeGameReady_Seat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

func (m *SNoticeGameReady_Seat) GetSeatId() int32 {
	if m != nil {
		return m.SeatId
	}
	return 0
}

func (m *SNoticeGameReady_Seat) GetHead() *gamedef.HeadInfo {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *SNoticeGameReady_Seat) GetConnectState() gameconf.UserConnectState {
	if m != nil {
		return m.ConnectState
	}
	return gameconf.UserConnectState_USConnect
}

// 请求游戏场景，游戏开始或断线重连用
type CReqGameScene struct {
}

func (m *CReqGameScene) Reset()                    { *m = CReqGameScene{} }
func (m *CReqGameScene) String() string            { return proto.CompactTextString(m) }
func (*CReqGameScene) ProtoMessage()               {}
func (*CReqGameScene) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type SRespGameScene struct {
	ErrCode      SRespGameScene_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespGameScene_ErrCode" json:"errCode,omitempty"`
	GameMode     gameconf.GameModeTyp   `protobuf:"varint,2,opt,name=gameMode,enum=gameconf.GameModeTyp" json:"gameMode,omitempty"`
	RoomSetting  *gamedef.RoomSetting   `protobuf:"bytes,4,opt,name=roomSetting" json:"roomSetting,omitempty"`
	RoomNO       uint32                 `protobuf:"varint,5,opt,name=roomNO" json:"roomNO,omitempty"`
	OpSeatIds    []int32                `protobuf:"varint,8,rep,name=opSeatIds" json:"opSeatIds,omitempty"`
	OpEndTime    int64                  `protobuf:"varint,9,opt,name=opEndTime" json:"opEndTime,omitempty"`
	Phase        gamedef.GamePhase      `protobuf:"varint,10,opt,name=phase,enum=gamedef.GamePhase" json:"phase,omitempty"`
	Seats        []*SRespGameScene_Seat `protobuf:"bytes,12,rep,name=seats" json:"seats,omitempty"`
	VoiceId      string                 `protobuf:"bytes,14,opt,name=voiceId" json:"voiceId,omitempty"`
	LookerCount  int32                  `protobuf:"varint,15,opt,name=lookerCount" json:"lookerCount,omitempty"`
	PhaseEndTime int64                  `protobuf:"varint,16,opt,name=phaseEndTime" json:"phaseEndTime,omitempty"`
	MySeatId     int32                  `protobuf:"varint,17,opt,name=mySeatId" json:"mySeatId,omitempty"`
	LookerType   gameconf.LookerTyp     `protobuf:"varint,18,opt,name=lookerType,enum=gameconf.LookerTyp" json:"lookerType,omitempty"`
	ServerTime   int64                  `protobuf:"varint,19,opt,name=serverTime" json:"serverTime,omitempty"`
	Board        *gamedef.GameBoard     `protobuf:"bytes,20,opt,name=board" json:"board,omitempty"`
}

func (m *SRespGameScene) Reset()                    { *m = SRespGameScene{} }
func (m *SRespGameScene) String() string            { return proto.CompactTextString(m) }
func (*SRespGameScene) ProtoMessage()               {}
func (*SRespGameScene) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SRespGameScene) GetErrCode() SRespGameScene_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespGameScene_None
}

func (m *SRespGameScene) GetGameMode() gameconf.GameModeTyp {
	if m != nil {
		return m.GameMode
	}
	return gameconf.GameModeTyp_MGTInvalid
}

func (m *SRespGameScene) GetRoomSetting() *gamedef.RoomSetting {
	if m != nil {
		return m.RoomSetting
	}
	return nil
}

func (m *SRespGameScene) GetRoomNO() uint32 {
	if m != nil {
		return m.RoomNO
	}
	return 0
}

func (m *SRespGameScene) GetOpSeatIds() []int32 {
	if m != nil {
		return m.OpSeatIds
	}
	return nil
}

func (m *SRespGameScene) GetOpEndTime() int64 {
	if m != nil {
		return m.OpEndTime
	}
	return 0
}

func (m *SRespGameScene) GetPhase() gamedef.GamePhase {
	if m != nil {
		return m.Phase
	}
	return gamedef.GamePhase_Invalid
}

func (m *SRespGameScene) GetSeats() []*SRespGameScene_Seat {
	if m != nil {
		return m.Seats
	}
	return nil
}

func (m *SRespGameScene) GetVoiceId() string {
	if m != nil {
		return m.VoiceId
	}
	return ""
}

func (m *SRespGameScene) GetLookerCount() int32 {
	if m != nil {
		return m.LookerCount
	}
	return 0
}

func (m *SRespGameScene) GetPhaseEndTime() int64 {
	if m != nil {
		return m.PhaseEndTime
	}
	return 0
}

func (m *SRespGameScene) GetMySeatId() int32 {
	if m != nil {
		return m.MySeatId
	}
	return 0
}

func (m *SRespGameScene) GetLookerType() gameconf.LookerTyp {
	if m != nil {
		return m.LookerType
	}
	return gameconf.LookerTyp_LTInvalid
}

func (m *SRespGameScene) GetServerTime() int64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *SRespGameScene) GetBoard() *gamedef.GameBoard {
	if m != nil {
		return m.Board
	}
	return nil
}

type SRespGameScene_Seat struct {
	SeatId       int32                     `protobuf:"varint,1,opt,name=seatId" json:"seatId,omitempty"`
	UserId       uint64                    `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	UserBrief    *gamedef.UserBrief        `protobuf:"bytes,3,opt,name=userBrief" json:"userBrief,omitempty"`
	ConnectState gameconf.UserConnectState `protobuf:"varint,4,opt,name=connectState,enum=gameconf.UserConnectState" json:"connectState,omitempty"`
	GameSeat     *gamedef.GameSeat         `protobuf:"bytes,5,opt,name=gameSeat" json:"gameSeat,omitempty"`
}

func (m *SRespGameScene_Seat) Reset()                    { *m = SRespGameScene_Seat{} }
func (m *SRespGameScene_Seat) String() string            { return proto.CompactTextString(m) }
func (*SRespGameScene_Seat) ProtoMessage()               {}
func (*SRespGameScene_Seat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

func (m *SRespGameScene_Seat) GetSeatId() int32 {
	if m != nil {
		return m.SeatId
	}
	return 0
}

func (m *SRespGameScene_Seat) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SRespGameScene_Seat) GetUserBrief() *gamedef.UserBrief {
	if m != nil {
		return m.UserBrief
	}
	return nil
}

func (m *SRespGameScene_Seat) GetConnectState() gameconf.UserConnectState {
	if m != nil {
		return m.ConnectState
	}
	return gameconf.UserConnectState_USConnect
}

func (m *SRespGameScene_Seat) GetGameSeat() *gamedef.GameSeat {
	if m != nil {
		return m.GameSeat
	}
	return nil
}

// 暂时无用
type CReqSceneReady struct {
}

func (m *CReqSceneReady) Reset()                    { *m = CReqSceneReady{} }
func (m *CReqSceneReady) String() string            { return proto.CompactTextString(m) }
func (*CReqSceneReady) ProtoMessage()               {}
func (*CReqSceneReady) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type SRespSceneReady struct {
	ErrCode SRespSceneReady_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespSceneReady_ErrCode" json:"errCode,omitempty"`
	OutTime int32                   `protobuf:"varint,2,opt,name=outTime" json:"outTime,omitempty"`
}

func (m *SRespSceneReady) Reset()                    { *m = SRespSceneReady{} }
func (m *SRespSceneReady) String() string            { return proto.CompactTextString(m) }
func (*SRespSceneReady) ProtoMessage()               {}
func (*SRespSceneReady) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SRespSceneReady) GetErrCode() SRespSceneReady_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespSceneReady_None
}

func (m *SRespSceneReady) GetOutTime() int32 {
	if m != nil {
		return m.OutTime
	}
	return 0
}

type SNoticeGameStart struct {
}

func (m *SNoticeGameStart) Reset()                    { *m = SNoticeGameStart{} }
func (m *SNoticeGameStart) String() string            { return proto.CompactTextString(m) }
func (*SNoticeGameStart) ProtoMessage()               {}
func (*SNoticeGameStart) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type SNoticeEnterPhase struct {
	Phase        gamedef.GamePhase `protobuf:"varint,1,opt,name=phase,enum=gamedef.GamePhase" json:"phase,omitempty"`
	RoundCount   int32             `protobuf:"varint,2,opt,name=roundCount" json:"roundCount,omitempty"`
	SeatId       int32             `protobuf:"varint,3,opt,name=seatId" json:"seatId,omitempty"`
	PhaseEndTime int64             `protobuf:"varint,4,opt,name=phaseEndTime" json:"phaseEndTime,omitempty"`
}

func (m *SNoticeEnterPhase) Reset()                    { *m = SNoticeEnterPhase{} }
func (m *SNoticeEnterPhase) String() string            { return proto.CompactTextString(m) }
func (*SNoticeEnterPhase) ProtoMessage()               {}
func (*SNoticeEnterPhase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SNoticeEnterPhase) GetPhase() gamedef.GamePhase {
	if m != nil {
		return m.Phase
	}
	return gamedef.GamePhase_Invalid
}

func (m *SNoticeEnterPhase) GetRoundCount() int32 {
	if m != nil {
		return m.RoundCount
	}
	return 0
}

func (m *SNoticeEnterPhase) GetSeatId() int32 {
	if m != nil {
		return m.SeatId
	}
	return 0
}

func (m *SNoticeEnterPhase) GetPhaseEndTime() int64 {
	if m != nil {
		return m.PhaseEndTime
	}
	return 0
}

// 通知抓牌
type SNoticeDrawCard struct {
	OpSeatId int32               `protobuf:"varint,1,opt,name=opSeatId" json:"opSeatId,omitempty"`
	Cards    []*gamedef.PoolCard `protobuf:"bytes,2,rep,name=cards" json:"cards,omitempty"`
}

func (m *SNoticeDrawCard) Reset()                    { *m = SNoticeDrawCard{} }
func (m *SNoticeDrawCard) String() string            { return proto.CompactTextString(m) }
func (*SNoticeDrawCard) ProtoMessage()               {}
func (*SNoticeDrawCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SNoticeDrawCard) GetOpSeatId() int32 {
	if m != nil {
		return m.OpSeatId
	}
	return 0
}

func (m *SNoticeDrawCard) GetCards() []*gamedef.PoolCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

type SNoticeOp struct {
	OpType    SNoticeOp_OpType    `protobuf:"varint,1,opt,name=opType,enum=cmsg.SNoticeOp_OpType" json:"opType,omitempty"`
	OpSeatId  int32               `protobuf:"varint,2,opt,name=opSeatId" json:"opSeatId,omitempty"`
	TargetPos []*gamedef.Position `protobuf:"bytes,4,rep,name=targetPos" json:"targetPos,omitempty"`
	OpEndTime int64               `protobuf:"varint,6,opt,name=opEndTime" json:"opEndTime,omitempty"`
	SpellCard int32               `protobuf:"varint,7,opt,name=spellCard" json:"spellCard,omitempty"`
	Data      *SNoticeOp_Data     `protobuf:"bytes,10,opt,name=data" json:"data,omitempty"`
	LeftAP    int32               `protobuf:"varint,11,opt,name=leftAP" json:"leftAP,omitempty"`
}

func (m *SNoticeOp) Reset()                    { *m = SNoticeOp{} }
func (m *SNoticeOp) String() string            { return proto.CompactTextString(m) }
func (*SNoticeOp) ProtoMessage()               {}
func (*SNoticeOp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SNoticeOp) GetOpType() SNoticeOp_OpType {
	if m != nil {
		return m.OpType
	}
	return SNoticeOp_Invalid
}

func (m *SNoticeOp) GetOpSeatId() int32 {
	if m != nil {
		return m.OpSeatId
	}
	return 0
}

func (m *SNoticeOp) GetTargetPos() []*gamedef.Position {
	if m != nil {
		return m.TargetPos
	}
	return nil
}

func (m *SNoticeOp) GetOpEndTime() int64 {
	if m != nil {
		return m.OpEndTime
	}
	return 0
}

func (m *SNoticeOp) GetSpellCard() int32 {
	if m != nil {
		return m.SpellCard
	}
	return 0
}

func (m *SNoticeOp) GetData() *SNoticeOp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SNoticeOp) GetLeftAP() int32 {
	if m != nil {
		return m.LeftAP
	}
	return 0
}

type SNoticeOp_Data struct {
	OptCount      int32                  `protobuf:"varint,1,opt,name=optCount" json:"optCount,omitempty"`
	SelectCardTyp gamedef.SelectCardType `protobuf:"varint,2,opt,name=selectCardTyp,enum=gamedef.SelectCardType" json:"selectCardTyp,omitempty"`
}

func (m *SNoticeOp_Data) Reset()                    { *m = SNoticeOp_Data{} }
func (m *SNoticeOp_Data) String() string            { return proto.CompactTextString(m) }
func (*SNoticeOp_Data) ProtoMessage()               {}
func (*SNoticeOp_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15, 0} }

func (m *SNoticeOp_Data) GetOptCount() int32 {
	if m != nil {
		return m.OptCount
	}
	return 0
}

func (m *SNoticeOp_Data) GetSelectCardTyp() gamedef.SelectCardType {
	if m != nil {
		return m.SelectCardTyp
	}
	return gamedef.SelectCardType_Any
}

type CReqOpt struct {
	OpType    CReqOpt_OpType      `protobuf:"varint,1,opt,name=opType,enum=cmsg.CReqOpt_OpType" json:"opType,omitempty"`
	SkillId   int32               `protobuf:"varint,2,opt,name=skillId" json:"skillId,omitempty"`
	CardIds   []int32             `protobuf:"varint,3,rep,name=cardIds" json:"cardIds,omitempty"`
	TargetPos []*gamedef.Position `protobuf:"bytes,4,rep,name=targetPos" json:"targetPos,omitempty"`
	Data      []int32             `protobuf:"varint,5,rep,name=data" json:"data,omitempty"`
	SeatId    int32               `protobuf:"varint,6,opt,name=seatId" json:"seatId,omitempty"`
}

func (m *CReqOpt) Reset()                    { *m = CReqOpt{} }
func (m *CReqOpt) String() string            { return proto.CompactTextString(m) }
func (*CReqOpt) ProtoMessage()               {}
func (*CReqOpt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CReqOpt) GetOpType() CReqOpt_OpType {
	if m != nil {
		return m.OpType
	}
	return CReqOpt_Invalid
}

func (m *CReqOpt) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *CReqOpt) GetCardIds() []int32 {
	if m != nil {
		return m.CardIds
	}
	return nil
}

func (m *CReqOpt) GetTargetPos() []*gamedef.Position {
	if m != nil {
		return m.TargetPos
	}
	return nil
}

func (m *CReqOpt) GetData() []int32 {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CReqOpt) GetSeatId() int32 {
	if m != nil {
		return m.SeatId
	}
	return 0
}

type SRespOpt struct {
	ErrCode SRespOpt_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespOpt_ErrCode" json:"errCode,omitempty"`
}

func (m *SRespOpt) Reset()                    { *m = SRespOpt{} }
func (m *SRespOpt) String() string            { return proto.CompactTextString(m) }
func (*SRespOpt) ProtoMessage()               {}
func (*SRespOpt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SRespOpt) GetErrCode() SRespOpt_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespOpt_None
}

type CReqAct struct {
	ActType    gamedef.ActType         `protobuf:"varint,1,opt,name=actType,enum=gamedef.ActType" json:"actType,omitempty"`
	CardId     int32                   `protobuf:"varint,2,opt,name=cardId" json:"cardId,omitempty"`
	TargetPos  *gamedef.Position       `protobuf:"bytes,3,opt,name=targetPos" json:"targetPos,omitempty"`
	NeedSelect bool                    `protobuf:"varint,4,opt,name=needSelect" json:"needSelect,omitempty"`
	ActSelect  *gamedef.ActSelectParam `protobuf:"bytes,5,opt,name=actSelect" json:"actSelect,omitempty"`
}

func (m *CReqAct) Reset()                    { *m = CReqAct{} }
func (m *CReqAct) String() string            { return proto.CompactTextString(m) }
func (*CReqAct) ProtoMessage()               {}
func (*CReqAct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CReqAct) GetActType() gamedef.ActType {
	if m != nil {
		return m.ActType
	}
	return gamedef.ActType_None
}

func (m *CReqAct) GetCardId() int32 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *CReqAct) GetTargetPos() *gamedef.Position {
	if m != nil {
		return m.TargetPos
	}
	return nil
}

func (m *CReqAct) GetNeedSelect() bool {
	if m != nil {
		return m.NeedSelect
	}
	return false
}

func (m *CReqAct) GetActSelect() *gamedef.ActSelectParam {
	if m != nil {
		return m.ActSelect
	}
	return nil
}

type SRespAct struct {
	ErrCode   SRespAct_ErrCode        `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespAct_ErrCode" json:"errCode,omitempty"`
	ActType   gamedef.ActType         `protobuf:"varint,2,opt,name=actType,enum=gamedef.ActType" json:"actType,omitempty"`
	CardId    int32                   `protobuf:"varint,3,opt,name=cardId" json:"cardId,omitempty"`
	TargetPos *gamedef.Position       `protobuf:"bytes,4,opt,name=targetPos" json:"targetPos,omitempty"`
	ActSelect *gamedef.ActSelectParam `protobuf:"bytes,5,opt,name=actSelect" json:"actSelect,omitempty"`
}

func (m *SRespAct) Reset()                    { *m = SRespAct{} }
func (m *SRespAct) String() string            { return proto.CompactTextString(m) }
func (*SRespAct) ProtoMessage()               {}
func (*SRespAct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *SRespAct) GetErrCode() SRespAct_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespAct_None
}

func (m *SRespAct) GetActType() gamedef.ActType {
	if m != nil {
		return m.ActType
	}
	return gamedef.ActType_None
}

func (m *SRespAct) GetCardId() int32 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *SRespAct) GetTargetPos() *gamedef.Position {
	if m != nil {
		return m.TargetPos
	}
	return nil
}

func (m *SRespAct) GetActSelect() *gamedef.ActSelectParam {
	if m != nil {
		return m.ActSelect
	}
	return nil
}

// 同步玩家操作,纯表现
type SSyncAct struct {
	ActType   gamedef.ActType     `protobuf:"varint,1,opt,name=actType,enum=gamedef.ActType" json:"actType,omitempty"`
	OpSeatId  int32               `protobuf:"varint,2,opt,name=opSeatId" json:"opSeatId,omitempty"`
	OpCard    int32               `protobuf:"varint,3,opt,name=opCard" json:"opCard,omitempty"`
	TargetPos []*gamedef.Position `protobuf:"bytes,4,rep,name=targetPos" json:"targetPos,omitempty"`
	SpellCard int32               `protobuf:"varint,6,opt,name=spellCard" json:"spellCard,omitempty"`
}

func (m *SSyncAct) Reset()                    { *m = SSyncAct{} }
func (m *SSyncAct) String() string            { return proto.CompactTextString(m) }
func (*SSyncAct) ProtoMessage()               {}
func (*SSyncAct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SSyncAct) GetActType() gamedef.ActType {
	if m != nil {
		return m.ActType
	}
	return gamedef.ActType_None
}

func (m *SSyncAct) GetOpSeatId() int32 {
	if m != nil {
		return m.OpSeatId
	}
	return 0
}

func (m *SSyncAct) GetOpCard() int32 {
	if m != nil {
		return m.OpCard
	}
	return 0
}

func (m *SSyncAct) GetTargetPos() []*gamedef.Position {
	if m != nil {
		return m.TargetPos
	}
	return nil
}

func (m *SSyncAct) GetSpellCard() int32 {
	if m != nil {
		return m.SpellCard
	}
	return 0
}

// 同步卡牌变化
type SSyncCard struct {
	Card         *gamedef.Card       `protobuf:"bytes,1,opt,name=card" json:"card,omitempty"`
	SeatId       int32               `protobuf:"varint,3,opt,name=seatId" json:"seatId,omitempty"`
	Changes      []*SSyncCard_Change `protobuf:"bytes,4,rep,name=changes" json:"changes,omitempty"`
	SpellSkillId int32               `protobuf:"varint,10,opt,name=spellSkillId" json:"spellSkillId,omitempty"`
	SpellCard    int32               `protobuf:"varint,11,opt,name=spellCard" json:"spellCard,omitempty"`
}

func (m *SSyncCard) Reset()                    { *m = SSyncCard{} }
func (m *SSyncCard) String() string            { return proto.CompactTextString(m) }
func (*SSyncCard) ProtoMessage()               {}
func (*SSyncCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SSyncCard) GetCard() *gamedef.Card {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *SSyncCard) GetSeatId() int32 {
	if m != nil {
		return m.SeatId
	}
	return 0
}

func (m *SSyncCard) GetChanges() []*SSyncCard_Change {
	if m != nil {
		return m.Changes
	}
	return nil
}

func (m *SSyncCard) GetSpellSkillId() int32 {
	if m != nil {
		return m.SpellSkillId
	}
	return 0
}

func (m *SSyncCard) GetSpellCard() int32 {
	if m != nil {
		return m.SpellCard
	}
	return 0
}

type SSyncCard_Change struct {
	ChangeType SSyncCard_ChangeType `protobuf:"varint,1,opt,name=changeType,enum=cmsg.SSyncCard_ChangeType" json:"changeType,omitempty"`
	Change     int32                `protobuf:"varint,2,opt,name=change" json:"change,omitempty"`
	Old        int32                `protobuf:"varint,3,opt,name=old" json:"old,omitempty"`
	New        int32                `protobuf:"varint,4,opt,name=new" json:"new,omitempty"`
	OldPos     *gamedef.Position    `protobuf:"bytes,5,opt,name=oldPos" json:"oldPos,omitempty"`
	NewPos     *gamedef.Position    `protobuf:"bytes,6,opt,name=newPos" json:"newPos,omitempty"`
	NewBuffId  int32                `protobuf:"varint,9,opt,name=newBuffId" json:"newBuffId,omitempty"`
}

func (m *SSyncCard_Change) Reset()                    { *m = SSyncCard_Change{} }
func (m *SSyncCard_Change) String() string            { return proto.CompactTextString(m) }
func (*SSyncCard_Change) ProtoMessage()               {}
func (*SSyncCard_Change) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21, 0} }

func (m *SSyncCard_Change) GetChangeType() SSyncCard_ChangeType {
	if m != nil {
		return m.ChangeType
	}
	return SSyncCard_None
}

func (m *SSyncCard_Change) GetChange() int32 {
	if m != nil {
		return m.Change
	}
	return 0
}

func (m *SSyncCard_Change) GetOld() int32 {
	if m != nil {
		return m.Old
	}
	return 0
}

func (m *SSyncCard_Change) GetNew() int32 {
	if m != nil {
		return m.New
	}
	return 0
}

func (m *SSyncCard_Change) GetOldPos() *gamedef.Position {
	if m != nil {
		return m.OldPos
	}
	return nil
}

func (m *SSyncCard_Change) GetNewPos() *gamedef.Position {
	if m != nil {
		return m.NewPos
	}
	return nil
}

func (m *SSyncCard_Change) GetNewBuffId() int32 {
	if m != nil {
		return m.NewBuffId
	}
	return 0
}

// 同步使用技能,纯表现
type SSyncUseSkill struct {
	Seat         int32   `protobuf:"varint,1,opt,name=seat" json:"seat,omitempty"`
	SkillId      int32   `protobuf:"varint,2,opt,name=skillId" json:"skillId,omitempty"`
	Card         int32   `protobuf:"varint,3,opt,name=card" json:"card,omitempty"`
	TargetCards  []int32 `protobuf:"varint,4,rep,name=targetCards" json:"targetCards,omitempty"`
	Data         []int32 `protobuf:"varint,5,rep,name=data" json:"data,omitempty"`
	TargetSeatId int32   `protobuf:"varint,7,opt,name=targetSeatId" json:"targetSeatId,omitempty"`
}

func (m *SSyncUseSkill) Reset()                    { *m = SSyncUseSkill{} }
func (m *SSyncUseSkill) String() string            { return proto.CompactTextString(m) }
func (*SSyncUseSkill) ProtoMessage()               {}
func (*SSyncUseSkill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *SSyncUseSkill) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SSyncUseSkill) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *SSyncUseSkill) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *SSyncUseSkill) GetTargetCards() []int32 {
	if m != nil {
		return m.TargetCards
	}
	return nil
}

func (m *SSyncUseSkill) GetData() []int32 {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SSyncUseSkill) GetTargetSeatId() int32 {
	if m != nil {
		return m.TargetSeatId
	}
	return 0
}

type SSyncUseSkillEnd struct {
	Seat    int32 `protobuf:"varint,1,opt,name=seat" json:"seat,omitempty"`
	SkillId int32 `protobuf:"varint,2,opt,name=skillId" json:"skillId,omitempty"`
	Card    int32 `protobuf:"varint,3,opt,name=card" json:"card,omitempty"`
}

func (m *SSyncUseSkillEnd) Reset()                    { *m = SSyncUseSkillEnd{} }
func (m *SSyncUseSkillEnd) String() string            { return proto.CompactTextString(m) }
func (*SSyncUseSkillEnd) ProtoMessage()               {}
func (*SSyncUseSkillEnd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *SSyncUseSkillEnd) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SSyncUseSkillEnd) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *SSyncUseSkillEnd) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

// 同步军营变化
type SSyncCamp struct {
	Changes   []*SSyncCamp_Change `protobuf:"bytes,10,rep,name=changes" json:"changes,omitempty"`
	SeatId    int32               `protobuf:"varint,11,opt,name=seatId" json:"seatId,omitempty"`
	SpellCard int32               `protobuf:"varint,20,opt,name=spellCard" json:"spellCard,omitempty"`
}

func (m *SSyncCamp) Reset()                    { *m = SSyncCamp{} }
func (m *SSyncCamp) String() string            { return proto.CompactTextString(m) }
func (*SSyncCamp) ProtoMessage()               {}
func (*SSyncCamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *SSyncCamp) GetChanges() []*SSyncCamp_Change {
	if m != nil {
		return m.Changes
	}
	return nil
}

func (m *SSyncCamp) GetSeatId() int32 {
	if m != nil {
		return m.SeatId
	}
	return 0
}

func (m *SSyncCamp) GetSpellCard() int32 {
	if m != nil {
		return m.SpellCard
	}
	return 0
}

type SSyncCamp_Change struct {
	ChangeType SSyncCamp_ChangeType `protobuf:"varint,1,opt,name=changeType,enum=cmsg.SSyncCamp_ChangeType" json:"changeType,omitempty"`
	Change     int32                `protobuf:"varint,2,opt,name=change" json:"change,omitempty"`
	Old        int32                `protobuf:"varint,3,opt,name=old" json:"old,omitempty"`
	New        int32                `protobuf:"varint,4,opt,name=new" json:"new,omitempty"`
	NewBuffs   []*gamedef.Buff      `protobuf:"bytes,9,rep,name=newBuffs" json:"newBuffs,omitempty"`
}

func (m *SSyncCamp_Change) Reset()                    { *m = SSyncCamp_Change{} }
func (m *SSyncCamp_Change) String() string            { return proto.CompactTextString(m) }
func (*SSyncCamp_Change) ProtoMessage()               {}
func (*SSyncCamp_Change) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24, 0} }

func (m *SSyncCamp_Change) GetChangeType() SSyncCamp_ChangeType {
	if m != nil {
		return m.ChangeType
	}
	return SSyncCamp_None
}

func (m *SSyncCamp_Change) GetChange() int32 {
	if m != nil {
		return m.Change
	}
	return 0
}

func (m *SSyncCamp_Change) GetOld() int32 {
	if m != nil {
		return m.Old
	}
	return 0
}

func (m *SSyncCamp_Change) GetNew() int32 {
	if m != nil {
		return m.New
	}
	return 0
}

func (m *SSyncCamp_Change) GetNewBuffs() []*gamedef.Buff {
	if m != nil {
		return m.NewBuffs
	}
	return nil
}

// 同步手牌变化
type SSyncHandCard struct {
	ChangeTypes SSyncHandCard_ChangeType `protobuf:"varint,1,opt,name=changeTypes,enum=cmsg.SSyncHandCard_ChangeType" json:"changeTypes,omitempty"`
	SeatId      int32                    `protobuf:"varint,2,opt,name=seatId" json:"seatId,omitempty"`
	GetCards    []*gamedef.PoolCard      `protobuf:"bytes,3,rep,name=getCards" json:"getCards,omitempty"`
	LoseCards   []*gamedef.PoolCard      `protobuf:"bytes,4,rep,name=loseCards" json:"loseCards,omitempty"`
	HandCards   []*gamedef.PoolCard      `protobuf:"bytes,5,rep,name=handCards" json:"handCards,omitempty"`
	SpellCard   int32                    `protobuf:"varint,6,opt,name=spellCard" json:"spellCard,omitempty"`
}

func (m *SSyncHandCard) Reset()                    { *m = SSyncHandCard{} }
func (m *SSyncHandCard) String() string            { return proto.CompactTextString(m) }
func (*SSyncHandCard) ProtoMessage()               {}
func (*SSyncHandCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *SSyncHandCard) GetChangeTypes() SSyncHandCard_ChangeType {
	if m != nil {
		return m.ChangeTypes
	}
	return SSyncHandCard_None
}

func (m *SSyncHandCard) GetSeatId() int32 {
	if m != nil {
		return m.SeatId
	}
	return 0
}

func (m *SSyncHandCard) GetGetCards() []*gamedef.PoolCard {
	if m != nil {
		return m.GetCards
	}
	return nil
}

func (m *SSyncHandCard) GetLoseCards() []*gamedef.PoolCard {
	if m != nil {
		return m.LoseCards
	}
	return nil
}

func (m *SSyncHandCard) GetHandCards() []*gamedef.PoolCard {
	if m != nil {
		return m.HandCards
	}
	return nil
}

func (m *SSyncHandCard) GetSpellCard() int32 {
	if m != nil {
		return m.SpellCard
	}
	return 0
}

type SSyncGameBoard struct {
	Seats []*gamedef.GameSeat `protobuf:"bytes,1,rep,name=seats" json:"seats,omitempty"`
}

func (m *SSyncGameBoard) Reset()                    { *m = SSyncGameBoard{} }
func (m *SSyncGameBoard) String() string            { return proto.CompactTextString(m) }
func (*SSyncGameBoard) ProtoMessage()               {}
func (*SSyncGameBoard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *SSyncGameBoard) GetSeats() []*gamedef.GameSeat {
	if m != nil {
		return m.Seats
	}
	return nil
}

type SNoticeGameOver struct {
	WinSeat int32 `protobuf:"varint,1,opt,name=winSeat" json:"winSeat,omitempty"`
}

func (m *SNoticeGameOver) Reset()                    { *m = SNoticeGameOver{} }
func (m *SNoticeGameOver) String() string            { return proto.CompactTextString(m) }
func (*SNoticeGameOver) ProtoMessage()               {}
func (*SNoticeGameOver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *SNoticeGameOver) GetWinSeat() int32 {
	if m != nil {
		return m.WinSeat
	}
	return 0
}

// 取消当前操作
type CReqCancelCurOpt struct {
}

func (m *CReqCancelCurOpt) Reset()                    { *m = CReqCancelCurOpt{} }
func (m *CReqCancelCurOpt) String() string            { return proto.CompactTextString(m) }
func (*CReqCancelCurOpt) ProtoMessage()               {}
func (*CReqCancelCurOpt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type SRespCancelCurOpt struct {
	ErrCode SRespCancelCurOpt_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespCancelCurOpt_ErrCode" json:"errCode,omitempty"`
}

func (m *SRespCancelCurOpt) Reset()                    { *m = SRespCancelCurOpt{} }
func (m *SRespCancelCurOpt) String() string            { return proto.CompactTextString(m) }
func (*SRespCancelCurOpt) ProtoMessage()               {}
func (*SRespCancelCurOpt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *SRespCancelCurOpt) GetErrCode() SRespCancelCurOpt_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespCancelCurOpt_None
}

type CReqGameExit struct {
	ExitType int32 `protobuf:"varint,1,opt,name=exitType" json:"exitType,omitempty"`
}

func (m *CReqGameExit) Reset()                    { *m = CReqGameExit{} }
func (m *CReqGameExit) String() string            { return proto.CompactTextString(m) }
func (*CReqGameExit) ProtoMessage()               {}
func (*CReqGameExit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CReqGameExit) GetExitType() int32 {
	if m != nil {
		return m.ExitType
	}
	return 0
}

type SRespGameExit struct {
	ErrCode  uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ExitType int32  `protobuf:"varint,2,opt,name=exitType" json:"exitType,omitempty"`
}

func (m *SRespGameExit) Reset()                    { *m = SRespGameExit{} }
func (m *SRespGameExit) String() string            { return proto.CompactTextString(m) }
func (*SRespGameExit) ProtoMessage()               {}
func (*SRespGameExit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *SRespGameExit) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *SRespGameExit) GetExitType() int32 {
	if m != nil {
		return m.ExitType
	}
	return 0
}

type SSyncPlayerState struct {
	Seat         int32                       `protobuf:"varint,1,opt,name=seat" json:"seat,omitempty"`
	ConnectState gameconf.UserConnectState   `protobuf:"varint,2,opt,name=connectState,enum=gameconf.UserConnectState" json:"connectState,omitempty"`
	Dead         bool                        `protobuf:"varint,3,opt,name=dead" json:"dead,omitempty"`
	HpChange     *gamedef.Change             `protobuf:"bytes,4,opt,name=hpChange" json:"hpChange,omitempty"`
	ChangeType   SSyncPlayerState_ChangeType `protobuf:"varint,5,opt,name=changeType,enum=cmsg.SSyncPlayerState_ChangeType" json:"changeType,omitempty"`
	New          int32                       `protobuf:"varint,6,opt,name=new" json:"new,omitempty"`
}

func (m *SSyncPlayerState) Reset()                    { *m = SSyncPlayerState{} }
func (m *SSyncPlayerState) String() string            { return proto.CompactTextString(m) }
func (*SSyncPlayerState) ProtoMessage()               {}
func (*SSyncPlayerState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *SSyncPlayerState) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SSyncPlayerState) GetConnectState() gameconf.UserConnectState {
	if m != nil {
		return m.ConnectState
	}
	return gameconf.UserConnectState_USConnect
}

func (m *SSyncPlayerState) GetDead() bool {
	if m != nil {
		return m.Dead
	}
	return false
}

func (m *SSyncPlayerState) GetHpChange() *gamedef.Change {
	if m != nil {
		return m.HpChange
	}
	return nil
}

func (m *SSyncPlayerState) GetChangeType() SSyncPlayerState_ChangeType {
	if m != nil {
		return m.ChangeType
	}
	return SSyncPlayerState_Invalid
}

func (m *SSyncPlayerState) GetNew() int32 {
	if m != nil {
		return m.New
	}
	return 0
}

// ========================================= Game Logic End =======================================================
type CReqGMCommand struct {
	Cmd string `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
}

func (m *CReqGMCommand) Reset()                    { *m = CReqGMCommand{} }
func (m *CReqGMCommand) String() string            { return proto.CompactTextString(m) }
func (*CReqGMCommand) ProtoMessage()               {}
func (*CReqGMCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *CReqGMCommand) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

type SReqGMCommand struct {
	Ret string `protobuf:"bytes,1,opt,name=ret" json:"ret,omitempty"`
}

func (m *SReqGMCommand) Reset()                    { *m = SReqGMCommand{} }
func (m *SReqGMCommand) String() string            { return proto.CompactTextString(m) }
func (*SReqGMCommand) ProtoMessage()               {}
func (*SReqGMCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *SReqGMCommand) GetRet() string {
	if m != nil {
		return m.Ret
	}
	return ""
}

// 跑马灯消息
type ServerNotice struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *ServerNotice) Reset()                    { *m = ServerNotice{} }
func (m *ServerNotice) String() string            { return proto.CompactTextString(m) }
func (*ServerNotice) ProtoMessage()               {}
func (*ServerNotice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *ServerNotice) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 聊天请求
type CReqChat struct {
	Channel      gameconf.ChatChannelTyp `protobuf:"varint,1,opt,name=channel,enum=gameconf.ChatChannelTyp" json:"channel,omitempty"`
	MsgType      gameconf.ChatMsgTyp     `protobuf:"varint,2,opt,name=msgType,enum=gameconf.ChatMsgTyp" json:"msgType,omitempty"`
	Msg          string                  `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
	MsgId        string                  `protobuf:"bytes,4,opt,name=msgId" json:"msgId,omitempty"`
	TargetUserId uint64                  `protobuf:"varint,5,opt,name=targetUserId" json:"targetUserId,omitempty"`
}

func (m *CReqChat) Reset()                    { *m = CReqChat{} }
func (m *CReqChat) String() string            { return proto.CompactTextString(m) }
func (*CReqChat) ProtoMessage()               {}
func (*CReqChat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *CReqChat) GetChannel() gameconf.ChatChannelTyp {
	if m != nil {
		return m.Channel
	}
	return gameconf.ChatChannelTyp_ChatCTInvalid
}

func (m *CReqChat) GetMsgType() gameconf.ChatMsgTyp {
	if m != nil {
		return m.MsgType
	}
	return gameconf.ChatMsgTyp_CMTInvalid
}

func (m *CReqChat) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *CReqChat) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *CReqChat) GetTargetUserId() uint64 {
	if m != nil {
		return m.TargetUserId
	}
	return 0
}

// 聊天请求返回
type SRespChat struct {
	ErrCode      SRespChat_ErrCode       `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespChat_ErrCode" json:"errCode,omitempty"`
	Channel      gameconf.ChatChannelTyp `protobuf:"varint,3,opt,name=channel,enum=gameconf.ChatChannelTyp" json:"channel,omitempty"`
	MsgType      gameconf.ChatMsgTyp     `protobuf:"varint,4,opt,name=msgType,enum=gameconf.ChatMsgTyp" json:"msgType,omitempty"`
	TargetUserId uint64                  `protobuf:"varint,5,opt,name=targetUserId" json:"targetUserId,omitempty"`
}

func (m *SRespChat) Reset()                    { *m = SRespChat{} }
func (m *SRespChat) String() string            { return proto.CompactTextString(m) }
func (*SRespChat) ProtoMessage()               {}
func (*SRespChat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *SRespChat) GetErrCode() SRespChat_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespChat_None
}

func (m *SRespChat) GetChannel() gameconf.ChatChannelTyp {
	if m != nil {
		return m.Channel
	}
	return gameconf.ChatChannelTyp_ChatCTInvalid
}

func (m *SRespChat) GetMsgType() gameconf.ChatMsgTyp {
	if m != nil {
		return m.MsgType
	}
	return gameconf.ChatMsgTyp_CMTInvalid
}

func (m *SRespChat) GetTargetUserId() uint64 {
	if m != nil {
		return m.TargetUserId
	}
	return 0
}

// 聊天消息
type SNoticeChatMsg struct {
	Channel  gameconf.ChatChannelTyp `protobuf:"varint,1,opt,name=channel,enum=gameconf.ChatChannelTyp" json:"channel,omitempty"`
	MsgType  gameconf.ChatMsgTyp     `protobuf:"varint,2,opt,name=msgType,enum=gameconf.ChatMsgTyp" json:"msgType,omitempty"`
	FromUser *gamedef.UserBrief      `protobuf:"bytes,3,opt,name=fromUser" json:"fromUser,omitempty"`
	FromSeat int32                   `protobuf:"varint,4,opt,name=fromSeat" json:"fromSeat,omitempty"`
	Msg      string                  `protobuf:"bytes,10,opt,name=msg" json:"msg,omitempty"`
	MsgId    string                  `protobuf:"bytes,11,opt,name=msgId" json:"msgId,omitempty"`
}

func (m *SNoticeChatMsg) Reset()                    { *m = SNoticeChatMsg{} }
func (m *SNoticeChatMsg) String() string            { return proto.CompactTextString(m) }
func (*SNoticeChatMsg) ProtoMessage()               {}
func (*SNoticeChatMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *SNoticeChatMsg) GetChannel() gameconf.ChatChannelTyp {
	if m != nil {
		return m.Channel
	}
	return gameconf.ChatChannelTyp_ChatCTInvalid
}

func (m *SNoticeChatMsg) GetMsgType() gameconf.ChatMsgTyp {
	if m != nil {
		return m.MsgType
	}
	return gameconf.ChatMsgTyp_CMTInvalid
}

func (m *SNoticeChatMsg) GetFromUser() *gamedef.UserBrief {
	if m != nil {
		return m.FromUser
	}
	return nil
}

func (m *SNoticeChatMsg) GetFromSeat() int32 {
	if m != nil {
		return m.FromSeat
	}
	return 0
}

func (m *SNoticeChatMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SNoticeChatMsg) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

// ===========================房间相关=======================
// 查询我的房间
type CReqMyRoom struct {
}

func (m *CReqMyRoom) Reset()                    { *m = CReqMyRoom{} }
func (m *CReqMyRoom) String() string            { return proto.CompactTextString(m) }
func (*CReqMyRoom) ProtoMessage()               {}
func (*CReqMyRoom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

type SRespMyRoom struct {
	ErrCode SRespMyRoom_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespMyRoom_ErrCode" json:"errCode,omitempty"`
	Room    *gamedef.Room       `protobuf:"bytes,10,opt,name=room" json:"room,omitempty"`
}

func (m *SRespMyRoom) Reset()                    { *m = SRespMyRoom{} }
func (m *SRespMyRoom) String() string            { return proto.CompactTextString(m) }
func (*SRespMyRoom) ProtoMessage()               {}
func (*SRespMyRoom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *SRespMyRoom) GetErrCode() SRespMyRoom_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespMyRoom_None
}

func (m *SRespMyRoom) GetRoom() *gamedef.Room {
	if m != nil {
		return m.Room
	}
	return nil
}

type CReqRoomCreate struct {
	Settting *gamedef.RoomSetting `protobuf:"bytes,1,opt,name=settting" json:"settting,omitempty"`
}

func (m *CReqRoomCreate) Reset()                    { *m = CReqRoomCreate{} }
func (m *CReqRoomCreate) String() string            { return proto.CompactTextString(m) }
func (*CReqRoomCreate) ProtoMessage()               {}
func (*CReqRoomCreate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *CReqRoomCreate) GetSettting() *gamedef.RoomSetting {
	if m != nil {
		return m.Settting
	}
	return nil
}

type SRespRoomCreate struct {
	ErrCode SRespRoomCreate_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespRoomCreate_ErrCode" json:"errCode,omitempty"`
	Room    *gamedef.Room           `protobuf:"bytes,2,opt,name=room" json:"room,omitempty"`
}

func (m *SRespRoomCreate) Reset()                    { *m = SRespRoomCreate{} }
func (m *SRespRoomCreate) String() string            { return proto.CompactTextString(m) }
func (*SRespRoomCreate) ProtoMessage()               {}
func (*SRespRoomCreate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *SRespRoomCreate) GetErrCode() SRespRoomCreate_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespRoomCreate_None
}

func (m *SRespRoomCreate) GetRoom() *gamedef.Room {
	if m != nil {
		return m.Room
	}
	return nil
}

// 请求快速加入房间，如无可用房间，将创建新房间
type CReqRoomQuickJoin struct {
	GameMode gameconf.GameModeTyp `protobuf:"varint,1,opt,name=gameMode,enum=gameconf.GameModeTyp" json:"gameMode,omitempty"`
}

func (m *CReqRoomQuickJoin) Reset()                    { *m = CReqRoomQuickJoin{} }
func (m *CReqRoomQuickJoin) String() string            { return proto.CompactTextString(m) }
func (*CReqRoomQuickJoin) ProtoMessage()               {}
func (*CReqRoomQuickJoin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *CReqRoomQuickJoin) GetGameMode() gameconf.GameModeTyp {
	if m != nil {
		return m.GameMode
	}
	return gameconf.GameModeTyp_MGTInvalid
}

type SRespRoomQuickJoin struct {
	ErrCode SRespRoomQuickJoin_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespRoomQuickJoin_ErrCode" json:"errCode,omitempty"`
	Room    *gamedef.Room              `protobuf:"bytes,2,opt,name=room" json:"room,omitempty"`
}

func (m *SRespRoomQuickJoin) Reset()                    { *m = SRespRoomQuickJoin{} }
func (m *SRespRoomQuickJoin) String() string            { return proto.CompactTextString(m) }
func (*SRespRoomQuickJoin) ProtoMessage()               {}
func (*SRespRoomQuickJoin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *SRespRoomQuickJoin) GetErrCode() SRespRoomQuickJoin_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespRoomQuickJoin_None
}

func (m *SRespRoomQuickJoin) GetRoom() *gamedef.Room {
	if m != nil {
		return m.Room
	}
	return nil
}

// 房间配置更改
type CReqRoomSettingChange struct {
	Setting *gamedef.RoomSetting `protobuf:"bytes,1,opt,name=setting" json:"setting,omitempty"`
}

func (m *CReqRoomSettingChange) Reset()                    { *m = CReqRoomSettingChange{} }
func (m *CReqRoomSettingChange) String() string            { return proto.CompactTextString(m) }
func (*CReqRoomSettingChange) ProtoMessage()               {}
func (*CReqRoomSettingChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *CReqRoomSettingChange) GetSetting() *gamedef.RoomSetting {
	if m != nil {
		return m.Setting
	}
	return nil
}

type SRespRoomSettingChange struct {
	ErrCode SRespRoomSettingChange_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespRoomSettingChange_ErrCode" json:"errCode,omitempty"`
	Setting *gamedef.RoomSetting           `protobuf:"bytes,2,opt,name=setting" json:"setting,omitempty"`
}

func (m *SRespRoomSettingChange) Reset()                    { *m = SRespRoomSettingChange{} }
func (m *SRespRoomSettingChange) String() string            { return proto.CompactTextString(m) }
func (*SRespRoomSettingChange) ProtoMessage()               {}
func (*SRespRoomSettingChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *SRespRoomSettingChange) GetErrCode() SRespRoomSettingChange_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespRoomSettingChange_None
}

func (m *SRespRoomSettingChange) GetSetting() *gamedef.RoomSetting {
	if m != nil {
		return m.Setting
	}
	return nil
}

type CReqRoomJoin struct {
	RoomNO uint32 `protobuf:"varint,1,opt,name=roomNO" json:"roomNO,omitempty"`
}

func (m *CReqRoomJoin) Reset()                    { *m = CReqRoomJoin{} }
func (m *CReqRoomJoin) String() string            { return proto.CompactTextString(m) }
func (*CReqRoomJoin) ProtoMessage()               {}
func (*CReqRoomJoin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *CReqRoomJoin) GetRoomNO() uint32 {
	if m != nil {
		return m.RoomNO
	}
	return 0
}

type SRespRoomJoin struct {
	ErrCode      SRespRoomJoin_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespRoomJoin_ErrCode" json:"errCode,omitempty"`
	RoomNO       uint32                `protobuf:"varint,2,opt,name=roomNO" json:"roomNO,omitempty"`
	IsLooker     bool                  `protobuf:"varint,3,opt,name=isLooker" json:"isLooker,omitempty"`
	RoomIsInGame bool                  `protobuf:"varint,4,opt,name=roomIsInGame" json:"roomIsInGame,omitempty"`
	Room         *gamedef.Room         `protobuf:"bytes,10,opt,name=room" json:"room,omitempty"`
}

func (m *SRespRoomJoin) Reset()                    { *m = SRespRoomJoin{} }
func (m *SRespRoomJoin) String() string            { return proto.CompactTextString(m) }
func (*SRespRoomJoin) ProtoMessage()               {}
func (*SRespRoomJoin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *SRespRoomJoin) GetErrCode() SRespRoomJoin_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespRoomJoin_None
}

func (m *SRespRoomJoin) GetRoomNO() uint32 {
	if m != nil {
		return m.RoomNO
	}
	return 0
}

func (m *SRespRoomJoin) GetIsLooker() bool {
	if m != nil {
		return m.IsLooker
	}
	return false
}

func (m *SRespRoomJoin) GetRoomIsInGame() bool {
	if m != nil {
		return m.RoomIsInGame
	}
	return false
}

func (m *SRespRoomJoin) GetRoom() *gamedef.Room {
	if m != nil {
		return m.Room
	}
	return nil
}

// 站起或坐下
type CReqRoomSeatChange struct {
	TargetSeatId int32 `protobuf:"varint,1,opt,name=targetSeatId" json:"targetSeatId,omitempty"`
}

func (m *CReqRoomSeatChange) Reset()                    { *m = CReqRoomSeatChange{} }
func (m *CReqRoomSeatChange) String() string            { return proto.CompactTextString(m) }
func (*CReqRoomSeatChange) ProtoMessage()               {}
func (*CReqRoomSeatChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *CReqRoomSeatChange) GetTargetSeatId() int32 {
	if m != nil {
		return m.TargetSeatId
	}
	return 0
}

type SRespRoomSeatChange struct {
	ErrCode      SRespRoomSeatChange_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespRoomSeatChange_ErrCode" json:"errCode,omitempty"`
	TargetSeatId int32                       `protobuf:"varint,2,opt,name=targetSeatId" json:"targetSeatId,omitempty"`
	LookerType   gameconf.LookerTyp          `protobuf:"varint,3,opt,name=lookerType,enum=gameconf.LookerTyp" json:"lookerType,omitempty"`
	Room         *gamedef.Room               `protobuf:"bytes,10,opt,name=room" json:"room,omitempty"`
}

func (m *SRespRoomSeatChange) Reset()                    { *m = SRespRoomSeatChange{} }
func (m *SRespRoomSeatChange) String() string            { return proto.CompactTextString(m) }
func (*SRespRoomSeatChange) ProtoMessage()               {}
func (*SRespRoomSeatChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *SRespRoomSeatChange) GetErrCode() SRespRoomSeatChange_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespRoomSeatChange_None
}

func (m *SRespRoomSeatChange) GetTargetSeatId() int32 {
	if m != nil {
		return m.TargetSeatId
	}
	return 0
}

func (m *SRespRoomSeatChange) GetLookerType() gameconf.LookerTyp {
	if m != nil {
		return m.LookerType
	}
	return gameconf.LookerTyp_LTInvalid
}

func (m *SRespRoomSeatChange) GetRoom() *gamedef.Room {
	if m != nil {
		return m.Room
	}
	return nil
}

type CReqRoomLookerInfo struct {
}

func (m *CReqRoomLookerInfo) Reset()                    { *m = CReqRoomLookerInfo{} }
func (m *CReqRoomLookerInfo) String() string            { return proto.CompactTextString(m) }
func (*CReqRoomLookerInfo) ProtoMessage()               {}
func (*CReqRoomLookerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

type SRespRoomLookerInfo struct {
	ErrCode SRespRoomLookerInfo_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespRoomLookerInfo_ErrCode" json:"errCode,omitempty"`
	Lookers []*gamedef.UserBrief        `protobuf:"bytes,2,rep,name=lookers" json:"lookers,omitempty"`
}

func (m *SRespRoomLookerInfo) Reset()                    { *m = SRespRoomLookerInfo{} }
func (m *SRespRoomLookerInfo) String() string            { return proto.CompactTextString(m) }
func (*SRespRoomLookerInfo) ProtoMessage()               {}
func (*SRespRoomLookerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *SRespRoomLookerInfo) GetErrCode() SRespRoomLookerInfo_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespRoomLookerInfo_None
}

func (m *SRespRoomLookerInfo) GetLookers() []*gamedef.UserBrief {
	if m != nil {
		return m.Lookers
	}
	return nil
}

type CReqRoomReady struct {
	Ready bool `protobuf:"varint,1,opt,name=ready" json:"ready,omitempty"`
}

func (m *CReqRoomReady) Reset()                    { *m = CReqRoomReady{} }
func (m *CReqRoomReady) String() string            { return proto.CompactTextString(m) }
func (*CReqRoomReady) ProtoMessage()               {}
func (*CReqRoomReady) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *CReqRoomReady) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

type SRespRoomReady struct {
	ErrCode SRespRoomReady_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespRoomReady_ErrCode" json:"errCode,omitempty"`
	Ready   bool                   `protobuf:"varint,2,opt,name=ready" json:"ready,omitempty"`
}

func (m *SRespRoomReady) Reset()                    { *m = SRespRoomReady{} }
func (m *SRespRoomReady) String() string            { return proto.CompactTextString(m) }
func (*SRespRoomReady) ProtoMessage()               {}
func (*SRespRoomReady) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *SRespRoomReady) GetErrCode() SRespRoomReady_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespRoomReady_None
}

func (m *SRespRoomReady) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

type CReqRoomLeave struct {
}

func (m *CReqRoomLeave) Reset()                    { *m = CReqRoomLeave{} }
func (m *CReqRoomLeave) String() string            { return proto.CompactTextString(m) }
func (*CReqRoomLeave) ProtoMessage()               {}
func (*CReqRoomLeave) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

type SRespRoomLeave struct {
	ErrCode SRespRoomLeave_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespRoomLeave_ErrCode" json:"errCode,omitempty"`
}

func (m *SRespRoomLeave) Reset()                    { *m = SRespRoomLeave{} }
func (m *SRespRoomLeave) String() string            { return proto.CompactTextString(m) }
func (*SRespRoomLeave) ProtoMessage()               {}
func (*SRespRoomLeave) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *SRespRoomLeave) GetErrCode() SRespRoomLeave_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespRoomLeave_None
}

// T出玩家
type CReqRoomKick struct {
	KickAllLooker bool   `protobuf:"varint,1,opt,name=kickAllLooker" json:"kickAllLooker,omitempty"`
	TargetUserId  uint64 `protobuf:"varint,2,opt,name=targetUserId" json:"targetUserId,omitempty"`
}

func (m *CReqRoomKick) Reset()                    { *m = CReqRoomKick{} }
func (m *CReqRoomKick) String() string            { return proto.CompactTextString(m) }
func (*CReqRoomKick) ProtoMessage()               {}
func (*CReqRoomKick) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *CReqRoomKick) GetKickAllLooker() bool {
	if m != nil {
		return m.KickAllLooker
	}
	return false
}

func (m *CReqRoomKick) GetTargetUserId() uint64 {
	if m != nil {
		return m.TargetUserId
	}
	return 0
}

type SRespRoomKick struct {
	ErrCode SRespRoomKick_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespRoomKick_ErrCode" json:"errCode,omitempty"`
}

func (m *SRespRoomKick) Reset()                    { *m = SRespRoomKick{} }
func (m *SRespRoomKick) String() string            { return proto.CompactTextString(m) }
func (*SRespRoomKick) ProtoMessage()               {}
func (*SRespRoomKick) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *SRespRoomKick) GetErrCode() SRespRoomKick_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespRoomKick_None
}

// 通知准备倒计时
type SNoticeRoomTimer struct {
	NoticeType SNoticeRoomTimer_NoticeType `protobuf:"varint,1,opt,name=noticeType,enum=cmsg.SNoticeRoomTimer_NoticeType" json:"noticeType,omitempty"`
	EndTime    int64                       `protobuf:"varint,2,opt,name=endTime" json:"endTime,omitempty"`
}

func (m *SNoticeRoomTimer) Reset()                    { *m = SNoticeRoomTimer{} }
func (m *SNoticeRoomTimer) String() string            { return proto.CompactTextString(m) }
func (*SNoticeRoomTimer) ProtoMessage()               {}
func (*SNoticeRoomTimer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *SNoticeRoomTimer) GetNoticeType() SNoticeRoomTimer_NoticeType {
	if m != nil {
		return m.NoticeType
	}
	return SNoticeRoomTimer_Invalid
}

func (m *SNoticeRoomTimer) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

// 被T出通知
type SNoticeRoomKick struct {
	KickerUserId uint64                  `protobuf:"varint,1,opt,name=kickerUserId" json:"kickerUserId,omitempty"`
	RoomId       uint32                  `protobuf:"varint,2,opt,name=roomId" json:"roomId,omitempty"`
	KickType     SNoticeRoomKick_KickTyp `protobuf:"varint,3,opt,name=kickType,enum=cmsg.SNoticeRoomKick_KickTyp" json:"kickType,omitempty"`
}

func (m *SNoticeRoomKick) Reset()                    { *m = SNoticeRoomKick{} }
func (m *SNoticeRoomKick) String() string            { return proto.CompactTextString(m) }
func (*SNoticeRoomKick) ProtoMessage()               {}
func (*SNoticeRoomKick) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *SNoticeRoomKick) GetKickerUserId() uint64 {
	if m != nil {
		return m.KickerUserId
	}
	return 0
}

func (m *SNoticeRoomKick) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *SNoticeRoomKick) GetKickType() SNoticeRoomKick_KickTyp {
	if m != nil {
		return m.KickType
	}
	return SNoticeRoomKick_Invalid
}

// 更换座位事件（包含变成旁观事件）
type SNoticeRoomChangeSeat struct {
	SeatId     int32              `protobuf:"varint,1,opt,name=seatId" json:"seatId,omitempty"`
	LookerType gameconf.LookerTyp `protobuf:"varint,2,opt,name=lookerType,enum=gameconf.LookerTyp" json:"lookerType,omitempty"`
}

func (m *SNoticeRoomChangeSeat) Reset()                    { *m = SNoticeRoomChangeSeat{} }
func (m *SNoticeRoomChangeSeat) String() string            { return proto.CompactTextString(m) }
func (*SNoticeRoomChangeSeat) ProtoMessage()               {}
func (*SNoticeRoomChangeSeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *SNoticeRoomChangeSeat) GetSeatId() int32 {
	if m != nil {
		return m.SeatId
	}
	return 0
}

func (m *SNoticeRoomChangeSeat) GetLookerType() gameconf.LookerTyp {
	if m != nil {
		return m.LookerType
	}
	return gameconf.LookerTyp_LTInvalid
}

type CReqRoomStartGame struct {
}

func (m *CReqRoomStartGame) Reset()                    { *m = CReqRoomStartGame{} }
func (m *CReqRoomStartGame) String() string            { return proto.CompactTextString(m) }
func (*CReqRoomStartGame) ProtoMessage()               {}
func (*CReqRoomStartGame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

type SRespRoomStartGame struct {
	ErrCode SRespRoomStartGame_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespRoomStartGame_ErrCode" json:"errCode,omitempty"`
}

func (m *SRespRoomStartGame) Reset()                    { *m = SRespRoomStartGame{} }
func (m *SRespRoomStartGame) String() string            { return proto.CompactTextString(m) }
func (*SRespRoomStartGame) ProtoMessage()               {}
func (*SRespRoomStartGame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *SRespRoomStartGame) GetErrCode() SRespRoomStartGame_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespRoomStartGame_None
}

// 房间状态改变通知
type SNotifyRoomChange struct {
	Action       SNotifyRoomChange_Action `protobuf:"varint,1,opt,name=action,enum=cmsg.SNotifyRoomChange_Action" json:"action,omitempty"`
	ActionUserId uint64                   `protobuf:"varint,2,opt,name=actionUserId" json:"actionUserId,omitempty"`
	ActionSeatId int32                    `protobuf:"varint,3,opt,name=actionSeatId" json:"actionSeatId,omitempty"`
	KickerUserId uint64                   `protobuf:"varint,4,opt,name=kickerUserId" json:"kickerUserId,omitempty"`
	Room         *gamedef.Room            `protobuf:"bytes,10,opt,name=room" json:"room,omitempty"`
}

func (m *SNotifyRoomChange) Reset()                    { *m = SNotifyRoomChange{} }
func (m *SNotifyRoomChange) String() string            { return proto.CompactTextString(m) }
func (*SNotifyRoomChange) ProtoMessage()               {}
func (*SNotifyRoomChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *SNotifyRoomChange) GetAction() SNotifyRoomChange_Action {
	if m != nil {
		return m.Action
	}
	return SNotifyRoomChange_Invalid
}

func (m *SNotifyRoomChange) GetActionUserId() uint64 {
	if m != nil {
		return m.ActionUserId
	}
	return 0
}

func (m *SNotifyRoomChange) GetActionSeatId() int32 {
	if m != nil {
		return m.ActionSeatId
	}
	return 0
}

func (m *SNotifyRoomChange) GetKickerUserId() uint64 {
	if m != nil {
		return m.KickerUserId
	}
	return 0
}

func (m *SNotifyRoomChange) GetRoom() *gamedef.Room {
	if m != nil {
		return m.Room
	}
	return nil
}

// 房间事件通知
type SNoticeRoomEvent struct {
	Event      SNoticeRoomEvent_Event `protobuf:"varint,1,opt,name=event,enum=cmsg.SNoticeRoomEvent_Event" json:"event,omitempty"`
	ActionUser *gamedef.UserBrief     `protobuf:"bytes,2,opt,name=actionUser" json:"actionUser,omitempty"`
}

func (m *SNoticeRoomEvent) Reset()                    { *m = SNoticeRoomEvent{} }
func (m *SNoticeRoomEvent) String() string            { return proto.CompactTextString(m) }
func (*SNoticeRoomEvent) ProtoMessage()               {}
func (*SNoticeRoomEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *SNoticeRoomEvent) GetEvent() SNoticeRoomEvent_Event {
	if m != nil {
		return m.Event
	}
	return SNoticeRoomEvent_Invalid
}

func (m *SNoticeRoomEvent) GetActionUser() *gamedef.UserBrief {
	if m != nil {
		return m.ActionUser
	}
	return nil
}

// 同步旁观者数量
type SSyncLookerCount struct {
	Count int32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *SSyncLookerCount) Reset()                    { *m = SSyncLookerCount{} }
func (m *SSyncLookerCount) String() string            { return proto.CompactTextString(m) }
func (*SSyncLookerCount) ProtoMessage()               {}
func (*SSyncLookerCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *SSyncLookerCount) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SNoticeDebugInfo struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *SNoticeDebugInfo) Reset()                    { *m = SNoticeDebugInfo{} }
func (m *SNoticeDebugInfo) String() string            { return proto.CompactTextString(m) }
func (*SNoticeDebugInfo) ProtoMessage()               {}
func (*SNoticeDebugInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *SNoticeDebugInfo) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type SNoticeLogout struct {
	Reason gameconf.KickUserOutReason `protobuf:"varint,1,opt,name=reason,enum=gameconf.KickUserOutReason" json:"reason,omitempty"`
	Msg    string                     `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Data   []int64                    `protobuf:"varint,3,rep,name=data" json:"data,omitempty"`
}

func (m *SNoticeLogout) Reset()                    { *m = SNoticeLogout{} }
func (m *SNoticeLogout) String() string            { return proto.CompactTextString(m) }
func (*SNoticeLogout) ProtoMessage()               {}
func (*SNoticeLogout) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *SNoticeLogout) GetReason() gameconf.KickUserOutReason {
	if m != nil {
		return m.Reason
	}
	return gameconf.KickUserOutReason_KUOInvalid
}

func (m *SNoticeLogout) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SNoticeLogout) GetData() []int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

// 同步时间
type SSyncServerTime struct {
	ServerTime int64 `protobuf:"varint,1,opt,name=serverTime" json:"serverTime,omitempty"`
}

func (m *SSyncServerTime) Reset()                    { *m = SSyncServerTime{} }
func (m *SSyncServerTime) String() string            { return proto.CompactTextString(m) }
func (*SSyncServerTime) ProtoMessage()               {}
func (*SSyncServerTime) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *SSyncServerTime) GetServerTime() int64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

// 通用返回错误
type SRespCommonError struct {
	ErrCode SRespCommonError_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespCommonError_ErrCode" json:"errCode,omitempty"`
}

func (m *SRespCommonError) Reset()                    { *m = SRespCommonError{} }
func (m *SRespCommonError) String() string            { return proto.CompactTextString(m) }
func (*SRespCommonError) ProtoMessage()               {}
func (*SRespCommonError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *SRespCommonError) GetErrCode() SRespCommonError_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespCommonError_None
}

// 匹配
type CReqMatch struct {
	Mode CReqMatch_ModeID `protobuf:"varint,1,opt,name=mode,enum=cmsg.CReqMatch_ModeID" json:"mode,omitempty"`
}

func (m *CReqMatch) Reset()                    { *m = CReqMatch{} }
func (m *CReqMatch) String() string            { return proto.CompactTextString(m) }
func (*CReqMatch) ProtoMessage()               {}
func (*CReqMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *CReqMatch) GetMode() CReqMatch_ModeID {
	if m != nil {
		return m.Mode
	}
	return CReqMatch_ModeNone
}

type SRespMatch struct {
	ErrCode SRespMatch_ErrCode `protobuf:"varint,1,opt,name=errCode,enum=cmsg.SRespMatch_ErrCode" json:"errCode,omitempty"`
	Model   int32              `protobuf:"varint,2,opt,name=model" json:"model,omitempty"`
}

func (m *SRespMatch) Reset()                    { *m = SRespMatch{} }
func (m *SRespMatch) String() string            { return proto.CompactTextString(m) }
func (*SRespMatch) ProtoMessage()               {}
func (*SRespMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *SRespMatch) GetErrCode() SRespMatch_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespMatch_None
}

func (m *SRespMatch) GetModel() int32 {
	if m != nil {
		return m.Model
	}
	return 0
}

// 匹配完成通知
type SNoticeMatchResult struct {
	Model      int32                         `protobuf:"varint,2,opt,name=model" json:"model,omitempty"`
	NoticeType SNoticeMatchResult_NoticeType `protobuf:"varint,3,opt,name=noticeType,enum=cmsg.SNoticeMatchResult_NoticeType" json:"noticeType,omitempty"`
	Players    []*gamedef.UserBrief          `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`
	Room       *gamedef.Room                 `protobuf:"bytes,6,opt,name=room" json:"room,omitempty"`
}

func (m *SNoticeMatchResult) Reset()                    { *m = SNoticeMatchResult{} }
func (m *SNoticeMatchResult) String() string            { return proto.CompactTextString(m) }
func (*SNoticeMatchResult) ProtoMessage()               {}
func (*SNoticeMatchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *SNoticeMatchResult) GetModel() int32 {
	if m != nil {
		return m.Model
	}
	return 0
}

func (m *SNoticeMatchResult) GetNoticeType() SNoticeMatchResult_NoticeType {
	if m != nil {
		return m.NoticeType
	}
	return SNoticeMatchResult_Invalid
}

func (m *SNoticeMatchResult) GetPlayers() []*gamedef.UserBrief {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *SNoticeMatchResult) GetRoom() *gamedef.Room {
	if m != nil {
		return m.Room
	}
	return nil
}

// 取消匹配
type CCancelMatch struct {
}

func (m *CCancelMatch) Reset()                    { *m = CCancelMatch{} }
func (m *CCancelMatch) String() string            { return proto.CompactTextString(m) }
func (*CCancelMatch) ProtoMessage()               {}
func (*CCancelMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

type SRespCancelMatch struct {
	ErrCode SRespCancelMatch_ErrCode `protobuf:"varint,2,opt,name=errCode,enum=cmsg.SRespCancelMatch_ErrCode" json:"errCode,omitempty"`
}

func (m *SRespCancelMatch) Reset()                    { *m = SRespCancelMatch{} }
func (m *SRespCancelMatch) String() string            { return proto.CompactTextString(m) }
func (*SRespCancelMatch) ProtoMessage()               {}
func (*SRespCancelMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *SRespCancelMatch) GetErrCode() SRespCancelMatch_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespCancelMatch_None
}

type CCardGroupOpt struct {
	OptType    CCardGroupOpt_OptType `protobuf:"varint,1,opt,name=optType,enum=cmsg.CCardGroupOpt_OptType" json:"optType,omitempty"`
	CardsGroup *gamedef.CardGroup    `protobuf:"bytes,2,opt,name=cardsGroup" json:"cardsGroup,omitempty"`
}

func (m *CCardGroupOpt) Reset()                    { *m = CCardGroupOpt{} }
func (m *CCardGroupOpt) String() string            { return proto.CompactTextString(m) }
func (*CCardGroupOpt) ProtoMessage()               {}
func (*CCardGroupOpt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *CCardGroupOpt) GetOptType() CCardGroupOpt_OptType {
	if m != nil {
		return m.OptType
	}
	return CCardGroupOpt_OptNone
}

func (m *CCardGroupOpt) GetCardsGroup() *gamedef.CardGroup {
	if m != nil {
		return m.CardsGroup
	}
	return nil
}

type SRespCardGroupOpt struct {
	ErrCode SRespCardGroupOpt_ErrCode     `protobuf:"varint,2,opt,name=errCode,enum=cmsg.SRespCardGroupOpt_ErrCode" json:"errCode,omitempty"`
	SCode   SRespCardGroupOpt_SuccessCode `protobuf:"varint,3,opt,name=sCode,enum=cmsg.SRespCardGroupOpt_SuccessCode" json:"sCode,omitempty"`
}

func (m *SRespCardGroupOpt) Reset()                    { *m = SRespCardGroupOpt{} }
func (m *SRespCardGroupOpt) String() string            { return proto.CompactTextString(m) }
func (*SRespCardGroupOpt) ProtoMessage()               {}
func (*SRespCardGroupOpt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *SRespCardGroupOpt) GetErrCode() SRespCardGroupOpt_ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return SRespCardGroupOpt_ErrNone
}

func (m *SRespCardGroupOpt) GetSCode() SRespCardGroupOpt_SuccessCode {
	if m != nil {
		return m.SCode
	}
	return SRespCardGroupOpt_SuccessNone
}

type CReqCardGroups struct {
}

func (m *CReqCardGroups) Reset()                    { *m = CReqCardGroups{} }
func (m *CReqCardGroups) String() string            { return proto.CompactTextString(m) }
func (*CReqCardGroups) ProtoMessage()               {}
func (*CReqCardGroups) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

type SRespCardGroups struct {
	NowUseId   int32                `protobuf:"varint,1,opt,name=nowUseId" json:"nowUseId,omitempty"`
	CardGroups []*gamedef.CardGroup `protobuf:"bytes,2,rep,name=cardGroups" json:"cardGroups,omitempty"`
}

func (m *SRespCardGroups) Reset()                    { *m = SRespCardGroups{} }
func (m *SRespCardGroups) String() string            { return proto.CompactTextString(m) }
func (*SRespCardGroups) ProtoMessage()               {}
func (*SRespCardGroups) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *SRespCardGroups) GetNowUseId() int32 {
	if m != nil {
		return m.NowUseId
	}
	return 0
}

func (m *SRespCardGroups) GetCardGroups() []*gamedef.CardGroup {
	if m != nil {
		return m.CardGroups
	}
	return nil
}

func init() {
	proto.RegisterType((*CReqPing)(nil), "cmsg.CReqPing")
	proto.RegisterType((*SRespPing)(nil), "cmsg.SRespPing")
	proto.RegisterType((*CReqLogin)(nil), "cmsg.CReqLogin")
	proto.RegisterType((*SRespLogin)(nil), "cmsg.SRespLogin")
	proto.RegisterType((*SSyncUserBrief)(nil), "cmsg.SSyncUserBrief")
	proto.RegisterType((*CReqMyData)(nil), "cmsg.CReqMyData")
	proto.RegisterType((*SRespMyData)(nil), "cmsg.SRespMyData")
	proto.RegisterType((*SNoticeGameReady)(nil), "cmsg.SNoticeGameReady")
	proto.RegisterType((*SNoticeGameReady_Seat)(nil), "cmsg.SNoticeGameReady.Seat")
	proto.RegisterType((*CReqGameScene)(nil), "cmsg.CReqGameScene")
	proto.RegisterType((*SRespGameScene)(nil), "cmsg.SRespGameScene")
	proto.RegisterType((*SRespGameScene_Seat)(nil), "cmsg.SRespGameScene.Seat")
	proto.RegisterType((*CReqSceneReady)(nil), "cmsg.CReqSceneReady")
	proto.RegisterType((*SRespSceneReady)(nil), "cmsg.SRespSceneReady")
	proto.RegisterType((*SNoticeGameStart)(nil), "cmsg.SNoticeGameStart")
	proto.RegisterType((*SNoticeEnterPhase)(nil), "cmsg.SNoticeEnterPhase")
	proto.RegisterType((*SNoticeDrawCard)(nil), "cmsg.SNoticeDrawCard")
	proto.RegisterType((*SNoticeOp)(nil), "cmsg.SNoticeOp")
	proto.RegisterType((*SNoticeOp_Data)(nil), "cmsg.SNoticeOp.Data")
	proto.RegisterType((*CReqOpt)(nil), "cmsg.CReqOpt")
	proto.RegisterType((*SRespOpt)(nil), "cmsg.SRespOpt")
	proto.RegisterType((*CReqAct)(nil), "cmsg.CReqAct")
	proto.RegisterType((*SRespAct)(nil), "cmsg.SRespAct")
	proto.RegisterType((*SSyncAct)(nil), "cmsg.SSyncAct")
	proto.RegisterType((*SSyncCard)(nil), "cmsg.SSyncCard")
	proto.RegisterType((*SSyncCard_Change)(nil), "cmsg.SSyncCard.Change")
	proto.RegisterType((*SSyncUseSkill)(nil), "cmsg.SSyncUseSkill")
	proto.RegisterType((*SSyncUseSkillEnd)(nil), "cmsg.SSyncUseSkillEnd")
	proto.RegisterType((*SSyncCamp)(nil), "cmsg.SSyncCamp")
	proto.RegisterType((*SSyncCamp_Change)(nil), "cmsg.SSyncCamp.Change")
	proto.RegisterType((*SSyncHandCard)(nil), "cmsg.SSyncHandCard")
	proto.RegisterType((*SSyncGameBoard)(nil), "cmsg.SSyncGameBoard")
	proto.RegisterType((*SNoticeGameOver)(nil), "cmsg.SNoticeGameOver")
	proto.RegisterType((*CReqCancelCurOpt)(nil), "cmsg.CReqCancelCurOpt")
	proto.RegisterType((*SRespCancelCurOpt)(nil), "cmsg.SRespCancelCurOpt")
	proto.RegisterType((*CReqGameExit)(nil), "cmsg.CReqGameExit")
	proto.RegisterType((*SRespGameExit)(nil), "cmsg.SRespGameExit")
	proto.RegisterType((*SSyncPlayerState)(nil), "cmsg.SSyncPlayerState")
	proto.RegisterType((*CReqGMCommand)(nil), "cmsg.CReqGMCommand")
	proto.RegisterType((*SReqGMCommand)(nil), "cmsg.SReqGMCommand")
	proto.RegisterType((*ServerNotice)(nil), "cmsg.ServerNotice")
	proto.RegisterType((*CReqChat)(nil), "cmsg.CReqChat")
	proto.RegisterType((*SRespChat)(nil), "cmsg.SRespChat")
	proto.RegisterType((*SNoticeChatMsg)(nil), "cmsg.SNoticeChatMsg")
	proto.RegisterType((*CReqMyRoom)(nil), "cmsg.CReqMyRoom")
	proto.RegisterType((*SRespMyRoom)(nil), "cmsg.SRespMyRoom")
	proto.RegisterType((*CReqRoomCreate)(nil), "cmsg.CReqRoomCreate")
	proto.RegisterType((*SRespRoomCreate)(nil), "cmsg.SRespRoomCreate")
	proto.RegisterType((*CReqRoomQuickJoin)(nil), "cmsg.CReqRoomQuickJoin")
	proto.RegisterType((*SRespRoomQuickJoin)(nil), "cmsg.SRespRoomQuickJoin")
	proto.RegisterType((*CReqRoomSettingChange)(nil), "cmsg.CReqRoomSettingChange")
	proto.RegisterType((*SRespRoomSettingChange)(nil), "cmsg.SRespRoomSettingChange")
	proto.RegisterType((*CReqRoomJoin)(nil), "cmsg.CReqRoomJoin")
	proto.RegisterType((*SRespRoomJoin)(nil), "cmsg.SRespRoomJoin")
	proto.RegisterType((*CReqRoomSeatChange)(nil), "cmsg.CReqRoomSeatChange")
	proto.RegisterType((*SRespRoomSeatChange)(nil), "cmsg.SRespRoomSeatChange")
	proto.RegisterType((*CReqRoomLookerInfo)(nil), "cmsg.CReqRoomLookerInfo")
	proto.RegisterType((*SRespRoomLookerInfo)(nil), "cmsg.SRespRoomLookerInfo")
	proto.RegisterType((*CReqRoomReady)(nil), "cmsg.CReqRoomReady")
	proto.RegisterType((*SRespRoomReady)(nil), "cmsg.SRespRoomReady")
	proto.RegisterType((*CReqRoomLeave)(nil), "cmsg.CReqRoomLeave")
	proto.RegisterType((*SRespRoomLeave)(nil), "cmsg.SRespRoomLeave")
	proto.RegisterType((*CReqRoomKick)(nil), "cmsg.CReqRoomKick")
	proto.RegisterType((*SRespRoomKick)(nil), "cmsg.SRespRoomKick")
	proto.RegisterType((*SNoticeRoomTimer)(nil), "cmsg.SNoticeRoomTimer")
	proto.RegisterType((*SNoticeRoomKick)(nil), "cmsg.SNoticeRoomKick")
	proto.RegisterType((*SNoticeRoomChangeSeat)(nil), "cmsg.SNoticeRoomChangeSeat")
	proto.RegisterType((*CReqRoomStartGame)(nil), "cmsg.CReqRoomStartGame")
	proto.RegisterType((*SRespRoomStartGame)(nil), "cmsg.SRespRoomStartGame")
	proto.RegisterType((*SNotifyRoomChange)(nil), "cmsg.SNotifyRoomChange")
	proto.RegisterType((*SNoticeRoomEvent)(nil), "cmsg.SNoticeRoomEvent")
	proto.RegisterType((*SSyncLookerCount)(nil), "cmsg.SSyncLookerCount")
	proto.RegisterType((*SNoticeDebugInfo)(nil), "cmsg.SNoticeDebugInfo")
	proto.RegisterType((*SNoticeLogout)(nil), "cmsg.SNoticeLogout")
	proto.RegisterType((*SSyncServerTime)(nil), "cmsg.SSyncServerTime")
	proto.RegisterType((*SRespCommonError)(nil), "cmsg.SRespCommonError")
	proto.RegisterType((*CReqMatch)(nil), "cmsg.CReqMatch")
	proto.RegisterType((*SRespMatch)(nil), "cmsg.SRespMatch")
	proto.RegisterType((*SNoticeMatchResult)(nil), "cmsg.SNoticeMatchResult")
	proto.RegisterType((*CCancelMatch)(nil), "cmsg.CCancelMatch")
	proto.RegisterType((*SRespCancelMatch)(nil), "cmsg.SRespCancelMatch")
	proto.RegisterType((*CCardGroupOpt)(nil), "cmsg.CCardGroupOpt")
	proto.RegisterType((*SRespCardGroupOpt)(nil), "cmsg.SRespCardGroupOpt")
	proto.RegisterType((*CReqCardGroups)(nil), "cmsg.CReqCardGroups")
	proto.RegisterType((*SRespCardGroups)(nil), "cmsg.SRespCardGroups")
	proto.RegisterEnum("cmsg.SRespLogin_ErrCode", SRespLogin_ErrCode_name, SRespLogin_ErrCode_value)
	proto.RegisterEnum("cmsg.SRespMyData_ErrCode", SRespMyData_ErrCode_name, SRespMyData_ErrCode_value)
	proto.RegisterEnum("cmsg.SRespGameScene_ErrCode", SRespGameScene_ErrCode_name, SRespGameScene_ErrCode_value)
	proto.RegisterEnum("cmsg.SRespSceneReady_ErrCode", SRespSceneReady_ErrCode_name, SRespSceneReady_ErrCode_value)
	proto.RegisterEnum("cmsg.SNoticeOp_OpType", SNoticeOp_OpType_name, SNoticeOp_OpType_value)
	proto.RegisterEnum("cmsg.CReqOpt_OpType", CReqOpt_OpType_name, CReqOpt_OpType_value)
	proto.RegisterEnum("cmsg.SRespOpt_ErrCode", SRespOpt_ErrCode_name, SRespOpt_ErrCode_value)
	proto.RegisterEnum("cmsg.SRespAct_ErrCode", SRespAct_ErrCode_name, SRespAct_ErrCode_value)
	proto.RegisterEnum("cmsg.SSyncCard_ChangeType", SSyncCard_ChangeType_name, SSyncCard_ChangeType_value)
	proto.RegisterEnum("cmsg.SSyncCamp_ChangeType", SSyncCamp_ChangeType_name, SSyncCamp_ChangeType_value)
	proto.RegisterEnum("cmsg.SSyncHandCard_ChangeType", SSyncHandCard_ChangeType_name, SSyncHandCard_ChangeType_value)
	proto.RegisterEnum("cmsg.SRespCancelCurOpt_ErrCode", SRespCancelCurOpt_ErrCode_name, SRespCancelCurOpt_ErrCode_value)
	proto.RegisterEnum("cmsg.SSyncPlayerState_ChangeType", SSyncPlayerState_ChangeType_name, SSyncPlayerState_ChangeType_value)
	proto.RegisterEnum("cmsg.SRespChat_ErrCode", SRespChat_ErrCode_name, SRespChat_ErrCode_value)
	proto.RegisterEnum("cmsg.SRespMyRoom_ErrCode", SRespMyRoom_ErrCode_name, SRespMyRoom_ErrCode_value)
	proto.RegisterEnum("cmsg.SRespRoomCreate_ErrCode", SRespRoomCreate_ErrCode_name, SRespRoomCreate_ErrCode_value)
	proto.RegisterEnum("cmsg.SRespRoomQuickJoin_ErrCode", SRespRoomQuickJoin_ErrCode_name, SRespRoomQuickJoin_ErrCode_value)
	proto.RegisterEnum("cmsg.SRespRoomSettingChange_ErrCode", SRespRoomSettingChange_ErrCode_name, SRespRoomSettingChange_ErrCode_value)
	proto.RegisterEnum("cmsg.SRespRoomJoin_ErrCode", SRespRoomJoin_ErrCode_name, SRespRoomJoin_ErrCode_value)
	proto.RegisterEnum("cmsg.SRespRoomSeatChange_ErrCode", SRespRoomSeatChange_ErrCode_name, SRespRoomSeatChange_ErrCode_value)
	proto.RegisterEnum("cmsg.SRespRoomLookerInfo_ErrCode", SRespRoomLookerInfo_ErrCode_name, SRespRoomLookerInfo_ErrCode_value)
	proto.RegisterEnum("cmsg.SRespRoomReady_ErrCode", SRespRoomReady_ErrCode_name, SRespRoomReady_ErrCode_value)
	proto.RegisterEnum("cmsg.SRespRoomLeave_ErrCode", SRespRoomLeave_ErrCode_name, SRespRoomLeave_ErrCode_value)
	proto.RegisterEnum("cmsg.SRespRoomKick_ErrCode", SRespRoomKick_ErrCode_name, SRespRoomKick_ErrCode_value)
	proto.RegisterEnum("cmsg.SNoticeRoomTimer_NoticeType", SNoticeRoomTimer_NoticeType_name, SNoticeRoomTimer_NoticeType_value)
	proto.RegisterEnum("cmsg.SNoticeRoomKick_KickTyp", SNoticeRoomKick_KickTyp_name, SNoticeRoomKick_KickTyp_value)
	proto.RegisterEnum("cmsg.SRespRoomStartGame_ErrCode", SRespRoomStartGame_ErrCode_name, SRespRoomStartGame_ErrCode_value)
	proto.RegisterEnum("cmsg.SNotifyRoomChange_Action", SNotifyRoomChange_Action_name, SNotifyRoomChange_Action_value)
	proto.RegisterEnum("cmsg.SNoticeRoomEvent_Event", SNoticeRoomEvent_Event_name, SNoticeRoomEvent_Event_value)
	proto.RegisterEnum("cmsg.SRespCommonError_ErrCode", SRespCommonError_ErrCode_name, SRespCommonError_ErrCode_value)
	proto.RegisterEnum("cmsg.CReqMatch_ModeID", CReqMatch_ModeID_name, CReqMatch_ModeID_value)
	proto.RegisterEnum("cmsg.SRespMatch_ErrCode", SRespMatch_ErrCode_name, SRespMatch_ErrCode_value)
	proto.RegisterEnum("cmsg.SNoticeMatchResult_NoticeType", SNoticeMatchResult_NoticeType_name, SNoticeMatchResult_NoticeType_value)
	proto.RegisterEnum("cmsg.SRespCancelMatch_ErrCode", SRespCancelMatch_ErrCode_name, SRespCancelMatch_ErrCode_value)
	proto.RegisterEnum("cmsg.CCardGroupOpt_OptType", CCardGroupOpt_OptType_name, CCardGroupOpt_OptType_value)
	proto.RegisterEnum("cmsg.SRespCardGroupOpt_ErrCode", SRespCardGroupOpt_ErrCode_name, SRespCardGroupOpt_ErrCode_value)
	proto.RegisterEnum("cmsg.SRespCardGroupOpt_SuccessCode", SRespCardGroupOpt_SuccessCode_name, SRespCardGroupOpt_SuccessCode_value)
}

func init() { proto.RegisterFile("cmsg/client_msg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 4424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5b, 0xcd, 0x8f, 0x1c, 0x49,
	0x56, 0x9f, 0xcc, 0xfa, 0x7e, 0xd5, 0x1f, 0xe9, 0x70, 0x77, 0xbb, 0xa6, 0xc7, 0x63, 0xda, 0xb1,
	0xb3, 0xd0, 0xcc, 0x0c, 0xed, 0x99, 0xb6, 0xec, 0x59, 0x0f, 0x62, 0xa0, 0x5d, 0xee, 0xb6, 0x9b,
	0xe9, 0x2f, 0xb2, 0xda, 0xb3, 0xdc, 0x86, 0x74, 0x55, 0x74, 0x75, 0xca, 0x55, 0x99, 0x45, 0x66,
	0x96, 0xdb, 0xbd, 0x17, 0x90, 0xf8, 0x58, 0xb4, 0x9c, 0xb8, 0x20, 0x71, 0x40, 0x5a, 0x71, 0x43,
	0xc0, 0x01, 0x56, 0x08, 0x2d, 0x07, 0x24, 0xb8, 0x82, 0x16, 0x2e, 0x2b, 0x24, 0xfe, 0x01, 0xf6,
	0xc4, 0x05, 0x4e, 0x9c, 0xd0, 0x7b, 0x11, 0x19, 0x19, 0x99, 0x55, 0xd5, 0x2e, 0x37, 0x88, 0x83,
	0xad, 0x8a, 0x88, 0x5f, 0x46, 0xbc, 0x78, 0xdf, 0xf1, 0x22, 0x1a, 0x56, 0xbb, 0xc3, 0xb8, 0x7f,
	0xaf, 0x3b, 0xf0, 0x45, 0x90, 0x7c, 0x3d, 0x8c, 0xfb, 0x5b, 0xa3, 0x28, 0x4c, 0x42, 0x56, 0xc6,
	0xee, 0xf5, 0x87, 0xb1, 0x17, 0xf4, 0xc7, 0x61, 0x7c, 0xee, 0x6d, 0x75, 0xc3, 0xe1, 0xbd, 0xb8,
	0x1f, 0x7f, 0x7d, 0x2e, 0xa2, 0xf0, 0xf5, 0x3d, 0x02, 0xdd, 0xeb, 0x7b, 0x43, 0xd1, 0x0d, 0x83,
	0x33, 0xfa, 0xf1, 0x75, 0x72, 0x39, 0x12, 0xf2, 0xeb, 0xf5, 0x8f, 0xae, 0xfe, 0xae, 0x27, 0xce,
	0xf0, 0x9f, 0x04, 0xf3, 0x2f, 0xa0, 0xde, 0x76, 0xc5, 0xaf, 0x9f, 0xf8, 0x41, 0x9f, 0xb5, 0xa0,
	0x96, 0xf8, 0x43, 0x71, 0xea, 0xf5, 0x5b, 0xd6, 0x86, 0xb5, 0x59, 0x72, 0xd3, 0x26, 0x8e, 0xc4,
	0xaf, 0xa2, 0xd3, 0xcb, 0x91, 0x68, 0xd9, 0x1b, 0xd6, 0x66, 0xc5, 0x4d, 0x9b, 0xfc, 0x17, 0xa1,
	0xd1, 0x71, 0x45, 0x3c, 0xba, 0xf6, 0x04, 0xaf, 0xa0, 0x81, 0x04, 0x1c, 0x84, 0x7d, 0x3f, 0x60,
	0x6b, 0x50, 0x4d, 0xfc, 0xee, 0x4b, 0x91, 0xd0, 0xf7, 0x0d, 0x57, 0xb5, 0xd8, 0x67, 0xd0, 0x18,
	0x20, 0x40, 0x4f, 0xb0, 0xb4, 0xfd, 0xee, 0x56, 0xca, 0x80, 0xad, 0x9d, 0x6e, 0x37, 0x1c, 0x07,
	0xc9, 0x81, 0x42, 0xb8, 0x19, 0x16, 0xd7, 0x7d, 0x25, 0xa2, 0xd8, 0x0f, 0x83, 0x56, 0x89, 0x66,
	0x4c, 0x9b, 0xfc, 0x4f, 0xcb, 0x00, 0x44, 0xb9, 0x5c, 0x79, 0x1b, 0x6a, 0x22, 0x8a, 0xda, 0x61,
	0x4f, 0xd0, 0xd2, 0x4b, 0xdb, 0xad, 0x2d, 0x14, 0xc2, 0x56, 0x06, 0xd9, 0xda, 0x95, 0xe3, 0x6e,
	0x0a, 0x64, 0xb7, 0xe9, 0x9b, 0x27, 0x5e, 0xe2, 0xb5, 0xec, 0x8d, 0xd2, 0x66, 0xe9, 0xb1, 0xed,
	0xbc, 0xe3, 0xa6, 0x5d, 0xb8, 0x97, 0x71, 0x2c, 0xa2, 0xfd, 0x1e, 0xad, 0x5c, 0x76, 0x55, 0x0b,
	0x49, 0xf2, 0x24, 0xc1, 0xad, 0xb2, 0x24, 0x49, 0x35, 0xd9, 0x27, 0xd0, 0x40, 0xcc, 0xe3, 0xc8,
	0x17, 0x67, 0x2d, 0xd8, 0xb0, 0x36, 0x9b, 0xdb, 0x8c, 0x76, 0x89, 0xe2, 0x7a, 0x9e, 0x8e, 0xb8,
	0x19, 0x88, 0xdd, 0x01, 0x88, 0x45, 0xf4, 0x4a, 0x44, 0xa7, 0xfe, 0x50, 0xb4, 0x9a, 0xc4, 0x73,
	0xa3, 0x87, 0xad, 0x43, 0xdd, 0x8f, 0xf7, 0x83, 0xa7, 0xde, 0x50, 0xb4, 0x56, 0x36, 0xac, 0xcd,
	0xba, 0xab, 0xdb, 0xec, 0x3e, 0x34, 0x24, 0xb2, 0x7d, 0xd6, 0x6f, 0xad, 0xd2, 0x6a, 0xab, 0x7a,
	0xb5, 0x8e, 0x1c, 0x09, 0x83, 0x33, 0xbf, 0xef, 0x66, 0x38, 0xfe, 0x9f, 0x16, 0xd4, 0x14, 0x1f,
	0x58, 0x1d, 0xca, 0x9d, 0x71, 0xb7, 0xeb, 0xbc, 0xc3, 0x16, 0xa1, 0xb1, 0x1b, 0x45, 0x9d, 0xcb,
	0x38, 0x11, 0x43, 0xc7, 0x62, 0x2b, 0xe0, 0xec, 0x46, 0xd1, 0x29, 0x89, 0x6e, 0x3f, 0x78, 0xe5,
	0x0d, 0xfc, 0x9e, 0x63, 0xab, 0xde, 0xbd, 0x30, 0xea, 0x0a, 0x57, 0x78, 0x83, 0x23, 0x6f, 0x28,
	0x9c, 0x12, 0xbb, 0x05, 0x37, 0x77, 0xa3, 0x68, 0xf7, 0x75, 0x12, 0x79, 0xfb, 0xc1, 0x59, 0x98,
	0xc2, 0xcb, 0xec, 0x06, 0x2c, 0xee, 0x46, 0x91, 0x12, 0xed, 0x63, 0x2f, 0x70, 0x2a, 0x6c, 0x1d,
	0xd6, 0x70, 0xed, 0x48, 0x78, 0x89, 0x50, 0x03, 0x7b, 0x9e, 0x3f, 0x10, 0x3d, 0xa7, 0xca, 0x5a,
	0xb0, 0xb2, 0x1b, 0x45, 0x07, 0xa1, 0xd7, 0xcb, 0x8f, 0xd4, 0xd8, 0x2a, 0xdc, 0xd8, 0x8d, 0xa2,
	0xa3, 0x30, 0xd9, 0x0f, 0xbe, 0x7d, 0xee, 0x27, 0xe2, 0xc0, 0x8f, 0x13, 0xa7, 0xce, 0x18, 0x2c,
	0xc9, 0xee, 0xe3, 0x91, 0x08, 0x90, 0x59, 0x4e, 0x83, 0xad, 0x01, 0xdb, 0x8d, 0xa2, 0xaf, 0xa4,
	0x86, 0x1c, 0x85, 0xc9, 0xa1, 0x97, 0x74, 0xcf, 0x1d, 0xe0, 0x8f, 0x61, 0xa9, 0xd3, 0xb9, 0x0c,
	0xba, 0x5a, 0x06, 0x79, 0x51, 0x59, 0x73, 0x88, 0x8a, 0x2f, 0x00, 0xa0, 0x9e, 0x1f, 0x5e, 0xa2,
	0x72, 0xf0, 0xbf, 0xb0, 0xa0, 0x49, 0xaa, 0x25, 0xdb, 0xec, 0x7e, 0x51, 0xfd, 0xde, 0x35, 0xd4,
	0x4f, 0x62, 0x26, 0xf5, 0x6f, 0x0d, 0xaa, 0x22, 0x8a, 0x0e, 0xe3, 0x3e, 0x99, 0x44, 0xc3, 0x55,
	0x2d, 0xf6, 0x73, 0x50, 0xa7, 0x75, 0xbd, 0x58, 0xb4, 0x2a, 0x44, 0xdb, 0x8d, 0x3c, 0x6d, 0x5e,
	0x2c, 0x5c, 0x0d, 0xe1, 0x7c, 0xb6, 0x48, 0x9f, 0x07, 0x2f, 0x83, 0xf0, 0xc2, 0xb1, 0xf8, 0x8f,
	0x6c, 0x70, 0x3a, 0x47, 0x61, 0xe2, 0x77, 0x05, 0x2a, 0x8f, 0x2b, 0xbc, 0xde, 0x25, 0xfb, 0x14,
	0xea, 0x38, 0xed, 0x61, 0x46, 0xf5, 0x6a, 0x66, 0x94, 0x4f, 0xd5, 0x08, 0x1a, 0xa4, 0x86, 0xb1,
	0x4f, 0xa1, 0x12, 0x0b, 0x2f, 0x89, 0xc9, 0x60, 0x9a, 0xdb, 0xef, 0xa9, 0x5d, 0x16, 0x66, 0xde,
	0xea, 0x08, 0x2f, 0x71, 0x25, 0x12, 0x75, 0x18, 0x3f, 0x7f, 0xfe, 0x7c, 0xff, 0x89, 0xb2, 0x61,
	0xdd, 0x46, 0x0e, 0x44, 0x61, 0x38, 0xdc, 0xef, 0x91, 0x29, 0x2d, 0xba, 0xaa, 0x45, 0x66, 0x1f,
	0xfa, 0x5d, 0xb1, 0xdf, 0x6b, 0x55, 0x95, 0xd9, 0xcb, 0xe6, 0xfa, 0xef, 0x58, 0x50, 0xc6, 0xd9,
	0xf1, 0x53, 0x9c, 0x7f, 0xbf, 0x47, 0xa4, 0x57, 0x5c, 0xd5, 0x62, 0xdf, 0x84, 0xf2, 0xb9, 0xf0,
	0x7a, 0xc4, 0x52, 0x93, 0x71, 0xcf, 0x84, 0xd7, 0x43, 0x0d, 0x75, 0x69, 0x98, 0x7d, 0x01, 0x0b,
	0xdd, 0x30, 0x08, 0x44, 0x37, 0xe9, 0x24, 0x5e, 0x22, 0x88, 0xb2, 0xa5, 0xed, 0xf5, 0x6c, 0xff,
	0xc8, 0xe8, 0xb6, 0x81, 0x70, 0x73, 0x78, 0xbe, 0x0c, 0x8b, 0xa8, 0x0e, 0xb8, 0xe5, 0x4e, 0x57,
	0x04, 0x82, 0xff, 0x6e, 0x0d, 0x96, 0x48, 0xda, 0xba, 0x8b, 0x3d, 0x2c, 0x2a, 0xc5, 0x6d, 0x43,
	0x29, 0x34, 0x6c, 0x52, 0x2f, 0x4c, 0xb9, 0xd8, 0xf3, 0xc9, 0xe5, 0x21, 0x34, 0x91, 0x75, 0x1d,
	0x91, 0x24, 0x7e, 0xd0, 0x27, 0x6e, 0x36, 0xb7, 0x57, 0xf4, 0xe6, 0xdd, 0x6c, 0xcc, 0x35, 0x81,
	0xa9, 0x00, 0x8e, 0x8e, 0x49, 0xd1, 0x94, 0x00, 0x8e, 0x8e, 0xd9, 0x06, 0x34, 0xc2, 0x51, 0x87,
	0x38, 0x1a, 0xb7, 0xea, 0x1b, 0xa5, 0xcd, 0x0a, 0x39, 0xc7, 0xac, 0x93, 0xdd, 0x46, 0xc4, 0x6e,
	0xd0, 0x23, 0xcf, 0xd5, 0x20, 0xcf, 0x95, 0x75, 0xb0, 0x4d, 0xa8, 0x8c, 0xce, 0x51, 0x7f, 0x81,
	0xe8, 0xcf, 0x6c, 0x0b, 0xc9, 0x3f, 0xc1, 0x11, 0x57, 0x02, 0xd8, 0xbd, 0x54, 0xa3, 0x16, 0x48,
	0xa3, 0xde, 0x9d, 0xca, 0x22, 0x53, 0x9f, 0x0c, 0xdd, 0x58, 0xca, 0xe9, 0x06, 0xdb, 0x80, 0xe6,
	0x20, 0x0c, 0x5f, 0xa2, 0xdc, 0xd0, 0x3b, 0x2f, 0x93, 0x5e, 0x98, 0x5d, 0x8c, 0xc3, 0x02, 0xad,
	0x9a, 0xd2, 0xed, 0x10, 0xdd, 0xb9, 0x3e, 0xd4, 0xd7, 0xe1, 0xa5, 0xdc, 0x65, 0xeb, 0x06, 0x4d,
	0xa1, 0xdb, 0xec, 0x3e, 0x80, 0x9c, 0x8e, 0x02, 0x19, 0xa3, 0xbd, 0xdd, 0xcc, 0x64, 0x73, 0x90,
	0x8e, 0xb9, 0x06, 0xac, 0xe0, 0xe4, 0x6f, 0x4e, 0x38, 0xf9, 0x4d, 0xa8, 0xbc, 0x08, 0xbd, 0xa8,
	0x47, 0x1e, 0xbe, 0x59, 0xe0, 0xd5, 0x63, 0x1c, 0x71, 0x25, 0x60, 0xfd, 0x5f, 0xdf, 0xa4, 0xfc,
	0x59, 0xcc, 0xb2, 0x73, 0x31, 0x2b, 0xe7, 0xee, 0x4a, 0xf3, 0x44, 0xa6, 0xa2, 0x7d, 0x94, 0xdf,
	0xce, 0x3e, 0xd0, 0x87, 0x21, 0x14, 0xa9, 0x9d, 0xf0, 0x61, 0x4f, 0xd5, 0x80, 0xab, 0x21, 0x7c,
	0x3f, 0xe7, 0xc3, 0x8e, 0xc2, 0x40, 0x38, 0xef, 0xb0, 0x25, 0x00, 0xed, 0xc3, 0x02, 0xc7, 0x62,
	0x37, 0x61, 0x79, 0x37, 0x8a, 0xf0, 0xeb, 0xa3, 0x30, 0xd9, 0x0b, 0xc7, 0x01, 0x86, 0xa5, 0x65,
	0x68, 0xaa, 0xce, 0xe3, 0x57, 0x22, 0x72, 0x4a, 0xdc, 0x81, 0x25, 0xb4, 0x4c, 0x52, 0x1c, 0xf2,
	0x46, 0xfc, 0xf7, 0x2c, 0x58, 0x26, 0x85, 0xca, 0xfa, 0xd8, 0x67, 0x45, 0xdb, 0x7c, 0xdf, 0x50,
	0xbc, 0x0c, 0x37, 0x69, 0x9c, 0x2d, 0xa8, 0x85, 0xe3, 0x84, 0x44, 0xa9, 0x32, 0x21, 0xd5, 0x2c,
	0xf8, 0x61, 0xb5, 0x87, 0x7c, 0x68, 0xe5, 0x2c, 0xe7, 0x86, 0x3b, 0x89, 0x17, 0x25, 0xfc, 0x8f,
	0x2c, 0xb8, 0xa1, 0x3a, 0x77, 0x83, 0x44, 0x44, 0x64, 0x1e, 0x99, 0x05, 0x59, 0x6f, 0xb2, 0xa0,
	0x3b, 0x00, 0x11, 0x32, 0x43, 0x6a, 0xbd, 0x24, 0xca, 0xe8, 0x31, 0x94, 0xa5, 0x94, 0x53, 0x96,
	0xa2, 0x31, 0x94, 0x27, 0x8d, 0x81, 0x7f, 0x05, 0xcb, 0x8a, 0xb4, 0x27, 0x91, 0x77, 0xd1, 0xf6,
	0xa2, 0x1e, 0xda, 0x47, 0xea, 0x05, 0x94, 0xf6, 0xe9, 0x36, 0xfb, 0x19, 0xa8, 0x74, 0xbd, 0xa8,
	0x97, 0x86, 0x87, 0x4c, 0xe4, 0x27, 0x61, 0x38, 0x68, 0x93, 0x26, 0xd3, 0x38, 0xff, 0xcb, 0x12,
	0x34, 0xd4, 0xc4, 0xc7, 0x23, 0xb6, 0x05, 0xd5, 0x70, 0x44, 0x26, 0x25, 0x37, 0xbb, 0x96, 0x0b,
	0x2b, 0xc7, 0xa3, 0xad, 0x63, 0x1a, 0x75, 0x15, 0x2a, 0x47, 0x82, 0x5d, 0x20, 0xe1, 0x1e, 0x34,
	0x12, 0x2f, 0xea, 0x8b, 0xe4, 0x24, 0x8c, 0x5b, 0xe5, 0x09, 0x32, 0x62, 0x3f, 0xf1, 0xc3, 0xc0,
	0xcd, 0x30, 0x79, 0x47, 0x56, 0x2d, 0x3a, 0xb2, 0xdb, 0xd0, 0x88, 0x47, 0x62, 0x40, 0xc4, 0xb7,
	0x6a, 0xb4, 0x56, 0xd6, 0xc1, 0x36, 0xa1, 0xdc, 0xc3, 0xf4, 0x11, 0x94, 0xbf, 0x2d, 0x90, 0x8d,
	0x61, 0xdf, 0x25, 0x04, 0x0a, 0x61, 0x20, 0xce, 0x92, 0x9d, 0x13, 0xca, 0xf2, 0x2a, 0xae, 0x6a,
	0xad, 0x7b, 0x50, 0xa6, 0x04, 0x82, 0xb6, 0x94, 0x48, 0x11, 0x6a, 0xae, 0xca, 0x36, 0xfb, 0x05,
	0x58, 0x8c, 0xc5, 0x40, 0x74, 0x13, 0x5c, 0xf3, 0xf4, 0x72, 0xa4, 0x82, 0xc2, 0x2d, 0x23, 0xdb,
	0x33, 0x46, 0x85, 0x9b, 0x47, 0xf3, 0x3d, 0xa8, 0x4a, 0xfe, 0xb1, 0x26, 0xd4, 0xd2, 0x04, 0xed,
	0x1d, 0x34, 0x9c, 0x9d, 0x2e, 0x32, 0x83, 0xb4, 0xd0, 0xb1, 0xd0, 0xdc, 0xb2, 0x89, 0x1c, 0xdb,
	0x6c, 0x0f, 0x47, 0x4e, 0x89, 0x7f, 0xd7, 0x86, 0x1a, 0x5a, 0xd6, 0xf1, 0x28, 0x61, 0x1f, 0x17,
	0x24, 0xa6, 0xb6, 0xae, 0x86, 0x8b, 0xf2, 0xc2, 0xd3, 0xc3, 0x4b, 0x7f, 0x30, 0xd0, 0xe2, 0x4a,
	0x9b, 0x98, 0x82, 0xa3, 0x42, 0x60, 0x94, 0x29, 0xe9, 0x28, 0x93, 0x76, 0xbd, 0xbd, 0x2c, 0xd7,
	0x94, 0x3c, 0x2a, 0x7a, 0x2e, 0xcd, 0x7d, 0x65, 0x02, 0x55, 0xd3, 0x04, 0xf8, 0x83, 0xe9, 0xac,
	0xc9, 0x73, 0xc2, 0x2a, 0x70, 0xc2, 0xe6, 0xdf, 0xb7, 0xa0, 0x4e, 0x8e, 0x02, 0x59, 0xf1, 0x49,
	0xd1, 0x93, 0xac, 0x19, 0x9e, 0x04, 0x99, 0x51, 0x74, 0x21, 0xfc, 0xc5, 0x6c, 0x47, 0xf1, 0x3c,
	0xf8, 0x92, 0x12, 0x36, 0xe6, 0xc0, 0x82, 0x4c, 0x6f, 0x0f, 0x2f, 0x4f, 0xc7, 0x51, 0xe0, 0xd8,
	0xec, 0x5d, 0x58, 0x45, 0x4f, 0x22, 0xe9, 0x40, 0xbd, 0x38, 0x0a, 0x93, 0x8e, 0x4c, 0xc2, 0x65,
	0xae, 0x2d, 0x87, 0x70, 0x37, 0x4e, 0x99, 0xff, 0xd8, 0x92, 0xc2, 0xda, 0xe9, 0x26, 0xec, 0x43,
	0x3c, 0xb1, 0x24, 0x86, 0xb4, 0x1c, 0xcd, 0xc4, 0x1d, 0xd9, 0xef, 0xa6, 0x00, 0xe4, 0x94, 0xe4,
	0xbe, 0x92, 0x94, 0x6a, 0xe5, 0x45, 0x51, 0x2a, 0x38, 0xf4, 0x69, 0xa2, 0xb8, 0x03, 0x10, 0x08,
	0xd1, 0x93, 0x44, 0x91, 0x6f, 0xa9, 0xbb, 0x46, 0x0f, 0x7b, 0x00, 0x0d, 0xaf, 0x9b, 0xa8, 0x61,
	0x19, 0x21, 0x6e, 0x99, 0x64, 0xc9, 0x91, 0x13, 0x2f, 0xf2, 0x86, 0x6e, 0x86, 0xe4, 0x3f, 0xac,
	0x2a, 0xd6, 0xe3, 0xc6, 0xae, 0x64, 0xfd, 0x4e, 0x77, 0x92, 0xf5, 0x26, 0x2b, 0xec, 0xf9, 0x59,
	0x51, 0x9a, 0xcd, 0x8a, 0xf2, 0x1c, 0xac, 0xb8, 0xe6, 0x56, 0x7f, 0x54, 0x9e, 0x43, 0x4f, 0xa4,
	0xe8, 0xf7, 0x83, 0xd1, 0x58, 0x4e, 0xe0, 0xd8, 0x2a, 0x4c, 0xa2, 0xea, 0x1e, 0x85, 0xc9, 0xee,
	0x6b, 0x3c, 0x2e, 0x95, 0xd4, 0xf9, 0xea, 0x34, 0xa5, 0x09, 0x47, 0x86, 0xa3, 0xe4, 0xd2, 0x29,
	0xb3, 0x3b, 0xb0, 0x5e, 0x18, 0x39, 0xbc, 0x3c, 0x19, 0x78, 0x5d, 0xb1, 0x13, 0x09, 0xcf, 0xa9,
	0xa8, 0x83, 0xd6, 0xce, 0x09, 0x7e, 0x12, 0x84, 0xe3, 0xfe, 0xb9, 0x53, 0x9d, 0xd0, 0xce, 0x9a,
	0x3a, 0x1d, 0x3e, 0xf1, 0xe3, 0xc4, 0x0b, 0xba, 0xe2, 0xc0, 0x1f, 0xfa, 0x78, 0x48, 0x93, 0x07,
	0x32, 0x24, 0xa5, 0x7d, 0xd6, 0xd7, 0xd4, 0xa4, 0x07, 0xb5, 0x67, 0x22, 0x0a, 0xcd, 0x7e, 0x50,
	0xa7, 0xc9, 0x0e, 0x3a, 0x07, 0x73, 0xa0, 0xa9, 0x06, 0xa4, 0xbf, 0x42, 0xbd, 0x1f, 0x8f, 0x46,
	0x61, 0x94, 0x38, 0x0b, 0x6a, 0x5f, 0xb8, 0xc2, 0xce, 0x20, 0xc2, 0x88, 0xbd, 0xe7, 0x75, 0xc5,
	0xf3, 0x91, 0xb3, 0x98, 0x8e, 0xd0, 0x69, 0x53, 0x76, 0xd2, 0xbc, 0xce, 0x12, 0xbb, 0x0d, 0x2d,
	0x73, 0xc7, 0x39, 0x4e, 0x2d, 0xab, 0xa5, 0xd0, 0xd2, 0xdb, 0x5e, 0x10, 0x84, 0xc9, 0x4e, 0x92,
	0x78, 0xdd, 0x97, 0x8e, 0xa3, 0x8e, 0xaf, 0xb2, 0xa9, 0xbe, 0x51, 0x8b, 0xdd, 0x50, 0xc6, 0x49,
	0x11, 0x0e, 0x03, 0x6f, 0xc6, 0x2b, 0xc6, 0xde, 0x83, 0x5b, 0xd9, 0x67, 0xca, 0x6e, 0xd5, 0xe0,
	0x4d, 0x45, 0x4a, 0xdb, 0xc3, 0x4d, 0x49, 0xc8, 0xe1, 0xe5, 0xf1, 0x45, 0x40, 0x7e, 0x67, 0x65,
	0xf6, 0xe8, 0x70, 0xe4, 0xac, 0xaa, 0x0d, 0x6a, 0xfd, 0x39, 0x0a, 0x13, 0xd7, 0xef, 0x9f, 0x27,
	0xce, 0x9a, 0x3e, 0x32, 0x2b, 0x8f, 0x40, 0x1b, 0x75, 0x6e, 0xf1, 0x1f, 0xa2, 0xdb, 0xc2, 0x73,
	0xf0, 0xdb, 0x3a, 0x85, 0xab, 0xe2, 0xed, 0x1a, 0x46, 0x02, 0x8a, 0x8e, 0xca, 0x4a, 0x64, 0xeb,
	0x5a, 0x71, 0x38, 0x8b, 0xb4, 0xd5, 0x42, 0xa4, 0xe5, 0xff, 0x5e, 0x86, 0x06, 0xd1, 0x4e, 0x93,
	0xdf, 0x85, 0x32, 0x1a, 0xa3, 0x3a, 0xb9, 0x2f, 0xea, 0x79, 0x49, 0x00, 0x34, 0x34, 0x33, 0xeb,
	0xf9, 0x04, 0x6a, 0xdd, 0x73, 0x2f, 0xe8, 0x8b, 0x94, 0xaa, 0xd4, 0x67, 0xa4, 0x93, 0x6f, 0xb5,
	0x69, 0xd8, 0x4d, 0x61, 0x98, 0x27, 0x11, 0x1d, 0x1d, 0x15, 0xc2, 0x80, 0xe6, 0xcb, 0xf5, 0xe5,
	0x89, 0x6f, 0x16, 0x88, 0x5f, 0xff, 0x2f, 0x0b, 0xaa, 0x72, 0x56, 0xf6, 0x39, 0x80, 0x9c, 0xd7,
	0xe0, 0xfc, 0xfa, 0x74, 0x0a, 0x48, 0x06, 0x06, 0x9a, 0x1c, 0x12, 0xb5, 0xb4, 0x6f, 0x96, 0x73,
	0x3a, 0x50, 0x0a, 0x07, 0xe9, 0x3e, 0xf1, 0x27, 0xf6, 0x04, 0xe2, 0x82, 0x9c, 0x53, 0xc5, 0xc5,
	0x9f, 0xec, 0x67, 0xa1, 0x1a, 0x0e, 0x7a, 0x28, 0x8b, 0xca, 0x2c, 0x8f, 0xa5, 0x00, 0x08, 0x0d,
	0xc4, 0x05, 0x42, 0xab, 0x33, 0xa1, 0x12, 0x80, 0xdb, 0x0e, 0xc4, 0xc5, 0xe3, 0xf1, 0xd9, 0xd9,
	0x7e, 0x8f, 0x0e, 0x81, 0x15, 0x37, 0xeb, 0xe0, 0x3f, 0xb0, 0x00, 0xb2, 0xad, 0x18, 0x3e, 0xac,
	0x01, 0x15, 0xf2, 0x30, 0x8e, 0xc5, 0x00, 0xaa, 0xca, 0x88, 0x6c, 0x56, 0x05, 0xfb, 0xd9, 0x89,
	0x53, 0xc2, 0xe1, 0x67, 0x27, 0x87, 0xde, 0x6b, 0xa7, 0x8c, 0xc3, 0xca, 0xfe, 0x2a, 0xac, 0x06,
	0xa5, 0x27, 0xbe, 0x70, 0xaa, 0xf8, 0xe3, 0x24, 0x8c, 0x9d, 0x1a, 0xce, 0x88, 0x4b, 0x39, 0x75,
	0xfc, 0x44, 0x5a, 0x77, 0x03, 0x1d, 0xa4, 0x32, 0xb6, 0x00, 0x5d, 0xca, 0x02, 0xd4, 0x71, 0x81,
	0x27, 0x78, 0x84, 0x68, 0xa2, 0x33, 0x93, 0x83, 0xa9, 0xa7, 0x72, 0x16, 0xf0, 0x83, 0xb6, 0x17,
	0xa4, 0x7e, 0x03, 0xa9, 0x5e, 0x4c, 0xab, 0x45, 0x34, 0x27, 0x63, 0x50, 0x46, 0xe5, 0x51, 0x79,
	0x19, 0xfd, 0xbe, 0x22, 0xa5, 0x61, 0x4a, 0x37, 0xa5, 0x38, 0xa4, 0x32, 0x7e, 0x00, 0x4d, 0xa9,
	0xe8, 0x6d, 0xca, 0x8e, 0xcb, 0x3a, 0x3d, 0x31, 0xbb, 0x67, 0x66, 0x2f, 0x1c, 0x16, 0x24, 0x4c,
	0x99, 0xa0, 0x4c, 0x43, 0x73, 0x7d, 0xfc, 0x14, 0x9c, 0x1c, 0xd1, 0xbb, 0x41, 0xef, 0x7f, 0x4f,
	0x37, 0xff, 0x47, 0x5b, 0x5b, 0xdd, 0x70, 0x64, 0x9a, 0x0e, 0x4c, 0x31, 0x9d, 0xe1, 0x68, 0xc2,
	0x74, 0x32, 0x23, 0x6c, 0xe6, 0x8c, 0x30, 0x67, 0x2e, 0x2b, 0x45, 0x73, 0xf9, 0xb3, 0xb7, 0x31,
	0x17, 0xbd, 0xea, 0xff, 0xb1, 0xb9, 0xd4, 0x95, 0x1e, 0xc7, 0xad, 0x06, 0xed, 0x35, 0x73, 0x32,
	0xd8, 0xeb, 0xea, 0x61, 0xbe, 0x39, 0x43, 0xc9, 0xa5, 0x36, 0x5b, 0x5a, 0x49, 0x6d, 0xfe, 0x2f,
	0xb6, 0xd2, 0xac, 0x67, 0x5e, 0xd0, 0x23, 0x3f, 0xf6, 0x4b, 0xd0, 0xcc, 0x08, 0x8e, 0xd5, 0xfe,
	0xee, 0x18, 0xfb, 0x4b, 0x91, 0xe6, 0x1e, 0xcd, 0x4f, 0x0c, 0x0e, 0xdb, 0x39, 0x0e, 0xe3, 0xf9,
	0x3b, 0x55, 0xb7, 0xd2, 0xac, 0xc3, 0x98, 0x86, 0xa0, 0xb7, 0x1e, 0x84, 0xb1, 0xc8, 0xd4, 0x73,
	0x2a, 0x3e, 0xc3, 0xe0, 0x07, 0xe7, 0x8a, 0xb6, 0x98, 0x14, 0x76, 0xfa, 0x07, 0x1a, 0xf3, 0x06,
	0xf7, 0xfe, 0x70, 0x06, 0x13, 0xeb, 0x50, 0xc6, 0x83, 0xa7, 0x63, 0x65, 0x16, 0x6e, 0x67, 0xee,
	0xa3, 0xc4, 0x1f, 0xa9, 0xca, 0xae, 0x2e, 0x95, 0xe0, 0x11, 0x54, 0xd6, 0x93, 0xac, 0x02, 0x51,
	0xba, 0xea, 0x20, 0xc7, 0xf9, 0x47, 0xfa, 0x68, 0x9b, 0x16, 0x0f, 0xd0, 0x38, 0x2e, 0xfc, 0xa0,
	0x93, 0xd9, 0x4c, 0xda, 0xc4, 0x73, 0x3b, 0x66, 0xd3, 0x6d, 0x74, 0x19, 0x83, 0xf6, 0x38, 0x3a,
	0x1e, 0x25, 0x7c, 0x0c, 0x37, 0x28, 0xd1, 0x34, 0x3b, 0xd9, 0xa3, 0x62, 0x4a, 0xfa, 0x53, 0x46,
	0x4a, 0x6a, 0x22, 0x27, 0x8f, 0x05, 0xdf, 0x9c, 0x96, 0xee, 0x15, 0x33, 0x2d, 0x8b, 0x7f, 0x08,
	0x0b, 0x69, 0xe5, 0x71, 0xf7, 0xb5, 0x9f, 0x60, 0x70, 0x16, 0xaf, 0xfd, 0x2c, 0x92, 0x57, 0x5c,
	0xdd, 0xe6, 0xbb, 0xb0, 0xa8, 0x2b, 0x69, 0x04, 0x6e, 0xe5, 0xc9, 0x5b, 0xcc, 0x32, 0x63, 0x73,
	0x1a, 0xbb, 0x30, 0x0d, 0x55, 0x8f, 0x91, 0xcd, 0x27, 0x03, 0xef, 0x52, 0x44, 0xb2, 0xc2, 0x33,
	0xcd, 0xbb, 0x14, 0xab, 0x46, 0xf6, 0x5b, 0x56, 0x8d, 0x18, 0x94, 0x7b, 0xc2, 0x93, 0xb6, 0x59,
	0x77, 0xe9, 0x37, 0xfb, 0x08, 0xea, 0xe7, 0x23, 0xa9, 0x1c, 0x2a, 0xdb, 0x5e, 0xce, 0xe2, 0xbd,
	0xf4, 0x37, 0x1a, 0xc0, 0x76, 0x72, 0xfe, 0xa2, 0x42, 0xcb, 0xdf, 0x35, 0xec, 0xc9, 0xd8, 0xc0,
	0x2c, 0xb7, 0xa1, 0x9c, 0x41, 0x55, 0x3b, 0x03, 0x7e, 0x92, 0x53, 0xce, 0xdc, 0x49, 0x31, 0x35,
	0x72, 0x15, 0x9b, 0x48, 0x37, 0x69, 0x76, 0xa7, 0x84, 0x63, 0x3b, 0x27, 0xf2, 0x26, 0x04, 0x75,
	0x9c, 0x8c, 0x02, 0xf3, 0x3f, 0xa7, 0xc2, 0xef, 0xaa, 0xea, 0xf1, 0x61, 0x3b, 0x1c, 0x0e, 0xbd,
	0x80, 0x3c, 0x50, 0x77, 0xd8, 0x53, 0xb7, 0x66, 0xf8, 0x13, 0x21, 0x9d, 0x22, 0x24, 0xd2, 0x17,
	0x6b, 0xf8, 0x93, 0x6f, 0xc0, 0x82, 0xbc, 0xe7, 0x91, 0x6a, 0x8c, 0x88, 0x61, 0xdc, 0x4f, 0x11,
	0xc3, 0xb8, 0xcf, 0xff, 0xd6, 0x92, 0xd7, 0x83, 0xed, 0x73, 0x2f, 0x61, 0xdb, 0xd2, 0x7d, 0x07,
	0x62, 0xa0, 0xaf, 0xc8, 0xb4, 0x5c, 0x10, 0xd0, 0x96, 0x83, 0xa7, 0x97, 0x23, 0x37, 0x05, 0xb2,
	0x2d, 0xa8, 0x0d, 0xe3, 0xbe, 0x71, 0x5e, 0x5a, 0xc9, 0x7f, 0x73, 0x48, 0x83, 0x6e, 0x0a, 0x4a,
	0x49, 0x28, 0x69, 0x12, 0xd8, 0x0a, 0x54, 0x86, 0x71, 0x5f, 0x55, 0xf8, 0x1b, 0xae, 0x6c, 0x64,
	0x21, 0xed, 0xb9, 0x2c, 0x57, 0x56, 0xa8, 0x5c, 0x99, 0xeb, 0xe3, 0xff, 0x60, 0xab, 0xbb, 0x49,
	0xa2, 0xfe, 0xd3, 0xa2, 0x61, 0xdd, 0x32, 0x0d, 0xeb, 0xdc, 0x9b, 0x72, 0xd8, 0x33, 0x36, 0x5c,
	0xba, 0xc6, 0x86, 0xcb, 0xf3, 0x6c, 0x78, 0x9e, 0x8d, 0x7c, 0xe7, 0x4a, 0xc3, 0xde, 0x0f, 0xdc,
	0x30, 0x1c, 0x3a, 0x96, 0x3a, 0x14, 0xc9, 0x6c, 0xfd, 0x28, 0x4c, 0x8e, 0x83, 0x81, 0x1f, 0xa0,
	0x4a, 0xc9, 0x23, 0x9e, 0x71, 0xea, 0x29, 0x29, 0xe8, 0xb7, 0xc3, 0xa8, 0xb7, 0xe7, 0x0f, 0x12,
	0x11, 0xed, 0x46, 0x51, 0x18, 0x39, 0x65, 0x73, 0x52, 0x34, 0x79, 0xa7, 0xc2, 0x7f, 0x62, 0xc1,
	0x92, 0x72, 0x73, 0x8a, 0xfc, 0xff, 0x17, 0x3d, 0xd8, 0x82, 0xfa, 0x59, 0x14, 0x0e, 0x91, 0x01,
	0x57, 0xd4, 0x9b, 0x35, 0x06, 0xbd, 0x0f, 0xfe, 0x26, 0xd7, 0x2b, 0xc3, 0xb0, 0x6e, 0xa7, 0x3a,
	0x05, 0x53, 0x74, 0xaa, 0x69, 0xe8, 0x54, 0x76, 0x43, 0x87, 0xfc, 0xe4, 0xdf, 0xcb, 0x6e, 0xe8,
	0xb0, 0xfd, 0xa6, 0x1b, 0x3a, 0xc4, 0x4c, 0x6a, 0xd0, 0x5d, 0x28, 0x47, 0x61, 0x38, 0x54, 0xf5,
	0xbd, 0xc5, 0xdc, 0x7d, 0x8a, 0x4b, 0x43, 0xfc, 0x1b, 0x73, 0x54, 0xae, 0xf9, 0x63, 0x59, 0x93,
	0xc6, 0xcf, 0xe4, 0x81, 0x94, 0x7d, 0x02, 0xf5, 0x58, 0x24, 0xf2, 0xb6, 0xc6, 0xba, 0xe2, 0xb6,
	0x46, 0xa3, 0xf8, 0x7f, 0xa7, 0x55, 0x6c, 0x63, 0x96, 0x2b, 0xab, 0xd8, 0x19, 0x6e, 0xf6, 0xc6,
	0xec, 0xd9, 0x1b, 0xfb, 0x9e, 0x35, 0x4f, 0x4d, 0x5e, 0x9e, 0xfb, 0xd5, 0xd9, 0x5b, 0xa9, 0xb2,
	0x5d, 0xec, 0x7d, 0x2a, 0xcb, 0x54, 0xb2, 0x92, 0x60, 0xec, 0x4e, 0x5f, 0x13, 0x4b, 0x32, 0xe9,
	0xe3, 0xb4, 0xe0, 0xd0, 0xf1, 0x13, 0xcc, 0xd9, 0xf7, 0x3c, 0x7f, 0xe0, 0x54, 0xf9, 0x1e, 0xdc,
	0x48, 0x19, 0xf8, 0x2b, 0x63, 0xbf, 0xfb, 0xf2, 0x97, 0x43, 0x3f, 0xb8, 0xc6, 0xfd, 0x25, 0xff,
	0xb1, 0x05, 0x4c, 0x33, 0x27, 0x9b, 0xe9, 0xf3, 0x22, 0x1f, 0x37, 0x0a, 0x7c, 0xd4, 0xd0, 0x6b,
	0xb1, 0xf2, 0xd7, 0xae, 0xc1, 0x49, 0xe2, 0x99, 0x3d, 0xc9, 0x9f, 0xd2, 0x54, 0xfe, 0x3c, 0x85,
	0xd5, 0x94, 0x3f, 0x8a, 0xb7, 0x2a, 0x20, 0x6e, 0x41, 0x2d, 0x16, 0x6f, 0x56, 0xb3, 0x14, 0xc4,
	0xff, 0xd0, 0x86, 0x35, 0xbd, 0xeb, 0xfc, 0x54, 0x5f, 0x14, 0x99, 0xf4, 0x41, 0x81, 0x49, 0x39,
	0xf8, 0x24, 0xa3, 0x0c, 0x52, 0xec, 0x79, 0x48, 0xf9, 0xfd, 0xb9, 0x14, 0x30, 0x7d, 0x07, 0xb0,
	0x33, 0x4e, 0xce, 0xc3, 0xc8, 0x4f, 0x2e, 0x67, 0xaa, 0x5f, 0xd1, 0xe3, 0x96, 0xa7, 0x28, 0x64,
	0x25, 0x2d, 0x59, 0xd1, 0x1e, 0xd0, 0xfd, 0xc8, 0x90, 0x5d, 0xe5, 0x3f, 0x2d, 0xd3, 0x2e, 0x04,
	0x93, 0xca, 0x64, 0x37, 0xa7, 0x96, 0x79, 0x73, 0xca, 0xff, 0xbc, 0xa4, 0x72, 0x2e, 0x8d, 0x7c,
	0x50, 0xe4, 0xdb, 0x7b, 0x05, 0xbe, 0x4d, 0xd7, 0xab, 0x6c, 0x01, 0x3b, 0x77, 0x35, 0x4b, 0x6f,
	0x42, 0xe4, 0x4d, 0xa3, 0xca, 0x93, 0x74, 0x1b, 0xa3, 0x11, 0xdd, 0xa0, 0xa7, 0x6f, 0x46, 0x64,
	0xd9, 0x35, 0xd7, 0x37, 0x8f, 0x4f, 0xfb, 0x89, 0x35, 0xff, 0x75, 0x1c, 0x7e, 0xa6, 0xab, 0x67,
	0xe9, 0x75, 0x1c, 0x76, 0xee, 0x8d, 0x07, 0x03, 0x5d, 0x9b, 0xc6, 0x0e, 0x25, 0x88, 0xb2, 0x2a,
	0x5c, 0xa9, 0x0f, 0x77, 0x06, 0x83, 0xf0, 0x82, 0xee, 0xbd, 0xa6, 0x9b, 0x7e, 0x5e, 0x98, 0x72,
	0x9f, 0x4e, 0x4d, 0x2d, 0x2e, 0xd3, 0x39, 0x35, 0x71, 0x5d, 0x57, 0xe1, 0x82, 0xa3, 0x30, 0xd9,
	0xf3, 0x83, 0x1e, 0xa2, 0x51, 0x86, 0xba, 0xe2, 0xd8, 0xf1, 0x13, 0x39, 0x83, 0x7a, 0x5d, 0x02,
	0xfc, 0x5b, 0xc0, 0x32, 0xc3, 0x91, 0xb1, 0xaf, 0x2f, 0x26, 0x4e, 0xdc, 0xd6, 0x94, 0x13, 0xf7,
	0xf7, 0x4b, 0x70, 0xd3, 0x50, 0x7d, 0xfd, 0xed, 0xcf, 0x17, 0xc5, 0x7d, 0x77, 0xc2, 0x4c, 0x52,
	0xec, 0xa4, 0xd0, 0x8b, 0x0b, 0xdb, 0x93, 0x0b, 0x17, 0x2e, 0xa1, 0x4b, 0xf3, 0x5d, 0x42, 0xcf,
	0x21, 0xf5, 0x7f, 0x9e, 0x4b, 0xea, 0x45, 0x2b, 0x4a, 0x2f, 0x26, 0x4e, 0x35, 0x89, 0x46, 0xd5,
	0xd9, 0xac, 0x2d, 0xe3, 0x90, 0x92, 0x22, 0xfe, 0x14, 0x3d, 0xa7, 0xcc, 0xde, 0x87, 0x77, 0xa5,
	0x54, 0x9e, 0x8f, 0x50, 0x22, 0x5f, 0xa7, 0xe3, 0xd8, 0xe1, 0x54, 0xd8, 0x5d, 0x78, 0x3f, 0xaf,
	0x0e, 0x06, 0x80, 0x0a, 0x3a, 0x55, 0x55, 0x5d, 0xcd, 0x66, 0xd8, 0x8f, 0x0f, 0xbc, 0x98, 0x12,
	0x2f, 0xa7, 0xc6, 0x57, 0x32, 0xe1, 0x4a, 0xae, 0xec, 0x07, 0x67, 0x21, 0xff, 0x1b, 0xcb, 0x10,
	0x5c, 0xd6, 0xff, 0x66, 0xc1, 0x65, 0xd8, 0x49, 0xc1, 0x7d, 0x0c, 0x35, 0xc9, 0xed, 0xf4, 0xee,
	0x73, 0x5a, 0xbe, 0x93, 0x42, 0xf8, 0x83, 0x6b, 0x71, 0x9a, 0x7f, 0x53, 0x1e, 0x1b, 0x48, 0x66,
	0x74, 0x8b, 0xbd, 0x02, 0x15, 0xe2, 0x07, 0x11, 0x5c, 0x77, 0x65, 0x83, 0xff, 0xbd, 0xa5, 0x9e,
	0xa2, 0x64, 0xc0, 0x2b, 0x9f, 0xa2, 0x68, 0xd8, 0xe4, 0xb6, 0xf4, 0x02, 0xb6, 0xb9, 0x80, 0x77,
	0x3d, 0x45, 0x99, 0x70, 0x05, 0xe9, 0xf3, 0xb1, 0xe3, 0x8b, 0x00, 0x0f, 0x31, 0x47, 0x42, 0xf4,
	0x88, 0x0e, 0xa7, 0x9c, 0xbe, 0xaf, 0x21, 0xb6, 0x0b, 0xef, 0x95, 0xe0, 0xbf, 0x61, 0xec, 0x89,
	0x7a, 0xde, 0xbc, 0x27, 0x82, 0x4d, 0x9e, 0xb3, 0xaf, 0xc9, 0xfc, 0x5f, 0xcd, 0x02, 0xc0, 0x97,
	0x7e, 0xf7, 0x25, 0xfb, 0x00, 0x16, 0x5f, 0xfa, 0xdd, 0x97, 0x3b, 0x83, 0x81, 0x72, 0xc6, 0x52,
	0x06, 0xf9, 0xce, 0x89, 0xf3, 0x81, 0x3d, 0xe5, 0x7c, 0xf0, 0x4f, 0x96, 0x11, 0x32, 0x68, 0xee,
	0x37, 0x86, 0x0c, 0x44, 0x4d, 0xee, 0xec, 0xb7, 0xe6, 0xb2, 0x60, 0x79, 0x83, 0x74, 0x14, 0x92,
	0x67, 0xb4, 0xa7, 0x04, 0xd0, 0x69, 0xa1, 0x72, 0x42, 0x76, 0x95, 0xe2, 0x79, 0x45, 0x41, 0xab,
	0xfc, 0xaf, 0x2d, 0xfd, 0xc8, 0x01, 0x7b, 0x4e, 0xfd, 0xa1, 0x88, 0xf0, 0x60, 0x1e, 0x50, 0x97,
	0x51, 0xc8, 0xbb, 0x9b, 0xbb, 0x2f, 0xd7, 0xd8, 0xad, 0x23, 0x0d, 0x74, 0x8d, 0x8f, 0xa8, 0x76,
	0xa1, 0xae, 0xe9, 0x6d, 0xf9, 0x3a, 0x55, 0x35, 0xf9, 0x13, 0x80, 0xec, 0x9b, 0xfc, 0x01, 0xfd,
	0x26, 0x2c, 0x93, 0x4a, 0xd1, 0xcc, 0xe9, 0x4d, 0xf7, 0x0a, 0x38, 0x59, 0xa7, 0x2c, 0xca, 0x38,
	0x36, 0xff, 0x2b, 0x4b, 0x57, 0x84, 0xb4, 0x20, 0x38, 0x2c, 0xa0, 0x3c, 0x45, 0xa4, 0xc4, 0x67,
	0x49, 0xf1, 0x99, 0x7d, 0xc6, 0x23, 0x36, 0x3b, 0xf7, 0x88, 0xed, 0x11, 0xd4, 0x11, 0x67, 0x78,
	0xe9, 0xf7, 0x27, 0x36, 0x4c, 0x72, 0xfc, 0x52, 0xa2, 0x5c, 0x0d, 0xe7, 0x9b, 0x50, 0x53, 0x9d,
	0xf9, 0xdd, 0x38, 0xb0, 0x40, 0x6f, 0x1a, 0xa9, 0x9e, 0x13, 0xf4, 0x1c, 0x8b, 0xf7, 0x60, 0xd5,
	0x98, 0x2e, 0x4b, 0x5b, 0x66, 0x3e, 0x11, 0xca, 0x47, 0x0f, 0x7b, 0xae, 0xe8, 0xc1, 0x6f, 0x66,
	0xe9, 0x37, 0xf1, 0x10, 0xd7, 0xe7, 0xff, 0x66, 0xe6, 0xd2, 0xba, 0xfb, 0xcd, 0xb9, 0xb4, 0x86,
	0x4e, 0x2a, 0xf0, 0x77, 0xaf, 0x9d, 0xf2, 0x15, 0x35, 0x76, 0x6a, 0xe2, 0x21, 0xef, 0xc5, 0x64,
	0x32, 0x8d, 0x5d, 0x94, 0x61, 0x54, 0xb2, 0xa7, 0xa4, 0x3b, 0x83, 0x81, 0xf4, 0x3f, 0x55, 0xfe,
	0x1f, 0xb6, 0x7a, 0x94, 0x73, 0x76, 0x99, 0x31, 0x96, 0x3d, 0x84, 0xaa, 0x47, 0x77, 0x90, 0x85,
	0x52, 0x6d, 0x11, 0xb8, 0x25, 0x6f, 0x2a, 0x5d, 0x85, 0x46, 0x35, 0x92, 0xbf, 0xf2, 0x5e, 0xc0,
	0xec, 0xcb, 0x30, 0x1d, 0xf3, 0xda, 0x2a, 0xd7, 0x37, 0xa1, 0x8e, 0xe5, 0x29, 0xea, 0x38, 0x47,
	0xa4, 0xff, 0x03, 0x0b, 0xaa, 0x92, 0xc2, 0xbc, 0x7a, 0x35, 0xa1, 0x96, 0x46, 0x56, 0x2a, 0xb8,
	0x92, 0x03, 0x95, 0x49, 0x1d, 0xfd, 0x7c, 0x7c, 0x89, 0x5a, 0xe9, 0x94, 0xb0, 0x83, 0x7c, 0xb6,
	0xdc, 0xad, 0x53, 0x46, 0xb0, 0xe4, 0x5c, 0x05, 0xc7, 0xe8, 0xa7, 0xb2, 0xab, 0x2a, 0x0a, 0x22,
	0x77, 0x32, 0x70, 0x6a, 0xd4, 0x85, 0x21, 0xfb, 0x34, 0x54, 0x09, 0x5d, 0x9d, 0xff, 0x20, 0xef,
	0x35, 0x76, 0x5f, 0x89, 0x20, 0x61, 0xdb, 0x50, 0x11, 0xf8, 0xa3, 0xe0, 0xe0, 0x0b, 0xb0, 0x2d,
	0xfa, 0xdf, 0x95, 0x50, 0xb6, 0x0d, 0x90, 0xf1, 0x55, 0x9d, 0x34, 0xa6, 0x05, 0x63, 0x03, 0xc5,
	0x3f, 0x83, 0x8a, 0x5c, 0x30, 0xc7, 0x8e, 0x06, 0x54, 0x64, 0x62, 0x9a, 0x63, 0x86, 0x64, 0x92,
	0xcc, 0x6e, 0xf9, 0xa6, 0x2a, 0x8c, 0x1e, 0x18, 0x8f, 0x0c, 0x57, 0xa0, 0xd2, 0x35, 0xde, 0xf1,
	0xc8, 0x06, 0xff, 0x40, 0x6f, 0xef, 0x89, 0x78, 0x31, 0xee, 0x53, 0xc6, 0x31, 0x59, 0xb0, 0x0b,
	0x60, 0x51, 0xa1, 0x0e, 0xc2, 0x7e, 0x38, 0x4e, 0xd8, 0x7d, 0xa8, 0x46, 0xc2, 0x8b, 0xb5, 0xc6,
	0xbd, 0x97, 0x99, 0x2a, 0xca, 0x02, 0xa9, 0x3f, 0x1e, 0x27, 0x2e, 0x41, 0x5c, 0x05, 0x4d, 0xe7,
	0xb5, 0xb3, 0x8a, 0x49, 0x7a, 0xb5, 0x54, 0xd2, 0xef, 0xdc, 0xa9, 0xcd, 0x3f, 0x85, 0x65, 0xa2,
	0xbf, 0x93, 0x3d, 0x47, 0xcc, 0x3f, 0x57, 0xb4, 0x8a, 0xcf, 0x15, 0xf9, 0x9f, 0xa0, 0xa0, 0xa8,
	0xe8, 0x16, 0x0e, 0x87, 0x61, 0x40, 0xa5, 0x27, 0xf6, 0xad, 0xa2, 0xd1, 0xdf, 0x31, 0xab, 0x73,
	0x19, 0x70, 0xd2, 0xe4, 0x4f, 0xa7, 0x59, 0xfc, 0x2a, 0xdc, 0xe8, 0x88, 0x58, 0xbd, 0xe2, 0xde,
	0x0f, 0x0e, 0xc2, 0x17, 0x2f, 0x2e, 0xa5, 0xe1, 0x2b, 0x46, 0xd3, 0xcd, 0xfc, 0xf1, 0x48, 0x9e,
	0xf5, 0x4c, 0xa8, 0xcc, 0x2b, 0xf8, 0x40, 0xfe, 0x55, 0x02, 0x39, 0x4b, 0xf6, 0x21, 0x94, 0x87,
	0x13, 0x6f, 0x44, 0xf4, 0xf0, 0xd6, 0x61, 0xd8, 0x13, 0xfb, 0x4f, 0x5c, 0xc2, 0xf0, 0xfb, 0x50,
	0x95, 0x6d, 0xb6, 0x00, 0x75, 0xfc, 0xa5, 0x28, 0x52, 0xad, 0x53, 0xf1, 0x3a, 0x91, 0x21, 0x14,
	0x5b, 0x5f, 0x85, 0x7e, 0x57, 0x38, 0x36, 0xff, 0x6d, 0x4b, 0xfd, 0x2d, 0x82, 0x5c, 0xef, 0xca,
	0xbf, 0x45, 0x90, 0x6b, 0x4e, 0x4b, 0xb4, 0x70, 0xfd, 0x81, 0xca, 0xf8, 0x65, 0x83, 0x7f, 0x3c,
	0x8d, 0x39, 0xa8, 0x80, 0xe3, 0x6e, 0x57, 0xc4, 0x71, 0x7a, 0x7f, 0x4a, 0x67, 0x19, 0x9b, 0xff,
	0xa6, 0x0d, 0x4c, 0x69, 0x0f, 0xad, 0xe2, 0x8a, 0x78, 0x3c, 0x48, 0xa6, 0x4f, 0xcd, 0xda, 0xb9,
	0x80, 0x2c, 0xe3, 0xd3, 0x37, 0x72, 0xf6, 0x65, 0xcc, 0x31, 0x2b, 0x24, 0x7f, 0x0c, 0xb5, 0x11,
	0x1d, 0xc1, 0xd2, 0x3b, 0xa0, 0xa9, 0x59, 0xaf, 0x82, 0x68, 0xcf, 0x54, 0x9d, 0xed, 0x99, 0xbe,
	0x98, 0x1d, 0xc9, 0x97, 0xa1, 0x49, 0x14, 0x75, 0xc6, 0x6a, 0xeb, 0x0c, 0x96, 0x64, 0x47, 0x1a,
	0x4f, 0x1c, 0x9b, 0x2f, 0xc1, 0x42, 0x5b, 0x3a, 0x1e, 0x1a, 0xe2, 0xdf, 0x49, 0x75, 0x35, 0xeb,
	0x33, 0x75, 0xd5, 0x9e, 0xd4, 0xd5, 0x0c, 0x38, 0xa9, 0xab, 0x53, 0xc5, 0x91, 0x49, 0xc0, 0x32,
	0x45, 0x63, 0xf3, 0xbf, 0xb3, 0x60, 0xb1, 0xdd, 0xf6, 0xa2, 0xde, 0xd3, 0x28, 0x1c, 0xd3, 0x53,
	0xb1, 0x07, 0x50, 0x0b, 0x47, 0xe6, 0x9b, 0x0b, 0x95, 0xd6, 0xe5, 0x50, 0x5b, 0xc7, 0x23, 0xf5,
	0xfc, 0x42, 0x61, 0xd1, 0xa3, 0xd1, 0xab, 0x49, 0x42, 0x4c, 0x78, 0x34, 0xfd, 0xad, 0x6b, 0xa0,
	0xf8, 0x63, 0xa8, 0xa9, 0x79, 0x90, 0xa8, 0xe3, 0x51, 0x92, 0xe9, 0xf1, 0xf1, 0x28, 0xa1, 0x10,
	0x28, 0xf5, 0xf8, 0x78, 0x94, 0x1c, 0x86, 0x3d, 0xff, 0x0c, 0x83, 0xa8, 0x6c, 0xca, 0x57, 0x23,
	0x4e, 0x89, 0xff, 0xb1, 0xad, 0x6f, 0xb8, 0x8c, 0x4d, 0x3c, 0x2a, 0xb2, 0x2f, 0x7f, 0xc3, 0x65,
	0x6c, 0x64, 0x42, 0xc9, 0x1f, 0x41, 0x25, 0xa6, 0x0f, 0xf3, 0xea, 0x36, 0xf1, 0xa1, 0xe2, 0x21,
	0x7d, 0x2c, 0xbf, 0xe0, 0x9f, 0x67, 0xac, 0x6f, 0xd2, 0x4f, 0xb5, 0x1f, 0x55, 0x1f, 0xc3, 0x8d,
	0xcb, 0x4a, 0x8d, 0xa5, 0x4a, 0x10, 0xd8, 0xd5, 0x91, 0x4a, 0xf1, 0x15, 0x34, 0x8d, 0x19, 0x71,
	0x5c, 0x35, 0xb3, 0x52, 0x7c, 0x3a, 0xae, 0xf8, 0x82, 0xf1, 0x49, 0xf6, 0x68, 0xde, 0x64, 0x5d,
	0x9a, 0x3f, 0xea, 0xa5, 0xb1, 0x26, 0x3d, 0xe6, 0x9e, 0x2a, 0xd1, 0x66, 0x5d, 0x6c, 0x1d, 0xea,
	0x41, 0x78, 0xf1, 0x3c, 0x16, 0xd9, 0x73, 0xd9, 0xb4, 0x9d, 0x0a, 0x56, 0x22, 0x27, 0xce, 0x8d,
	0x05, 0xc1, 0x4a, 0xd4, 0x8b, 0x2a, 0xfd, 0xdd, 0xd7, 0xfd, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff,
	0x6d, 0xfb, 0x03, 0x27, 0x7b, 0x36, 0x00, 0x00,
}
