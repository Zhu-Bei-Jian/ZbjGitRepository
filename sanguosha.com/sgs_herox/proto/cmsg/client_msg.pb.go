// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: cmsg/client_msg.proto

package cmsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	def "sanguosha.com/sgs_herox/proto/def"
	gameconf "sanguosha.com/sgs_herox/proto/gameconf"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SRespLogin_ErrCode int32

const (
	SRespLogin_Succ                   SRespLogin_ErrCode = 0
	SRespLogin_ErrSystem              SRespLogin_ErrCode = 1
	SRespLogin_ErrTicketInvalid       SRespLogin_ErrCode = 2  //凭据无效
	SRespLogin_ErrForceRealName       SRespLogin_ErrCode = 3  //强制实名而未实名
	SRespLogin_ErrExtraInfoInvalid    SRespLogin_ErrCode = 4  //登录信息不全
	SRespLogin_ErrAccountBan          SRespLogin_ErrCode = 5  //账户被封
	SRespLogin_ErrCreateAccountFailed SRespLogin_ErrCode = 6  //创建账号出错
	SRespLogin_ErrLoadAccountFailed   SRespLogin_ErrCode = 7  //加载账号出错
	SRespLogin_ErrNotInWhiteList      SRespLogin_ErrCode = 8  //未在白名单内
	SRespLogin_ErrNotOpenTime         SRespLogin_ErrCode = 9  //未到开服时间或者已关服
	SRespLogin_ErrVersionNotMatch     SRespLogin_ErrCode = 10 //版本不匹配
)

// Enum value maps for SRespLogin_ErrCode.
var (
	SRespLogin_ErrCode_name = map[int32]string{
		0:  "Succ",
		1:  "ErrSystem",
		2:  "ErrTicketInvalid",
		3:  "ErrForceRealName",
		4:  "ErrExtraInfoInvalid",
		5:  "ErrAccountBan",
		6:  "ErrCreateAccountFailed",
		7:  "ErrLoadAccountFailed",
		8:  "ErrNotInWhiteList",
		9:  "ErrNotOpenTime",
		10: "ErrVersionNotMatch",
	}
	SRespLogin_ErrCode_value = map[string]int32{
		"Succ":                   0,
		"ErrSystem":              1,
		"ErrTicketInvalid":       2,
		"ErrForceRealName":       3,
		"ErrExtraInfoInvalid":    4,
		"ErrAccountBan":          5,
		"ErrCreateAccountFailed": 6,
		"ErrLoadAccountFailed":   7,
		"ErrNotInWhiteList":      8,
		"ErrNotOpenTime":         9,
		"ErrVersionNotMatch":     10,
	}
)

func (x SRespLogin_ErrCode) Enum() *SRespLogin_ErrCode {
	p := new(SRespLogin_ErrCode)
	*p = x
	return p
}

func (x SRespLogin_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespLogin_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[0].Descriptor()
}

func (SRespLogin_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[0]
}

func (x SRespLogin_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespLogin_ErrCode.Descriptor instead.
func (SRespLogin_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{3, 0}
}

type SRespMyData_ErrCode int32

const (
	SRespMyData_Succ      SRespMyData_ErrCode = 0
	SRespMyData_ErrUnknow SRespMyData_ErrCode = 1
)

// Enum value maps for SRespMyData_ErrCode.
var (
	SRespMyData_ErrCode_name = map[int32]string{
		0: "Succ",
		1: "ErrUnknow",
	}
	SRespMyData_ErrCode_value = map[string]int32{
		"Succ":      0,
		"ErrUnknow": 1,
	}
)

func (x SRespMyData_ErrCode) Enum() *SRespMyData_ErrCode {
	p := new(SRespMyData_ErrCode)
	*p = x
	return p
}

func (x SRespMyData_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespMyData_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[1].Descriptor()
}

func (SRespMyData_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[1]
}

func (x SRespMyData_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespMyData_ErrCode.Descriptor instead.
func (SRespMyData_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{6, 0}
}

type SRespGameScene_ErrCode int32

const (
	SRespGameScene_None            SRespGameScene_ErrCode = 0
	SRespGameScene_ErrUnknown      SRespGameScene_ErrCode = 1
	SRespGameScene_ErrGameNotFound SRespGameScene_ErrCode = 2
	SRespGameScene_ErrGameOver     SRespGameScene_ErrCode = 3 //游戏已结束
)

// Enum value maps for SRespGameScene_ErrCode.
var (
	SRespGameScene_ErrCode_name = map[int32]string{
		0: "None",
		1: "ErrUnknown",
		2: "ErrGameNotFound",
		3: "ErrGameOver",
	}
	SRespGameScene_ErrCode_value = map[string]int32{
		"None":            0,
		"ErrUnknown":      1,
		"ErrGameNotFound": 2,
		"ErrGameOver":     3,
	}
)

func (x SRespGameScene_ErrCode) Enum() *SRespGameScene_ErrCode {
	p := new(SRespGameScene_ErrCode)
	*p = x
	return p
}

func (x SRespGameScene_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespGameScene_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[2].Descriptor()
}

func (SRespGameScene_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[2]
}

func (x SRespGameScene_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespGameScene_ErrCode.Descriptor instead.
func (SRespGameScene_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{9, 0}
}

type SRespSceneReady_ErrCode int32

const (
	SRespSceneReady_None      SRespSceneReady_ErrCode = 0
	SRespSceneReady_ErrSystem SRespSceneReady_ErrCode = 1
)

// Enum value maps for SRespSceneReady_ErrCode.
var (
	SRespSceneReady_ErrCode_name = map[int32]string{
		0: "None",
		1: "ErrSystem",
	}
	SRespSceneReady_ErrCode_value = map[string]int32{
		"None":      0,
		"ErrSystem": 1,
	}
)

func (x SRespSceneReady_ErrCode) Enum() *SRespSceneReady_ErrCode {
	p := new(SRespSceneReady_ErrCode)
	*p = x
	return p
}

func (x SRespSceneReady_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespSceneReady_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[3].Descriptor()
}

func (SRespSceneReady_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[3]
}

func (x SRespSceneReady_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespSceneReady_ErrCode.Descriptor instead.
func (SRespSceneReady_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{11, 0}
}

type SNoticeOp_OpType int32

const (
	SNoticeOp_Invalid     SNoticeOp_OpType = 0
	SNoticeOp_ActionStart SNoticeOp_OpType = 1 //自己回合 可以操作了
	SNoticeOp_SelectCard  SNoticeOp_OpType = 2 //选择卡牌 指明目标位置
	SNoticeOp_SelectCamp  SNoticeOp_OpType = 3 //选择军营
)

// Enum value maps for SNoticeOp_OpType.
var (
	SNoticeOp_OpType_name = map[int32]string{
		0: "Invalid",
		1: "ActionStart",
		2: "SelectCard",
		3: "SelectCamp",
	}
	SNoticeOp_OpType_value = map[string]int32{
		"Invalid":     0,
		"ActionStart": 1,
		"SelectCard":  2,
		"SelectCamp":  3,
	}
)

func (x SNoticeOp_OpType) Enum() *SNoticeOp_OpType {
	p := new(SNoticeOp_OpType)
	*p = x
	return p
}

func (x SNoticeOp_OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SNoticeOp_OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[4].Descriptor()
}

func (SNoticeOp_OpType) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[4]
}

func (x SNoticeOp_OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SNoticeOp_OpType.Descriptor instead.
func (SNoticeOp_OpType) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{15, 0}
}

type CReqOpt_OpType int32

const (
	CReqOpt_Invalid    CReqOpt_OpType = 0
	CReqOpt_SelectCard CReqOpt_OpType = 1
	CReqOpt_SelectCamp CReqOpt_OpType = 2
)

// Enum value maps for CReqOpt_OpType.
var (
	CReqOpt_OpType_name = map[int32]string{
		0: "Invalid",
		1: "SelectCard",
		2: "SelectCamp",
	}
	CReqOpt_OpType_value = map[string]int32{
		"Invalid":    0,
		"SelectCard": 1,
		"SelectCamp": 2,
	}
)

func (x CReqOpt_OpType) Enum() *CReqOpt_OpType {
	p := new(CReqOpt_OpType)
	*p = x
	return p
}

func (x CReqOpt_OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CReqOpt_OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[5].Descriptor()
}

func (CReqOpt_OpType) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[5]
}

func (x CReqOpt_OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CReqOpt_OpType.Descriptor instead.
func (CReqOpt_OpType) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{16, 0}
}

type SRespOpt_ErrCode int32

const (
	SRespOpt_None                  SRespOpt_ErrCode = 0
	SRespOpt_ErrUnKnow             SRespOpt_ErrCode = 1
	SRespOpt_ErrNotMyTurn          SRespOpt_ErrCode = 2 //不在我的操作时间内
	SRespOpt_ErrSelectCountNotSame SRespOpt_ErrCode = 3 // 选牌数量 不等于 指定的选牌个数
	SRespOpt_ErrSelectType         SRespOpt_ErrCode = 4 // 选牌 类型 错误
)

// Enum value maps for SRespOpt_ErrCode.
var (
	SRespOpt_ErrCode_name = map[int32]string{
		0: "None",
		1: "ErrUnKnow",
		2: "ErrNotMyTurn",
		3: "ErrSelectCountNotSame",
		4: "ErrSelectType",
	}
	SRespOpt_ErrCode_value = map[string]int32{
		"None":                  0,
		"ErrUnKnow":             1,
		"ErrNotMyTurn":          2,
		"ErrSelectCountNotSame": 3,
		"ErrSelectType":         4,
	}
)

func (x SRespOpt_ErrCode) Enum() *SRespOpt_ErrCode {
	p := new(SRespOpt_ErrCode)
	*p = x
	return p
}

func (x SRespOpt_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespOpt_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[6].Descriptor()
}

func (SRespOpt_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[6]
}

func (x SRespOpt_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespOpt_ErrCode.Descriptor instead.
func (SRespOpt_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{17, 0}
}

type SRespAct_ErrCode int32

const (
	SRespAct_None                       SRespAct_ErrCode = 0
	SRespAct_ErrUnKnow                  SRespAct_ErrCode = 1
	SRespAct_ErrInputParam              SRespAct_ErrCode = 2
	SRespAct_ErrCardNotExist            SRespAct_ErrCode = 3 //我无此牌
	SRespAct_ErrTargetPosNotEmpty       SRespAct_ErrCode = 4 //目标位置不为空
	SRespAct_ErrTargetPosNotMyPlaceArea SRespAct_ErrCode = 5 //不是我的放置区域
	SRespAct_ErrAPNotEnough             SRespAct_ErrCode = 6 //行动力不足
	SRespAct_ErrNotMyTurn               SRespAct_ErrCode = 7 //不是我的回合
	SRespAct_ErrDistanceLimit           SRespAct_ErrCode = 8 //距离太长
	SRespAct_ErrCardCfgNotExist         SRespAct_ErrCode = 9
	SRespAct_ErrHeroCfgNotExist         SRespAct_ErrCode = 10 //英雄配置不存在
	SRespAct_ErrSkillCfgNotExist        SRespAct_ErrCode = 11 //英雄配置不存在
	SRespAct_ErrActionNotSupport        SRespAct_ErrCode = 12 //不支持此操作
	SRespAct_ErrCardAlreadyFaceUp       SRespAct_ErrCode = 13 //卡牌已经正面
	SRespAct_ErrCreateFaceUpSkill       SRespAct_ErrCode = 14 //创建翻牌技失败
	SRespAct_ErrTargetPosCardNotExist   SRespAct_ErrCode = 15 //目标位置没有牌
	SRespAct_ErrCampCannotAttack        SRespAct_ErrCode = 16 //军营不可被攻击
	SRespAct_ErrAttackCardNotFaceUp     SRespAct_ErrCode = 17 //背面牌不可攻击
	SRespAct_ErrCardRoundNotEnough      SRespAct_ErrCode = 18 //卡牌于本回合放置，本回合内无法翻面
	SRespAct_ErrAttackCountNotEnough    SRespAct_ErrCode = 19 // 卡牌本回合攻击次数已经用完 ，无法再攻击
	SRespAct_ErrCanNotAttackMyOwnCard   SRespAct_ErrCode = 20 // 不能攻击自己的武将
	SRespAct_ErrCanNotAttackMyOwnCamp   SRespAct_ErrCode = 21 // 不能攻击自己的军营
	SRespAct_ErrActSelectNotRight       SRespAct_ErrCode = 22 //选择操作对象错误
	SRespAct_ErrNoSelectTarget          SRespAct_ErrCode = 23 //翻面技 目标为空
)

// Enum value maps for SRespAct_ErrCode.
var (
	SRespAct_ErrCode_name = map[int32]string{
		0:  "None",
		1:  "ErrUnKnow",
		2:  "ErrInputParam",
		3:  "ErrCardNotExist",
		4:  "ErrTargetPosNotEmpty",
		5:  "ErrTargetPosNotMyPlaceArea",
		6:  "ErrAPNotEnough",
		7:  "ErrNotMyTurn",
		8:  "ErrDistanceLimit",
		9:  "ErrCardCfgNotExist",
		10: "ErrHeroCfgNotExist",
		11: "ErrSkillCfgNotExist",
		12: "ErrActionNotSupport",
		13: "ErrCardAlreadyFaceUp",
		14: "ErrCreateFaceUpSkill",
		15: "ErrTargetPosCardNotExist",
		16: "ErrCampCannotAttack",
		17: "ErrAttackCardNotFaceUp",
		18: "ErrCardRoundNotEnough",
		19: "ErrAttackCountNotEnough",
		20: "ErrCanNotAttackMyOwnCard",
		21: "ErrCanNotAttackMyOwnCamp",
		22: "ErrActSelectNotRight",
		23: "ErrNoSelectTarget",
	}
	SRespAct_ErrCode_value = map[string]int32{
		"None":                       0,
		"ErrUnKnow":                  1,
		"ErrInputParam":              2,
		"ErrCardNotExist":            3,
		"ErrTargetPosNotEmpty":       4,
		"ErrTargetPosNotMyPlaceArea": 5,
		"ErrAPNotEnough":             6,
		"ErrNotMyTurn":               7,
		"ErrDistanceLimit":           8,
		"ErrCardCfgNotExist":         9,
		"ErrHeroCfgNotExist":         10,
		"ErrSkillCfgNotExist":        11,
		"ErrActionNotSupport":        12,
		"ErrCardAlreadyFaceUp":       13,
		"ErrCreateFaceUpSkill":       14,
		"ErrTargetPosCardNotExist":   15,
		"ErrCampCannotAttack":        16,
		"ErrAttackCardNotFaceUp":     17,
		"ErrCardRoundNotEnough":      18,
		"ErrAttackCountNotEnough":    19,
		"ErrCanNotAttackMyOwnCard":   20,
		"ErrCanNotAttackMyOwnCamp":   21,
		"ErrActSelectNotRight":       22,
		"ErrNoSelectTarget":          23,
	}
)

func (x SRespAct_ErrCode) Enum() *SRespAct_ErrCode {
	p := new(SRespAct_ErrCode)
	*p = x
	return p
}

func (x SRespAct_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespAct_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[7].Descriptor()
}

func (SRespAct_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[7]
}

func (x SRespAct_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespAct_ErrCode.Descriptor instead.
func (SRespAct_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{19, 0}
}

type SSyncCard_ChangeType int32

const (
	SSyncCard_None           SSyncCard_ChangeType = 0
	SSyncCard_Place          SSyncCard_ChangeType = 1 //放置
	SSyncCard_FaceUp         SSyncCard_ChangeType = 2
	SSyncCard_HP             SSyncCard_ChangeType = 3
	SSyncCard_HPMax          SSyncCard_ChangeType = 4
	SSyncCard_Attack         SSyncCard_ChangeType = 5
	SSyncCard_Die            SSyncCard_ChangeType = 6
	SSyncCard_Pos            SSyncCard_ChangeType = 7
	SSyncCard_Buff           SSyncCard_ChangeType = 8
	SSyncCard_Skill          SSyncCard_ChangeType = 9  //技能变化（被沉默了)
	SSyncCard_AttackCnt      SSyncCard_ChangeType = 10 //一回合的默认攻击次数
	SSyncCard_FaceDown       SSyncCard_ChangeType = 11 //被重新翻回 背面 //孙权技能
	SSyncCard_AttackDistance SSyncCard_ChangeType = 12 //攻击距离发生变化（军营除外) -1代表不限距离
	SSyncCard_CanFaceUp      SSyncCard_ChangeType = 13 //是否可以翻面
)

// Enum value maps for SSyncCard_ChangeType.
var (
	SSyncCard_ChangeType_name = map[int32]string{
		0:  "None",
		1:  "Place",
		2:  "FaceUp",
		3:  "HP",
		4:  "HPMax",
		5:  "Attack",
		6:  "Die",
		7:  "Pos",
		8:  "Buff",
		9:  "Skill",
		10: "AttackCnt",
		11: "FaceDown",
		12: "AttackDistance",
		13: "CanFaceUp",
	}
	SSyncCard_ChangeType_value = map[string]int32{
		"None":           0,
		"Place":          1,
		"FaceUp":         2,
		"HP":             3,
		"HPMax":          4,
		"Attack":         5,
		"Die":            6,
		"Pos":            7,
		"Buff":           8,
		"Skill":          9,
		"AttackCnt":      10,
		"FaceDown":       11,
		"AttackDistance": 12,
		"CanFaceUp":      13,
	}
)

func (x SSyncCard_ChangeType) Enum() *SSyncCard_ChangeType {
	p := new(SSyncCard_ChangeType)
	*p = x
	return p
}

func (x SSyncCard_ChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSyncCard_ChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[8].Descriptor()
}

func (SSyncCard_ChangeType) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[8]
}

func (x SSyncCard_ChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSyncCard_ChangeType.Descriptor instead.
func (SSyncCard_ChangeType) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{21, 0}
}

type SSyncCamp_ChangeType int32

const (
	SSyncCamp_None             SSyncCamp_ChangeType = 0
	SSyncCamp_HP               SSyncCamp_ChangeType = 1
	SSyncCamp_Attack           SSyncCamp_ChangeType = 2
	SSyncCamp_WeaponAttack     SSyncCamp_ChangeType = 3
	SSyncCamp_WeaponDurability SSyncCamp_ChangeType = 4
	SSyncCamp_Armor            SSyncCamp_ChangeType = 5
	SSyncCamp_Crystal          SSyncCamp_ChangeType = 6
	SSyncCamp_CrystalLimit     SSyncCamp_ChangeType = 7
)

// Enum value maps for SSyncCamp_ChangeType.
var (
	SSyncCamp_ChangeType_name = map[int32]string{
		0: "None",
		1: "HP",
		2: "Attack",
		3: "WeaponAttack",
		4: "WeaponDurability",
		5: "Armor",
		6: "Crystal",
		7: "CrystalLimit",
	}
	SSyncCamp_ChangeType_value = map[string]int32{
		"None":             0,
		"HP":               1,
		"Attack":           2,
		"WeaponAttack":     3,
		"WeaponDurability": 4,
		"Armor":            5,
		"Crystal":          6,
		"CrystalLimit":     7,
	}
)

func (x SSyncCamp_ChangeType) Enum() *SSyncCamp_ChangeType {
	p := new(SSyncCamp_ChangeType)
	*p = x
	return p
}

func (x SSyncCamp_ChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSyncCamp_ChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[9].Descriptor()
}

func (SSyncCamp_ChangeType) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[9]
}

func (x SSyncCamp_ChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSyncCamp_ChangeType.Descriptor instead.
func (SSyncCamp_ChangeType) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{24, 0}
}

type SSyncHandCard_ChangeType int32

const (
	SSyncHandCard_None  SSyncHandCard_ChangeType = 0
	SSyncHandCard_Draw  SSyncHandCard_ChangeType = 1 //抓牌导致的手牌变化
	SSyncHandCard_Skill SSyncHandCard_ChangeType = 2 //技能导致的手牌变化（暂无）
	SSyncHandCard_Place SSyncHandCard_ChangeType = 3 //放置导致的手牌变化
)

// Enum value maps for SSyncHandCard_ChangeType.
var (
	SSyncHandCard_ChangeType_name = map[int32]string{
		0: "None",
		1: "Draw",
		2: "Skill",
		3: "Place",
	}
	SSyncHandCard_ChangeType_value = map[string]int32{
		"None":  0,
		"Draw":  1,
		"Skill": 2,
		"Place": 3,
	}
)

func (x SSyncHandCard_ChangeType) Enum() *SSyncHandCard_ChangeType {
	p := new(SSyncHandCard_ChangeType)
	*p = x
	return p
}

func (x SSyncHandCard_ChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSyncHandCard_ChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[10].Descriptor()
}

func (SSyncHandCard_ChangeType) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[10]
}

func (x SSyncHandCard_ChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSyncHandCard_ChangeType.Descriptor instead.
func (SSyncHandCard_ChangeType) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{25, 0}
}

type SRespCancelCurOpt_ErrCode int32

const (
	SRespCancelCurOpt_None         SRespCancelCurOpt_ErrCode = 0
	SRespCancelCurOpt_ErrNotMyTurn SRespCancelCurOpt_ErrCode = 1 //不在我的操作时间内
)

// Enum value maps for SRespCancelCurOpt_ErrCode.
var (
	SRespCancelCurOpt_ErrCode_name = map[int32]string{
		0: "None",
		1: "ErrNotMyTurn",
	}
	SRespCancelCurOpt_ErrCode_value = map[string]int32{
		"None":         0,
		"ErrNotMyTurn": 1,
	}
)

func (x SRespCancelCurOpt_ErrCode) Enum() *SRespCancelCurOpt_ErrCode {
	p := new(SRespCancelCurOpt_ErrCode)
	*p = x
	return p
}

func (x SRespCancelCurOpt_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespCancelCurOpt_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[11].Descriptor()
}

func (SRespCancelCurOpt_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[11]
}

func (x SRespCancelCurOpt_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespCancelCurOpt_ErrCode.Descriptor instead.
func (SRespCancelCurOpt_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{29, 0}
}

type SSyncPlayerState_ChangeType int32

const (
	SSyncPlayerState_Invalid       SSyncPlayerState_ChangeType = 0
	SSyncPlayerState_HP            SSyncPlayerState_ChangeType = 1 //(将废除）
	SSyncPlayerState_Die           SSyncPlayerState_ChangeType = 2
	SSyncPlayerState_State         SSyncPlayerState_ChangeType = 3 //玩家状态变化
	SSyncPlayerState_AP            SSyncPlayerState_ChangeType = 4 //行动力变化
	SSyncPlayerState_CardPoolCount SSyncPlayerState_ChangeType = 5 //牌库数量
)

// Enum value maps for SSyncPlayerState_ChangeType.
var (
	SSyncPlayerState_ChangeType_name = map[int32]string{
		0: "Invalid",
		1: "HP",
		2: "Die",
		3: "State",
		4: "AP",
		5: "CardPoolCount",
	}
	SSyncPlayerState_ChangeType_value = map[string]int32{
		"Invalid":       0,
		"HP":            1,
		"Die":           2,
		"State":         3,
		"AP":            4,
		"CardPoolCount": 5,
	}
)

func (x SSyncPlayerState_ChangeType) Enum() *SSyncPlayerState_ChangeType {
	p := new(SSyncPlayerState_ChangeType)
	*p = x
	return p
}

func (x SSyncPlayerState_ChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSyncPlayerState_ChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[12].Descriptor()
}

func (SSyncPlayerState_ChangeType) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[12]
}

func (x SSyncPlayerState_ChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSyncPlayerState_ChangeType.Descriptor instead.
func (SSyncPlayerState_ChangeType) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{32, 0}
}

type SRespChat_ErrCode int32

const (
	SRespChat_None               SRespChat_ErrCode = 0
	SRespChat_ErrNotInRoom       SRespChat_ErrCode = 1 //不在房间中
	SRespChat_ErrTargetNotOnline SRespChat_ErrCode = 2 //对方不在线
	SRespChat_ErrNotSupport      SRespChat_ErrCode = 3 //暂不支持
	SRespChat_ErrWordFilterError SRespChat_ErrCode = 4 //敏感词过滤系统报错
	SRespChat_ErrNotInGame       SRespChat_ErrCode = 5 //不在游戏中
)

// Enum value maps for SRespChat_ErrCode.
var (
	SRespChat_ErrCode_name = map[int32]string{
		0: "None",
		1: "ErrNotInRoom",
		2: "ErrTargetNotOnline",
		3: "ErrNotSupport",
		4: "ErrWordFilterError",
		5: "ErrNotInGame",
	}
	SRespChat_ErrCode_value = map[string]int32{
		"None":               0,
		"ErrNotInRoom":       1,
		"ErrTargetNotOnline": 2,
		"ErrNotSupport":      3,
		"ErrWordFilterError": 4,
		"ErrNotInGame":       5,
	}
)

func (x SRespChat_ErrCode) Enum() *SRespChat_ErrCode {
	p := new(SRespChat_ErrCode)
	*p = x
	return p
}

func (x SRespChat_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespChat_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[13].Descriptor()
}

func (SRespChat_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[13]
}

func (x SRespChat_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespChat_ErrCode.Descriptor instead.
func (SRespChat_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{37, 0}
}

type SRespMyRoom_ErrCode int32

const (
	SRespMyRoom_None       SRespMyRoom_ErrCode = 0
	SRespMyRoom_ErrUnknown SRespMyRoom_ErrCode = 1
)

// Enum value maps for SRespMyRoom_ErrCode.
var (
	SRespMyRoom_ErrCode_name = map[int32]string{
		0: "None",
		1: "ErrUnknown",
	}
	SRespMyRoom_ErrCode_value = map[string]int32{
		"None":       0,
		"ErrUnknown": 1,
	}
)

func (x SRespMyRoom_ErrCode) Enum() *SRespMyRoom_ErrCode {
	p := new(SRespMyRoom_ErrCode)
	*p = x
	return p
}

func (x SRespMyRoom_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespMyRoom_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[14].Descriptor()
}

func (SRespMyRoom_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[14]
}

func (x SRespMyRoom_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespMyRoom_ErrCode.Descriptor instead.
func (SRespMyRoom_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{40, 0}
}

type SRespRoomCreate_ErrCode int32

const (
	SRespRoomCreate_None             SRespRoomCreate_ErrCode = 0
	SRespRoomCreate_ErrUnknown       SRespRoomCreate_ErrCode = 1
	SRespRoomCreate_ErrAlreadyInRoom SRespRoomCreate_ErrCode = 2 //已在房间中
	SRespRoomCreate_ErrAlreadyInGame SRespRoomCreate_ErrCode = 3 //已在游戏中
	SRespRoomCreate_ErrRoomSetting   SRespRoomCreate_ErrCode = 4 //房间参数错误
	SRespRoomCreate_ErrCreateRoom    SRespRoomCreate_ErrCode = 5 //创建房间失败
	SRespRoomCreate_ErrSitDownFail   SRespRoomCreate_ErrCode = 6
)

// Enum value maps for SRespRoomCreate_ErrCode.
var (
	SRespRoomCreate_ErrCode_name = map[int32]string{
		0: "None",
		1: "ErrUnknown",
		2: "ErrAlreadyInRoom",
		3: "ErrAlreadyInGame",
		4: "ErrRoomSetting",
		5: "ErrCreateRoom",
		6: "ErrSitDownFail",
	}
	SRespRoomCreate_ErrCode_value = map[string]int32{
		"None":             0,
		"ErrUnknown":       1,
		"ErrAlreadyInRoom": 2,
		"ErrAlreadyInGame": 3,
		"ErrRoomSetting":   4,
		"ErrCreateRoom":    5,
		"ErrSitDownFail":   6,
	}
)

func (x SRespRoomCreate_ErrCode) Enum() *SRespRoomCreate_ErrCode {
	p := new(SRespRoomCreate_ErrCode)
	*p = x
	return p
}

func (x SRespRoomCreate_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespRoomCreate_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[15].Descriptor()
}

func (SRespRoomCreate_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[15]
}

func (x SRespRoomCreate_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespRoomCreate_ErrCode.Descriptor instead.
func (SRespRoomCreate_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{42, 0}
}

type SRespRoomQuickJoin_ErrCode int32

const (
	SRespRoomQuickJoin_None             SRespRoomQuickJoin_ErrCode = 0
	SRespRoomQuickJoin_ErrUnknown       SRespRoomQuickJoin_ErrCode = 1
	SRespRoomQuickJoin_ErrAlreadyInGame SRespRoomQuickJoin_ErrCode = 2 //已在游戏中
	SRespRoomQuickJoin_ErrCreateRoom    SRespRoomQuickJoin_ErrCode = 3 //创建房间失败
	SRespRoomQuickJoin_ErrSitDownFail   SRespRoomQuickJoin_ErrCode = 6
)

// Enum value maps for SRespRoomQuickJoin_ErrCode.
var (
	SRespRoomQuickJoin_ErrCode_name = map[int32]string{
		0: "None",
		1: "ErrUnknown",
		2: "ErrAlreadyInGame",
		3: "ErrCreateRoom",
		6: "ErrSitDownFail",
	}
	SRespRoomQuickJoin_ErrCode_value = map[string]int32{
		"None":             0,
		"ErrUnknown":       1,
		"ErrAlreadyInGame": 2,
		"ErrCreateRoom":    3,
		"ErrSitDownFail":   6,
	}
)

func (x SRespRoomQuickJoin_ErrCode) Enum() *SRespRoomQuickJoin_ErrCode {
	p := new(SRespRoomQuickJoin_ErrCode)
	*p = x
	return p
}

func (x SRespRoomQuickJoin_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespRoomQuickJoin_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[16].Descriptor()
}

func (SRespRoomQuickJoin_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[16]
}

func (x SRespRoomQuickJoin_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespRoomQuickJoin_ErrCode.Descriptor instead.
func (SRespRoomQuickJoin_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{44, 0}
}

type SRespRoomSettingChange_ErrCode int32

const (
	SRespRoomSettingChange_None               SRespRoomSettingChange_ErrCode = 0
	SRespRoomSettingChange_ErrUnknown         SRespRoomSettingChange_ErrCode = 1
	SRespRoomSettingChange_ErrNoAuthority     SRespRoomSettingChange_ErrCode = 2 //无权限
	SRespRoomSettingChange_ErrAlreadyInGame   SRespRoomSettingChange_ErrCode = 3 //房间游戏中
	SRespRoomSettingChange_ErrNotInRoom       SRespRoomSettingChange_ErrCode = 4 //不在房间中
	SRespRoomSettingChange_ErrRoomSetting     SRespRoomSettingChange_ErrCode = 5 //配置参数不对
	SRespRoomSettingChange_ErrChangeSeatCount SRespRoomSettingChange_ErrCode = 6 //座位数量更改失败
)

// Enum value maps for SRespRoomSettingChange_ErrCode.
var (
	SRespRoomSettingChange_ErrCode_name = map[int32]string{
		0: "None",
		1: "ErrUnknown",
		2: "ErrNoAuthority",
		3: "ErrAlreadyInGame",
		4: "ErrNotInRoom",
		5: "ErrRoomSetting",
		6: "ErrChangeSeatCount",
	}
	SRespRoomSettingChange_ErrCode_value = map[string]int32{
		"None":               0,
		"ErrUnknown":         1,
		"ErrNoAuthority":     2,
		"ErrAlreadyInGame":   3,
		"ErrNotInRoom":       4,
		"ErrRoomSetting":     5,
		"ErrChangeSeatCount": 6,
	}
)

func (x SRespRoomSettingChange_ErrCode) Enum() *SRespRoomSettingChange_ErrCode {
	p := new(SRespRoomSettingChange_ErrCode)
	*p = x
	return p
}

func (x SRespRoomSettingChange_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespRoomSettingChange_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[17].Descriptor()
}

func (SRespRoomSettingChange_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[17]
}

func (x SRespRoomSettingChange_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespRoomSettingChange_ErrCode.Descriptor instead.
func (SRespRoomSettingChange_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{46, 0}
}

type SRespRoomJoin_ErrCode int32

const (
	SRespRoomJoin_None                  SRespRoomJoin_ErrCode = 0
	SRespRoomJoin_ErrUnknown            SRespRoomJoin_ErrCode = 1
	SRespRoomJoin_ErrRoomNotExist       SRespRoomJoin_ErrCode = 2
	SRespRoomJoin_ErrRoomFull           SRespRoomJoin_ErrCode = 3
	SRespRoomJoin_ErrRoomInGame         SRespRoomJoin_ErrCode = 4
	SRespRoomJoin_ErrRoomNotAllowEnter  SRespRoomJoin_ErrCode = 5
	SRespRoomJoin_ErrSitDownFail        SRespRoomJoin_ErrCode = 6
	SRespRoomJoin_ErrAlreadyLooker      SRespRoomJoin_ErrCode = 7
	SRespRoomJoin_ErrPlayerInGame       SRespRoomJoin_ErrCode = 8
	SRespRoomJoin_ErrCanNotFindLookSeat SRespRoomJoin_ErrCode = 9
	SRespRoomJoin_ErrSitLookerFailed    SRespRoomJoin_ErrCode = 10
)

// Enum value maps for SRespRoomJoin_ErrCode.
var (
	SRespRoomJoin_ErrCode_name = map[int32]string{
		0:  "None",
		1:  "ErrUnknown",
		2:  "ErrRoomNotExist",
		3:  "ErrRoomFull",
		4:  "ErrRoomInGame",
		5:  "ErrRoomNotAllowEnter",
		6:  "ErrSitDownFail",
		7:  "ErrAlreadyLooker",
		8:  "ErrPlayerInGame",
		9:  "ErrCanNotFindLookSeat",
		10: "ErrSitLookerFailed",
	}
	SRespRoomJoin_ErrCode_value = map[string]int32{
		"None":                  0,
		"ErrUnknown":            1,
		"ErrRoomNotExist":       2,
		"ErrRoomFull":           3,
		"ErrRoomInGame":         4,
		"ErrRoomNotAllowEnter":  5,
		"ErrSitDownFail":        6,
		"ErrAlreadyLooker":      7,
		"ErrPlayerInGame":       8,
		"ErrCanNotFindLookSeat": 9,
		"ErrSitLookerFailed":    10,
	}
)

func (x SRespRoomJoin_ErrCode) Enum() *SRespRoomJoin_ErrCode {
	p := new(SRespRoomJoin_ErrCode)
	*p = x
	return p
}

func (x SRespRoomJoin_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespRoomJoin_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[18].Descriptor()
}

func (SRespRoomJoin_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[18]
}

func (x SRespRoomJoin_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespRoomJoin_ErrCode.Descriptor instead.
func (SRespRoomJoin_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{48, 0}
}

type SRespRoomSeatChange_ErrCode int32

const (
	SRespRoomSeatChange_None                          SRespRoomSeatChange_ErrCode = 0
	SRespRoomSeatChange_ErrUnknown                    SRespRoomSeatChange_ErrCode = 1
	SRespRoomSeatChange_ErrNotInRoom                  SRespRoomSeatChange_ErrCode = 2 //不在房间中
	SRespRoomSeatChange_ErrTargetSeatNotExist         SRespRoomSeatChange_ErrCode = 3 //目标座位不存在
	SRespRoomSeatChange_ErrTargetSeatAlreadySeated    SRespRoomSeatChange_ErrCode = 4 //目标座位已有人
	SRespRoomSeatChange_ErrSitUpFail_AlreadySitUp     SRespRoomSeatChange_ErrCode = 5 //已是旁观者，站起失败
	SRespRoomSeatChange_ErrSitDownFail_AlreadySitDown SRespRoomSeatChange_ErrCode = 6 //坐下失败,已是座位者
	SRespRoomSeatChange_ErrSitUpFail_IsLastUser       SRespRoomSeatChange_ErrCode = 7 //场上只有一个玩家时，不许站起
)

// Enum value maps for SRespRoomSeatChange_ErrCode.
var (
	SRespRoomSeatChange_ErrCode_name = map[int32]string{
		0: "None",
		1: "ErrUnknown",
		2: "ErrNotInRoom",
		3: "ErrTargetSeatNotExist",
		4: "ErrTargetSeatAlreadySeated",
		5: "ErrSitUpFail_AlreadySitUp",
		6: "ErrSitDownFail_AlreadySitDown",
		7: "ErrSitUpFail_IsLastUser",
	}
	SRespRoomSeatChange_ErrCode_value = map[string]int32{
		"None":                          0,
		"ErrUnknown":                    1,
		"ErrNotInRoom":                  2,
		"ErrTargetSeatNotExist":         3,
		"ErrTargetSeatAlreadySeated":    4,
		"ErrSitUpFail_AlreadySitUp":     5,
		"ErrSitDownFail_AlreadySitDown": 6,
		"ErrSitUpFail_IsLastUser":       7,
	}
)

func (x SRespRoomSeatChange_ErrCode) Enum() *SRespRoomSeatChange_ErrCode {
	p := new(SRespRoomSeatChange_ErrCode)
	*p = x
	return p
}

func (x SRespRoomSeatChange_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespRoomSeatChange_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[19].Descriptor()
}

func (SRespRoomSeatChange_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[19]
}

func (x SRespRoomSeatChange_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespRoomSeatChange_ErrCode.Descriptor instead.
func (SRespRoomSeatChange_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{50, 0}
}

type SRespRoomLookerInfo_ErrCode int32

const (
	SRespRoomLookerInfo_None         SRespRoomLookerInfo_ErrCode = 0
	SRespRoomLookerInfo_ErrUnknown   SRespRoomLookerInfo_ErrCode = 1
	SRespRoomLookerInfo_ErrNotInRoom SRespRoomLookerInfo_ErrCode = 2 //不在房间中
)

// Enum value maps for SRespRoomLookerInfo_ErrCode.
var (
	SRespRoomLookerInfo_ErrCode_name = map[int32]string{
		0: "None",
		1: "ErrUnknown",
		2: "ErrNotInRoom",
	}
	SRespRoomLookerInfo_ErrCode_value = map[string]int32{
		"None":         0,
		"ErrUnknown":   1,
		"ErrNotInRoom": 2,
	}
)

func (x SRespRoomLookerInfo_ErrCode) Enum() *SRespRoomLookerInfo_ErrCode {
	p := new(SRespRoomLookerInfo_ErrCode)
	*p = x
	return p
}

func (x SRespRoomLookerInfo_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespRoomLookerInfo_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[20].Descriptor()
}

func (SRespRoomLookerInfo_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[20]
}

func (x SRespRoomLookerInfo_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespRoomLookerInfo_ErrCode.Descriptor instead.
func (SRespRoomLookerInfo_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{52, 0}
}

type SRespRoomReady_ErrCode int32

const (
	SRespRoomReady_None                SRespRoomReady_ErrCode = 0
	SRespRoomReady_ErrUnknown          SRespRoomReady_ErrCode = 1
	SRespRoomReady_ErrNotInRoom        SRespRoomReady_ErrCode = 2
	SRespRoomReady_ErrRoomInGame       SRespRoomReady_ErrCode = 3
	SRespRoomReady_ErrOwnerNoNeedReady SRespRoomReady_ErrCode = 4 //房主不需要准备
)

// Enum value maps for SRespRoomReady_ErrCode.
var (
	SRespRoomReady_ErrCode_name = map[int32]string{
		0: "None",
		1: "ErrUnknown",
		2: "ErrNotInRoom",
		3: "ErrRoomInGame",
		4: "ErrOwnerNoNeedReady",
	}
	SRespRoomReady_ErrCode_value = map[string]int32{
		"None":                0,
		"ErrUnknown":          1,
		"ErrNotInRoom":        2,
		"ErrRoomInGame":       3,
		"ErrOwnerNoNeedReady": 4,
	}
)

func (x SRespRoomReady_ErrCode) Enum() *SRespRoomReady_ErrCode {
	p := new(SRespRoomReady_ErrCode)
	*p = x
	return p
}

func (x SRespRoomReady_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespRoomReady_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[21].Descriptor()
}

func (SRespRoomReady_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[21]
}

func (x SRespRoomReady_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespRoomReady_ErrCode.Descriptor instead.
func (SRespRoomReady_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{54, 0}
}

type SRespRoomLeave_ErrCode int32

const (
	SRespRoomLeave_None         SRespRoomLeave_ErrCode = 0
	SRespRoomLeave_ErrUnknown   SRespRoomLeave_ErrCode = 1
	SRespRoomLeave_ErrNotInRoom SRespRoomLeave_ErrCode = 2
)

// Enum value maps for SRespRoomLeave_ErrCode.
var (
	SRespRoomLeave_ErrCode_name = map[int32]string{
		0: "None",
		1: "ErrUnknown",
		2: "ErrNotInRoom",
	}
	SRespRoomLeave_ErrCode_value = map[string]int32{
		"None":         0,
		"ErrUnknown":   1,
		"ErrNotInRoom": 2,
	}
)

func (x SRespRoomLeave_ErrCode) Enum() *SRespRoomLeave_ErrCode {
	p := new(SRespRoomLeave_ErrCode)
	*p = x
	return p
}

func (x SRespRoomLeave_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespRoomLeave_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[22].Descriptor()
}

func (SRespRoomLeave_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[22]
}

func (x SRespRoomLeave_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespRoomLeave_ErrCode.Descriptor instead.
func (SRespRoomLeave_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{56, 0}
}

type SRespRoomKick_ErrCode int32

const (
	SRespRoomKick_None               SRespRoomKick_ErrCode = 0
	SRespRoomKick_ErrUnknown         SRespRoomKick_ErrCode = 1
	SRespRoomKick_ErrNoSeat          SRespRoomKick_ErrCode = 2 //此位无人可T
	SRespRoomKick_ErrNoAuthority     SRespRoomKick_ErrCode = 3 //无权限
	SRespRoomKick_ErrNotInRoom       SRespRoomKick_ErrCode = 4 //不在房间中
	SRespRoomKick_ErrRoomInGame      SRespRoomKick_ErrCode = 5 //房间正在游戏中
	SRespRoomKick_ErrTargetNotInRoom SRespRoomKick_ErrCode = 6 //被T对象不在房间中
)

// Enum value maps for SRespRoomKick_ErrCode.
var (
	SRespRoomKick_ErrCode_name = map[int32]string{
		0: "None",
		1: "ErrUnknown",
		2: "ErrNoSeat",
		3: "ErrNoAuthority",
		4: "ErrNotInRoom",
		5: "ErrRoomInGame",
		6: "ErrTargetNotInRoom",
	}
	SRespRoomKick_ErrCode_value = map[string]int32{
		"None":               0,
		"ErrUnknown":         1,
		"ErrNoSeat":          2,
		"ErrNoAuthority":     3,
		"ErrNotInRoom":       4,
		"ErrRoomInGame":      5,
		"ErrTargetNotInRoom": 6,
	}
)

func (x SRespRoomKick_ErrCode) Enum() *SRespRoomKick_ErrCode {
	p := new(SRespRoomKick_ErrCode)
	*p = x
	return p
}

func (x SRespRoomKick_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespRoomKick_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[23].Descriptor()
}

func (SRespRoomKick_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[23]
}

func (x SRespRoomKick_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespRoomKick_ErrCode.Descriptor instead.
func (SRespRoomKick_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{58, 0}
}

type SNoticeRoomTimer_NoticeType int32

const (
	SNoticeRoomTimer_Invalid          SNoticeRoomTimer_NoticeType = 0
	SNoticeRoomTimer_ReadyTimerStart  SNoticeRoomTimer_NoticeType = 1 //准备倒计时生效
	SNoticeRoomTimer_ReadyTimerCancel SNoticeRoomTimer_NoticeType = 2 //准备倒计时取消
)

// Enum value maps for SNoticeRoomTimer_NoticeType.
var (
	SNoticeRoomTimer_NoticeType_name = map[int32]string{
		0: "Invalid",
		1: "ReadyTimerStart",
		2: "ReadyTimerCancel",
	}
	SNoticeRoomTimer_NoticeType_value = map[string]int32{
		"Invalid":          0,
		"ReadyTimerStart":  1,
		"ReadyTimerCancel": 2,
	}
)

func (x SNoticeRoomTimer_NoticeType) Enum() *SNoticeRoomTimer_NoticeType {
	p := new(SNoticeRoomTimer_NoticeType)
	*p = x
	return p
}

func (x SNoticeRoomTimer_NoticeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SNoticeRoomTimer_NoticeType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[24].Descriptor()
}

func (SNoticeRoomTimer_NoticeType) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[24]
}

func (x SNoticeRoomTimer_NoticeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SNoticeRoomTimer_NoticeType.Descriptor instead.
func (SNoticeRoomTimer_NoticeType) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{59, 0}
}

type SNoticeRoomKick_KickTyp int32

const (
	SNoticeRoomKick_Invalid      SNoticeRoomKick_KickTyp = 0
	SNoticeRoomKick_MatchGameEnd SNoticeRoomKick_KickTyp = 1
)

// Enum value maps for SNoticeRoomKick_KickTyp.
var (
	SNoticeRoomKick_KickTyp_name = map[int32]string{
		0: "Invalid",
		1: "MatchGameEnd",
	}
	SNoticeRoomKick_KickTyp_value = map[string]int32{
		"Invalid":      0,
		"MatchGameEnd": 1,
	}
)

func (x SNoticeRoomKick_KickTyp) Enum() *SNoticeRoomKick_KickTyp {
	p := new(SNoticeRoomKick_KickTyp)
	*p = x
	return p
}

func (x SNoticeRoomKick_KickTyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SNoticeRoomKick_KickTyp) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[25].Descriptor()
}

func (SNoticeRoomKick_KickTyp) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[25]
}

func (x SNoticeRoomKick_KickTyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SNoticeRoomKick_KickTyp.Descriptor instead.
func (SNoticeRoomKick_KickTyp) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{60, 0}
}

type SRespRoomStartGame_ErrCode int32

const (
	SRespRoomStartGame_None              SRespRoomStartGame_ErrCode = 0
	SRespRoomStartGame_ErrUnknown        SRespRoomStartGame_ErrCode = 1
	SRespRoomStartGame_ErrNoAuthority    SRespRoomStartGame_ErrCode = 2 //无权限
	SRespRoomStartGame_ErrNotInRoom      SRespRoomStartGame_ErrCode = 3
	SRespRoomStartGame_ErrRoomInGame     SRespRoomStartGame_ErrCode = 4
	SRespRoomStartGame_ErrCreateGameFail SRespRoomStartGame_ErrCode = 5
	SRespRoomStartGame_ErrNotAllReady    SRespRoomStartGame_ErrCode = 6
)

// Enum value maps for SRespRoomStartGame_ErrCode.
var (
	SRespRoomStartGame_ErrCode_name = map[int32]string{
		0: "None",
		1: "ErrUnknown",
		2: "ErrNoAuthority",
		3: "ErrNotInRoom",
		4: "ErrRoomInGame",
		5: "ErrCreateGameFail",
		6: "ErrNotAllReady",
	}
	SRespRoomStartGame_ErrCode_value = map[string]int32{
		"None":              0,
		"ErrUnknown":        1,
		"ErrNoAuthority":    2,
		"ErrNotInRoom":      3,
		"ErrRoomInGame":     4,
		"ErrCreateGameFail": 5,
		"ErrNotAllReady":    6,
	}
)

func (x SRespRoomStartGame_ErrCode) Enum() *SRespRoomStartGame_ErrCode {
	p := new(SRespRoomStartGame_ErrCode)
	*p = x
	return p
}

func (x SRespRoomStartGame_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespRoomStartGame_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[26].Descriptor()
}

func (SRespRoomStartGame_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[26]
}

func (x SRespRoomStartGame_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespRoomStartGame_ErrCode.Descriptor instead.
func (SRespRoomStartGame_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{63, 0}
}

type SNotifyRoomChange_Action int32

const (
	SNotifyRoomChange_Invalid       SNotifyRoomChange_Action = 0
	SNotifyRoomChange_SitDown       SNotifyRoomChange_Action = 1
	SNotifyRoomChange_Leave         SNotifyRoomChange_Action = 2 //主动离开
	SNotifyRoomChange_LeaveByKick   SNotifyRoomChange_Action = 3 //被T出离开
	SNotifyRoomChange_OwnerChange   SNotifyRoomChange_Action = 4 //房主换了
	SNotifyRoomChange_Ready         SNotifyRoomChange_Action = 5 //有人准备
	SNotifyRoomChange_ReadyCancel   SNotifyRoomChange_Action = 6 //有人取消准备
	SNotifyRoomChange_SettingChange SNotifyRoomChange_Action = 7 //配置更改
	SNotifyRoomChange_SitUpToLooker SNotifyRoomChange_Action = 8 //有人变成旁观者
)

// Enum value maps for SNotifyRoomChange_Action.
var (
	SNotifyRoomChange_Action_name = map[int32]string{
		0: "Invalid",
		1: "SitDown",
		2: "Leave",
		3: "LeaveByKick",
		4: "OwnerChange",
		5: "Ready",
		6: "ReadyCancel",
		7: "SettingChange",
		8: "SitUpToLooker",
	}
	SNotifyRoomChange_Action_value = map[string]int32{
		"Invalid":       0,
		"SitDown":       1,
		"Leave":         2,
		"LeaveByKick":   3,
		"OwnerChange":   4,
		"Ready":         5,
		"ReadyCancel":   6,
		"SettingChange": 7,
		"SitUpToLooker": 8,
	}
)

func (x SNotifyRoomChange_Action) Enum() *SNotifyRoomChange_Action {
	p := new(SNotifyRoomChange_Action)
	*p = x
	return p
}

func (x SNotifyRoomChange_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SNotifyRoomChange_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[27].Descriptor()
}

func (SNotifyRoomChange_Action) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[27]
}

func (x SNotifyRoomChange_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SNotifyRoomChange_Action.Descriptor instead.
func (SNotifyRoomChange_Action) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{64, 0}
}

type SNoticeRoomEvent_Event int32

const (
	SNoticeRoomEvent_Invalid SNoticeRoomEvent_Event = 0
	SNoticeRoomEvent_Enter   SNoticeRoomEvent_Event = 1 //有人进入
	SNoticeRoomEvent_Leave   SNoticeRoomEvent_Event = 2 //有人退出
	SNoticeRoomEvent_SitFull SNoticeRoomEvent_Event = 3 //座位坐满
)

// Enum value maps for SNoticeRoomEvent_Event.
var (
	SNoticeRoomEvent_Event_name = map[int32]string{
		0: "Invalid",
		1: "Enter",
		2: "Leave",
		3: "SitFull",
	}
	SNoticeRoomEvent_Event_value = map[string]int32{
		"Invalid": 0,
		"Enter":   1,
		"Leave":   2,
		"SitFull": 3,
	}
)

func (x SNoticeRoomEvent_Event) Enum() *SNoticeRoomEvent_Event {
	p := new(SNoticeRoomEvent_Event)
	*p = x
	return p
}

func (x SNoticeRoomEvent_Event) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SNoticeRoomEvent_Event) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[28].Descriptor()
}

func (SNoticeRoomEvent_Event) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[28]
}

func (x SNoticeRoomEvent_Event) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SNoticeRoomEvent_Event.Descriptor instead.
func (SNoticeRoomEvent_Event) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{65, 0}
}

type SRespCommonError_ErrCode int32

const (
	SRespCommonError_None              SRespCommonError_ErrCode = 0
	SRespCommonError_SessionNotInLobby SRespCommonError_ErrCode = 1 //不在大厅
	SRespCommonError_LookerCannotOp    SRespCommonError_ErrCode = 2 //旁观者不可操作
	SRespCommonError_SessionNotInGame  SRespCommonError_ErrCode = 3 //不在游戏中
)

// Enum value maps for SRespCommonError_ErrCode.
var (
	SRespCommonError_ErrCode_name = map[int32]string{
		0: "None",
		1: "SessionNotInLobby",
		2: "LookerCannotOp",
		3: "SessionNotInGame",
	}
	SRespCommonError_ErrCode_value = map[string]int32{
		"None":              0,
		"SessionNotInLobby": 1,
		"LookerCannotOp":    2,
		"SessionNotInGame":  3,
	}
)

func (x SRespCommonError_ErrCode) Enum() *SRespCommonError_ErrCode {
	p := new(SRespCommonError_ErrCode)
	*p = x
	return p
}

func (x SRespCommonError_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespCommonError_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[29].Descriptor()
}

func (SRespCommonError_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[29]
}

func (x SRespCommonError_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespCommonError_ErrCode.Descriptor instead.
func (SRespCommonError_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{70, 0}
}

type CReqMatch_ModeID int32

const (
	CReqMatch_ModeNone  CReqMatch_ModeID = 0
	CReqMatch_ModeText  CReqMatch_ModeID = 1 //文字场
	CReqMatch_ModeVoice CReqMatch_ModeID = 2 //语音场
)

// Enum value maps for CReqMatch_ModeID.
var (
	CReqMatch_ModeID_name = map[int32]string{
		0: "ModeNone",
		1: "ModeText",
		2: "ModeVoice",
	}
	CReqMatch_ModeID_value = map[string]int32{
		"ModeNone":  0,
		"ModeText":  1,
		"ModeVoice": 2,
	}
)

func (x CReqMatch_ModeID) Enum() *CReqMatch_ModeID {
	p := new(CReqMatch_ModeID)
	*p = x
	return p
}

func (x CReqMatch_ModeID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CReqMatch_ModeID) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[30].Descriptor()
}

func (CReqMatch_ModeID) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[30]
}

func (x CReqMatch_ModeID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CReqMatch_ModeID.Descriptor instead.
func (CReqMatch_ModeID) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{71, 0}
}

type SRespMatch_ErrCode int32

const (
	SRespMatch_None    SRespMatch_ErrCode = 0
	SRespMatch_Success SRespMatch_ErrCode = 1
	SRespMatch_Failed  SRespMatch_ErrCode = 2
)

// Enum value maps for SRespMatch_ErrCode.
var (
	SRespMatch_ErrCode_name = map[int32]string{
		0: "None",
		1: "Success",
		2: "Failed",
	}
	SRespMatch_ErrCode_value = map[string]int32{
		"None":    0,
		"Success": 1,
		"Failed":  2,
	}
)

func (x SRespMatch_ErrCode) Enum() *SRespMatch_ErrCode {
	p := new(SRespMatch_ErrCode)
	*p = x
	return p
}

func (x SRespMatch_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespMatch_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[31].Descriptor()
}

func (SRespMatch_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[31]
}

func (x SRespMatch_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespMatch_ErrCode.Descriptor instead.
func (SRespMatch_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{72, 0}
}

type SNoticeMatchResult_NoticeType int32

const (
	SNoticeMatchResult_Invalid        SNoticeMatchResult_NoticeType = 0
	SNoticeMatchResult_MatchSucess    SNoticeMatchResult_NoticeType = 1
	SNoticeMatchResult_MatchStartGame SNoticeMatchResult_NoticeType = 2
)

// Enum value maps for SNoticeMatchResult_NoticeType.
var (
	SNoticeMatchResult_NoticeType_name = map[int32]string{
		0: "Invalid",
		1: "MatchSucess",
		2: "MatchStartGame",
	}
	SNoticeMatchResult_NoticeType_value = map[string]int32{
		"Invalid":        0,
		"MatchSucess":    1,
		"MatchStartGame": 2,
	}
)

func (x SNoticeMatchResult_NoticeType) Enum() *SNoticeMatchResult_NoticeType {
	p := new(SNoticeMatchResult_NoticeType)
	*p = x
	return p
}

func (x SNoticeMatchResult_NoticeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SNoticeMatchResult_NoticeType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[32].Descriptor()
}

func (SNoticeMatchResult_NoticeType) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[32]
}

func (x SNoticeMatchResult_NoticeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SNoticeMatchResult_NoticeType.Descriptor instead.
func (SNoticeMatchResult_NoticeType) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{73, 0}
}

type SRespCancelMatch_ErrCode int32

const (
	SRespCancelMatch_None    SRespCancelMatch_ErrCode = 0
	SRespCancelMatch_Failed  SRespCancelMatch_ErrCode = 1
	SRespCancelMatch_Success SRespCancelMatch_ErrCode = 2
)

// Enum value maps for SRespCancelMatch_ErrCode.
var (
	SRespCancelMatch_ErrCode_name = map[int32]string{
		0: "None",
		1: "Failed",
		2: "Success",
	}
	SRespCancelMatch_ErrCode_value = map[string]int32{
		"None":    0,
		"Failed":  1,
		"Success": 2,
	}
)

func (x SRespCancelMatch_ErrCode) Enum() *SRespCancelMatch_ErrCode {
	p := new(SRespCancelMatch_ErrCode)
	*p = x
	return p
}

func (x SRespCancelMatch_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespCancelMatch_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[33].Descriptor()
}

func (SRespCancelMatch_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[33]
}

func (x SRespCancelMatch_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespCancelMatch_ErrCode.Descriptor instead.
func (SRespCancelMatch_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{75, 0}
}

type CCardGroupOpt_OptType int32

const (
	CCardGroupOpt_OptNone   CCardGroupOpt_OptType = 0
	CCardGroupOpt_OptCreat  CCardGroupOpt_OptType = 1
	CCardGroupOpt_OptModify CCardGroupOpt_OptType = 2
	CCardGroupOpt_OptSelect CCardGroupOpt_OptType = 3
)

// Enum value maps for CCardGroupOpt_OptType.
var (
	CCardGroupOpt_OptType_name = map[int32]string{
		0: "OptNone",
		1: "OptCreat",
		2: "OptModify",
		3: "OptSelect",
	}
	CCardGroupOpt_OptType_value = map[string]int32{
		"OptNone":   0,
		"OptCreat":  1,
		"OptModify": 2,
		"OptSelect": 3,
	}
)

func (x CCardGroupOpt_OptType) Enum() *CCardGroupOpt_OptType {
	p := new(CCardGroupOpt_OptType)
	*p = x
	return p
}

func (x CCardGroupOpt_OptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CCardGroupOpt_OptType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[34].Descriptor()
}

func (CCardGroupOpt_OptType) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[34]
}

func (x CCardGroupOpt_OptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CCardGroupOpt_OptType.Descriptor instead.
func (CCardGroupOpt_OptType) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{76, 0}
}

type SRespCardGroupOpt_ErrCode int32

const (
	SRespCardGroupOpt_ErrNone       SRespCardGroupOpt_ErrCode = 0
	SRespCardGroupOpt_ErrCardsCount SRespCardGroupOpt_ErrCode = 1 //卡牌数量不符合规定的12张牌
	SRespCardGroupOpt_ErrCardSame   SRespCardGroupOpt_ErrCode = 2 //卡组中出现重复 卡牌
)

// Enum value maps for SRespCardGroupOpt_ErrCode.
var (
	SRespCardGroupOpt_ErrCode_name = map[int32]string{
		0: "ErrNone",
		1: "ErrCardsCount",
		2: "ErrCardSame",
	}
	SRespCardGroupOpt_ErrCode_value = map[string]int32{
		"ErrNone":       0,
		"ErrCardsCount": 1,
		"ErrCardSame":   2,
	}
)

func (x SRespCardGroupOpt_ErrCode) Enum() *SRespCardGroupOpt_ErrCode {
	p := new(SRespCardGroupOpt_ErrCode)
	*p = x
	return p
}

func (x SRespCardGroupOpt_ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespCardGroupOpt_ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[35].Descriptor()
}

func (SRespCardGroupOpt_ErrCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[35]
}

func (x SRespCardGroupOpt_ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespCardGroupOpt_ErrCode.Descriptor instead.
func (SRespCardGroupOpt_ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{77, 0}
}

type SRespCardGroupOpt_SuccessCode int32

const (
	SRespCardGroupOpt_SuccessNone   SRespCardGroupOpt_SuccessCode = 0
	SRespCardGroupOpt_SuccessCreat  SRespCardGroupOpt_SuccessCode = 1
	SRespCardGroupOpt_SuccessModify SRespCardGroupOpt_SuccessCode = 2
	SRespCardGroupOpt_SuccessSelect SRespCardGroupOpt_SuccessCode = 3
)

// Enum value maps for SRespCardGroupOpt_SuccessCode.
var (
	SRespCardGroupOpt_SuccessCode_name = map[int32]string{
		0: "SuccessNone",
		1: "SuccessCreat",
		2: "SuccessModify",
		3: "SuccessSelect",
	}
	SRespCardGroupOpt_SuccessCode_value = map[string]int32{
		"SuccessNone":   0,
		"SuccessCreat":  1,
		"SuccessModify": 2,
		"SuccessSelect": 3,
	}
)

func (x SRespCardGroupOpt_SuccessCode) Enum() *SRespCardGroupOpt_SuccessCode {
	p := new(SRespCardGroupOpt_SuccessCode)
	*p = x
	return p
}

func (x SRespCardGroupOpt_SuccessCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRespCardGroupOpt_SuccessCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cmsg_client_msg_proto_enumTypes[36].Descriptor()
}

func (SRespCardGroupOpt_SuccessCode) Type() protoreflect.EnumType {
	return &file_cmsg_client_msg_proto_enumTypes[36]
}

func (x SRespCardGroupOpt_SuccessCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRespCardGroupOpt_SuccessCode.Descriptor instead.
func (SRespCardGroupOpt_SuccessCode) EnumDescriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{77, 1}
}

type CReqPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeTag int64 `protobuf:"varint,1,opt,name=timeTag,proto3" json:"timeTag,omitempty"`
	SvrType int32 `protobuf:"varint,2,opt,name=svrType,proto3" json:"svrType,omitempty"`
}

func (x *CReqPing) Reset() {
	*x = CReqPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqPing) ProtoMessage() {}

func (x *CReqPing) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqPing.ProtoReflect.Descriptor instead.
func (*CReqPing) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{0}
}

func (x *CReqPing) GetTimeTag() int64 {
	if x != nil {
		return x.TimeTag
	}
	return 0
}

func (x *CReqPing) GetSvrType() int32 {
	if x != nil {
		return x.SvrType
	}
	return 0
}

type SRespPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeTag int64 `protobuf:"varint,1,opt,name=timeTag,proto3" json:"timeTag,omitempty"`
	SvrType int32 `protobuf:"varint,2,opt,name=svrType,proto3" json:"svrType,omitempty"`
}

func (x *SRespPing) Reset() {
	*x = SRespPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespPing) ProtoMessage() {}

func (x *SRespPing) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespPing.ProtoReflect.Descriptor instead.
func (*SRespPing) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{1}
}

func (x *SRespPing) GetTimeTag() int64 {
	if x != nil {
		return x.TimeTag
	}
	return 0
}

func (x *SRespPing) GetSvrType() int32 {
	if x != nil {
		return x.SvrType
	}
	return 0
}

//请求登录
type CReqLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account   string                   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Password  string                   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Version   string                   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Ticket    string                   `protobuf:"bytes,4,opt,name=ticket,proto3" json:"ticket,omitempty"`
	LoginType gameconf.AccountLoginTyp `protobuf:"varint,5,opt,name=loginType,proto3,enum=gameconf.AccountLoginTyp" json:"loginType,omitempty"`
}

func (x *CReqLogin) Reset() {
	*x = CReqLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqLogin) ProtoMessage() {}

func (x *CReqLogin) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqLogin.ProtoReflect.Descriptor instead.
func (*CReqLogin) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{2}
}

func (x *CReqLogin) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *CReqLogin) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CReqLogin) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CReqLogin) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *CReqLogin) GetLoginType() gameconf.AccountLoginTyp {
	if x != nil {
		return x.LoginType
	}
	return gameconf.AccountLoginTyp_ALTInvalid
}

// 响应登陆请求.
type SRespLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode    SRespLogin_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespLogin_ErrCode" json:"errCode,omitempty"`
	ErrData    []int64            `protobuf:"varint,2,rep,name=errData,proto3" json:"errData,omitempty"` //错误额外数据（用于显示）
	UserId     uint64             `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Account    string             `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	UserBrief  *def.UserBrief     `protobuf:"bytes,10,opt,name=userBrief,proto3" json:"userBrief,omitempty"`
	ServerTime int64              `protobuf:"varint,11,opt,name=serverTime,proto3" json:"serverTime,omitempty"` //服务器当前时间
	IsInGame   bool               `protobuf:"varint,20,opt,name=isInGame,proto3" json:"isInGame,omitempty"`     //是否在游戏中，如果在请求游戏断线重连
	ServerCfg  *def.ServerConfig  `protobuf:"bytes,21,opt,name=serverCfg,proto3" json:"serverCfg,omitempty"`    //服务器相关配置
}

func (x *SRespLogin) Reset() {
	*x = SRespLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespLogin) ProtoMessage() {}

func (x *SRespLogin) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespLogin.ProtoReflect.Descriptor instead.
func (*SRespLogin) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{3}
}

func (x *SRespLogin) GetErrCode() SRespLogin_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespLogin_Succ
}

func (x *SRespLogin) GetErrData() []int64 {
	if x != nil {
		return x.ErrData
	}
	return nil
}

func (x *SRespLogin) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SRespLogin) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SRespLogin) GetUserBrief() *def.UserBrief {
	if x != nil {
		return x.UserBrief
	}
	return nil
}

func (x *SRespLogin) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *SRespLogin) GetIsInGame() bool {
	if x != nil {
		return x.IsInGame
	}
	return false
}

func (x *SRespLogin) GetServerCfg() *def.ServerConfig {
	if x != nil {
		return x.ServerCfg
	}
	return nil
}

//同步玩家信息
type SSyncUserBrief struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserBrief *def.UserBrief `protobuf:"bytes,1,opt,name=userBrief,proto3" json:"userBrief,omitempty"`
}

func (x *SSyncUserBrief) Reset() {
	*x = SSyncUserBrief{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSyncUserBrief) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSyncUserBrief) ProtoMessage() {}

func (x *SSyncUserBrief) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSyncUserBrief.ProtoReflect.Descriptor instead.
func (*SSyncUserBrief) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{4}
}

func (x *SSyncUserBrief) GetUserBrief() *def.UserBrief {
	if x != nil {
		return x.UserBrief
	}
	return nil
}

// 请求我的数据(暂时不用)
type CReqMyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CReqMyData) Reset() {
	*x = CReqMyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqMyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqMyData) ProtoMessage() {}

func (x *CReqMyData) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqMyData.ProtoReflect.Descriptor instead.
func (*CReqMyData) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{5}
}

// 响应我的数据请求（暂时不用）
type SRespMyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespMyData_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespMyData_ErrCode" json:"errCode,omitempty"`
	ErrMsg  string              `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	//基础信息
	UserBase *def.UserBase `protobuf:"bytes,5,opt,name=userBase,proto3" json:"userBase,omitempty"`
}

func (x *SRespMyData) Reset() {
	*x = SRespMyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespMyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespMyData) ProtoMessage() {}

func (x *SRespMyData) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespMyData.ProtoReflect.Descriptor instead.
func (*SRespMyData) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{6}
}

func (x *SRespMyData) GetErrCode() SRespMyData_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespMyData_Succ
}

func (x *SRespMyData) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *SRespMyData) GetUserBase() *def.UserBase {
	if x != nil {
		return x.UserBase
	}
	return nil
}

//通知游戏开始，可以进入场景了
type SNoticeGameReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameMode gameconf.GameModeTyp     `protobuf:"varint,1,opt,name=gameMode,proto3,enum=gameconf.GameModeTyp" json:"gameMode,omitempty"` //模式ID
	Seats    []*SNoticeGameReady_Seat `protobuf:"bytes,2,rep,name=seats,proto3" json:"seats,omitempty"`                                  //玩家列表
	GameUUID string                   `protobuf:"bytes,3,opt,name=gameUUID,proto3" json:"gameUUID,omitempty"`
	RoomId   uint32                   `protobuf:"varint,4,opt,name=roomId,proto3" json:"roomId,omitempty"`
	VoiceId  string                   `protobuf:"bytes,6,opt,name=voiceId,proto3" json:"voiceId,omitempty"` // 语音id
}

func (x *SNoticeGameReady) Reset() {
	*x = SNoticeGameReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeGameReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeGameReady) ProtoMessage() {}

func (x *SNoticeGameReady) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeGameReady.ProtoReflect.Descriptor instead.
func (*SNoticeGameReady) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{7}
}

func (x *SNoticeGameReady) GetGameMode() gameconf.GameModeTyp {
	if x != nil {
		return x.GameMode
	}
	return gameconf.GameModeTyp_MGTInvalid
}

func (x *SNoticeGameReady) GetSeats() []*SNoticeGameReady_Seat {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *SNoticeGameReady) GetGameUUID() string {
	if x != nil {
		return x.GameUUID
	}
	return ""
}

func (x *SNoticeGameReady) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SNoticeGameReady) GetVoiceId() string {
	if x != nil {
		return x.VoiceId
	}
	return ""
}

//请求游戏场景，游戏开始或断线重连用
type CReqGameScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CReqGameScene) Reset() {
	*x = CReqGameScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqGameScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqGameScene) ProtoMessage() {}

func (x *CReqGameScene) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqGameScene.ProtoReflect.Descriptor instead.
func (*CReqGameScene) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{8}
}

type SRespGameScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode      SRespGameScene_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespGameScene_ErrCode" json:"errCode,omitempty"`
	GameMode     gameconf.GameModeTyp   `protobuf:"varint,2,opt,name=gameMode,proto3,enum=gameconf.GameModeTyp" json:"gameMode,omitempty"`
	RoomSetting  *def.RoomSetting       `protobuf:"bytes,4,opt,name=roomSetting,proto3" json:"roomSetting,omitempty"`
	RoomNO       uint32                 `protobuf:"varint,5,opt,name=roomNO,proto3" json:"roomNO,omitempty"`                       //房间NO
	OpSeatIds    []int32                `protobuf:"varint,8,rep,name=opSeatIds,proto3" json:"opSeatIds,omitempty"`                 //当前操作的人
	OpEndTime    int64                  `protobuf:"varint,9,opt,name=opEndTime,proto3" json:"opEndTime,omitempty"`                 //当前操作截止时间
	Phase        def.GamePhase          `protobuf:"varint,10,opt,name=phase,proto3,enum=gamedef.GamePhase" json:"phase,omitempty"` //游戏在什么阶段
	Seats        []*SRespGameScene_Seat `protobuf:"bytes,12,rep,name=seats,proto3" json:"seats,omitempty"`                         //场上座位上的玩家信息
	VoiceId      string                 `protobuf:"bytes,14,opt,name=voiceId,proto3" json:"voiceId,omitempty"`
	LookerCount  int32                  `protobuf:"varint,15,opt,name=lookerCount,proto3" json:"lookerCount,omitempty"`                       //旁观者数量
	PhaseEndTime int64                  `protobuf:"varint,16,opt,name=phaseEndTime,proto3" json:"phaseEndTime,omitempty"`                     //阶段截止时间戳
	MySeatId     int32                  `protobuf:"varint,17,opt,name=mySeatId,proto3" json:"mySeatId,omitempty"`                             //我的座位号,旁观者为-1
	LookerType   gameconf.LookerTyp     `protobuf:"varint,18,opt,name=lookerType,proto3,enum=gameconf.LookerTyp" json:"lookerType,omitempty"` //旁观类型
	ServerTime   int64                  `protobuf:"varint,19,opt,name=serverTime,proto3" json:"serverTime,omitempty"`                         //服务器当前时间戳
	Board        *def.GameBoard         `protobuf:"bytes,20,opt,name=board,proto3" json:"board,omitempty"`
}

func (x *SRespGameScene) Reset() {
	*x = SRespGameScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespGameScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespGameScene) ProtoMessage() {}

func (x *SRespGameScene) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespGameScene.ProtoReflect.Descriptor instead.
func (*SRespGameScene) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{9}
}

func (x *SRespGameScene) GetErrCode() SRespGameScene_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespGameScene_None
}

func (x *SRespGameScene) GetGameMode() gameconf.GameModeTyp {
	if x != nil {
		return x.GameMode
	}
	return gameconf.GameModeTyp_MGTInvalid
}

func (x *SRespGameScene) GetRoomSetting() *def.RoomSetting {
	if x != nil {
		return x.RoomSetting
	}
	return nil
}

func (x *SRespGameScene) GetRoomNO() uint32 {
	if x != nil {
		return x.RoomNO
	}
	return 0
}

func (x *SRespGameScene) GetOpSeatIds() []int32 {
	if x != nil {
		return x.OpSeatIds
	}
	return nil
}

func (x *SRespGameScene) GetOpEndTime() int64 {
	if x != nil {
		return x.OpEndTime
	}
	return 0
}

func (x *SRespGameScene) GetPhase() def.GamePhase {
	if x != nil {
		return x.Phase
	}
	return def.GamePhase_Invalid
}

func (x *SRespGameScene) GetSeats() []*SRespGameScene_Seat {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *SRespGameScene) GetVoiceId() string {
	if x != nil {
		return x.VoiceId
	}
	return ""
}

func (x *SRespGameScene) GetLookerCount() int32 {
	if x != nil {
		return x.LookerCount
	}
	return 0
}

func (x *SRespGameScene) GetPhaseEndTime() int64 {
	if x != nil {
		return x.PhaseEndTime
	}
	return 0
}

func (x *SRespGameScene) GetMySeatId() int32 {
	if x != nil {
		return x.MySeatId
	}
	return 0
}

func (x *SRespGameScene) GetLookerType() gameconf.LookerTyp {
	if x != nil {
		return x.LookerType
	}
	return gameconf.LookerTyp_LTInvalid
}

func (x *SRespGameScene) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *SRespGameScene) GetBoard() *def.GameBoard {
	if x != nil {
		return x.Board
	}
	return nil
}

//暂时无用
type CReqSceneReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CReqSceneReady) Reset() {
	*x = CReqSceneReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqSceneReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqSceneReady) ProtoMessage() {}

func (x *CReqSceneReady) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqSceneReady.ProtoReflect.Descriptor instead.
func (*CReqSceneReady) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{10}
}

type SRespSceneReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespSceneReady_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespSceneReady_ErrCode" json:"errCode,omitempty"`
	OutTime int32                   `protobuf:"varint,2,opt,name=outTime,proto3" json:"outTime,omitempty"`
}

func (x *SRespSceneReady) Reset() {
	*x = SRespSceneReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespSceneReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespSceneReady) ProtoMessage() {}

func (x *SRespSceneReady) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespSceneReady.ProtoReflect.Descriptor instead.
func (*SRespSceneReady) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{11}
}

func (x *SRespSceneReady) GetErrCode() SRespSceneReady_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespSceneReady_None
}

func (x *SRespSceneReady) GetOutTime() int32 {
	if x != nil {
		return x.OutTime
	}
	return 0
}

type SNoticeGameStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SNoticeGameStart) Reset() {
	*x = SNoticeGameStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeGameStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeGameStart) ProtoMessage() {}

func (x *SNoticeGameStart) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeGameStart.ProtoReflect.Descriptor instead.
func (*SNoticeGameStart) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{12}
}

type SNoticeEnterPhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase        def.GamePhase `protobuf:"varint,1,opt,name=phase,proto3,enum=gamedef.GamePhase" json:"phase,omitempty"`
	RoundCount   int32         `protobuf:"varint,2,opt,name=roundCount,proto3" json:"roundCount,omitempty"`     // 回合数计数
	SeatId       int32         `protobuf:"varint,3,opt,name=seatId,proto3" json:"seatId,omitempty"`             //当前回合玩家座位号
	PhaseEndTime int64         `protobuf:"varint,4,opt,name=phaseEndTime,proto3" json:"phaseEndTime,omitempty"` //阶段截止时间戳（倒计时=此值-SRespGameScene中的serverTime）
}

func (x *SNoticeEnterPhase) Reset() {
	*x = SNoticeEnterPhase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeEnterPhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeEnterPhase) ProtoMessage() {}

func (x *SNoticeEnterPhase) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeEnterPhase.ProtoReflect.Descriptor instead.
func (*SNoticeEnterPhase) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{13}
}

func (x *SNoticeEnterPhase) GetPhase() def.GamePhase {
	if x != nil {
		return x.Phase
	}
	return def.GamePhase_Invalid
}

func (x *SNoticeEnterPhase) GetRoundCount() int32 {
	if x != nil {
		return x.RoundCount
	}
	return 0
}

func (x *SNoticeEnterPhase) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *SNoticeEnterPhase) GetPhaseEndTime() int64 {
	if x != nil {
		return x.PhaseEndTime
	}
	return 0
}

//通知抓牌
type SNoticeDrawCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpSeatId int32           `protobuf:"varint,1,opt,name=opSeatId,proto3" json:"opSeatId,omitempty"`
	Cards    []*def.PoolCard `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *SNoticeDrawCard) Reset() {
	*x = SNoticeDrawCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeDrawCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeDrawCard) ProtoMessage() {}

func (x *SNoticeDrawCard) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeDrawCard.ProtoReflect.Descriptor instead.
func (*SNoticeDrawCard) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{14}
}

func (x *SNoticeDrawCard) GetOpSeatId() int32 {
	if x != nil {
		return x.OpSeatId
	}
	return 0
}

func (x *SNoticeDrawCard) GetCards() []*def.PoolCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

type SNoticeOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpType    SNoticeOp_OpType `protobuf:"varint,1,opt,name=opType,proto3,enum=cmsg.SNoticeOp_OpType" json:"opType,omitempty"`
	OpSeatId  int32            `protobuf:"varint,2,opt,name=opSeatId,proto3" json:"opSeatId,omitempty"`   //被要求操作动作人的seatId
	TargetPos []*def.Position  `protobuf:"bytes,4,rep,name=targetPos,proto3" json:"targetPos,omitempty"`  //可选目标位置
	OpEndTime int64            `protobuf:"varint,6,opt,name=opEndTime,proto3" json:"opEndTime,omitempty"` //操作截止时间戳
	SpellCard int32            `protobuf:"varint,7,opt,name=spellCard,proto3" json:"spellCard,omitempty"`
	Data      *SNoticeOp_Data  `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	LeftAP    int32            `protobuf:"varint,11,opt,name=leftAP,proto3" json:"leftAP,omitempty"` //剩余行动力,opType=ActionStart时有效
}

func (x *SNoticeOp) Reset() {
	*x = SNoticeOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeOp) ProtoMessage() {}

func (x *SNoticeOp) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeOp.ProtoReflect.Descriptor instead.
func (*SNoticeOp) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{15}
}

func (x *SNoticeOp) GetOpType() SNoticeOp_OpType {
	if x != nil {
		return x.OpType
	}
	return SNoticeOp_Invalid
}

func (x *SNoticeOp) GetOpSeatId() int32 {
	if x != nil {
		return x.OpSeatId
	}
	return 0
}

func (x *SNoticeOp) GetTargetPos() []*def.Position {
	if x != nil {
		return x.TargetPos
	}
	return nil
}

func (x *SNoticeOp) GetOpEndTime() int64 {
	if x != nil {
		return x.OpEndTime
	}
	return 0
}

func (x *SNoticeOp) GetSpellCard() int32 {
	if x != nil {
		return x.SpellCard
	}
	return 0
}

func (x *SNoticeOp) GetData() *SNoticeOp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SNoticeOp) GetLeftAP() int32 {
	if x != nil {
		return x.LeftAP
	}
	return 0
}

type CReqOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpType    CReqOpt_OpType  `protobuf:"varint,1,opt,name=opType,proto3,enum=cmsg.CReqOpt_OpType" json:"opType,omitempty"`
	SkillId   int32           `protobuf:"varint,2,opt,name=skillId,proto3" json:"skillId,omitempty"`
	CardIds   []int32         `protobuf:"varint,3,rep,name=cardIds,proto3" json:"cardIds,omitempty"`
	TargetPos []*def.Position `protobuf:"bytes,4,rep,name=targetPos,proto3" json:"targetPos,omitempty"`
	Data      []int32         `protobuf:"varint,5,rep,name=data,proto3" json:"data,omitempty"`
	SeatId    int32           `protobuf:"varint,6,opt,name=seatId,proto3" json:"seatId,omitempty"` //选的军营Id
}

func (x *CReqOpt) Reset() {
	*x = CReqOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqOpt) ProtoMessage() {}

func (x *CReqOpt) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqOpt.ProtoReflect.Descriptor instead.
func (*CReqOpt) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{16}
}

func (x *CReqOpt) GetOpType() CReqOpt_OpType {
	if x != nil {
		return x.OpType
	}
	return CReqOpt_Invalid
}

func (x *CReqOpt) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *CReqOpt) GetCardIds() []int32 {
	if x != nil {
		return x.CardIds
	}
	return nil
}

func (x *CReqOpt) GetTargetPos() []*def.Position {
	if x != nil {
		return x.TargetPos
	}
	return nil
}

func (x *CReqOpt) GetData() []int32 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CReqOpt) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

type SRespOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespOpt_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespOpt_ErrCode" json:"errCode,omitempty"`
}

func (x *SRespOpt) Reset() {
	*x = SRespOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespOpt) ProtoMessage() {}

func (x *SRespOpt) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespOpt.ProtoReflect.Descriptor instead.
func (*SRespOpt) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{17}
}

func (x *SRespOpt) GetErrCode() SRespOpt_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespOpt_None
}

type CReqAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActType    def.ActType         `protobuf:"varint,1,opt,name=actType,proto3,enum=gamedef.ActType" json:"actType,omitempty"`
	CardId     int32               `protobuf:"varint,2,opt,name=cardId,proto3" json:"cardId,omitempty"`
	TargetPos  *def.Position       `protobuf:"bytes,3,opt,name=targetPos,proto3" json:"targetPos,omitempty"`
	NeedSelect bool                `protobuf:"varint,4,opt,name=needSelect,proto3" json:"needSelect,omitempty"` //当动作为翻牌时用，标识是否为指向性翻牌技能
	ActSelect  *def.ActSelectParam `protobuf:"bytes,5,opt,name=actSelect,proto3" json:"actSelect,omitempty"`    //当动作为翻牌时用，指向性翻牌技能专用，用于指定目标
}

func (x *CReqAct) Reset() {
	*x = CReqAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqAct) ProtoMessage() {}

func (x *CReqAct) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqAct.ProtoReflect.Descriptor instead.
func (*CReqAct) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{18}
}

func (x *CReqAct) GetActType() def.ActType {
	if x != nil {
		return x.ActType
	}
	return def.ActType_None
}

func (x *CReqAct) GetCardId() int32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *CReqAct) GetTargetPos() *def.Position {
	if x != nil {
		return x.TargetPos
	}
	return nil
}

func (x *CReqAct) GetNeedSelect() bool {
	if x != nil {
		return x.NeedSelect
	}
	return false
}

func (x *CReqAct) GetActSelect() *def.ActSelectParam {
	if x != nil {
		return x.ActSelect
	}
	return nil
}

type SRespAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode   SRespAct_ErrCode    `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespAct_ErrCode" json:"errCode,omitempty"`
	ActType   def.ActType         `protobuf:"varint,2,opt,name=actType,proto3,enum=gamedef.ActType" json:"actType,omitempty"`
	CardId    int32               `protobuf:"varint,3,opt,name=cardId,proto3" json:"cardId,omitempty"`
	TargetPos *def.Position       `protobuf:"bytes,4,opt,name=targetPos,proto3" json:"targetPos,omitempty"`
	ActSelect *def.ActSelectParam `protobuf:"bytes,5,opt,name=actSelect,proto3" json:"actSelect,omitempty"`
}

func (x *SRespAct) Reset() {
	*x = SRespAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespAct) ProtoMessage() {}

func (x *SRespAct) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespAct.ProtoReflect.Descriptor instead.
func (*SRespAct) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{19}
}

func (x *SRespAct) GetErrCode() SRespAct_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespAct_None
}

func (x *SRespAct) GetActType() def.ActType {
	if x != nil {
		return x.ActType
	}
	return def.ActType_None
}

func (x *SRespAct) GetCardId() int32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *SRespAct) GetTargetPos() *def.Position {
	if x != nil {
		return x.TargetPos
	}
	return nil
}

func (x *SRespAct) GetActSelect() *def.ActSelectParam {
	if x != nil {
		return x.ActSelect
	}
	return nil
}

//同步玩家操作,纯表现
type SSyncAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActType   def.ActType     `protobuf:"varint,1,opt,name=actType,proto3,enum=gamedef.ActType" json:"actType,omitempty"`
	OpSeatId  int32           `protobuf:"varint,2,opt,name=opSeatId,proto3" json:"opSeatId,omitempty"`   //操作人座位号
	OpCard    int32           `protobuf:"varint,3,opt,name=opCard,proto3" json:"opCard,omitempty"`       //操作的牌 原协议为opPos和card
	TargetPos []*def.Position `protobuf:"bytes,4,rep,name=targetPos,proto3" json:"targetPos,omitempty"`  //目标牌操作位
	SpellCard int32           `protobuf:"varint,6,opt,name=spellCard,proto3" json:"spellCard,omitempty"` //哪张牌谁发动的 原协议类型为gamedef.Card
}

func (x *SSyncAct) Reset() {
	*x = SSyncAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSyncAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSyncAct) ProtoMessage() {}

func (x *SSyncAct) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSyncAct.ProtoReflect.Descriptor instead.
func (*SSyncAct) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{20}
}

func (x *SSyncAct) GetActType() def.ActType {
	if x != nil {
		return x.ActType
	}
	return def.ActType_None
}

func (x *SSyncAct) GetOpSeatId() int32 {
	if x != nil {
		return x.OpSeatId
	}
	return 0
}

func (x *SSyncAct) GetOpCard() int32 {
	if x != nil {
		return x.OpCard
	}
	return 0
}

func (x *SSyncAct) GetTargetPos() []*def.Position {
	if x != nil {
		return x.TargetPos
	}
	return nil
}

func (x *SSyncAct) GetSpellCard() int32 {
	if x != nil {
		return x.SpellCard
	}
	return 0
}

//同步卡牌变化
type SSyncCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card         *def.Card           `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"` //变化的牌
	SeatId       int32               `protobuf:"varint,3,opt,name=seatId,proto3" json:"seatId,omitempty"`
	Changes      []*SSyncCard_Change `protobuf:"bytes,4,rep,name=changes,proto3" json:"changes,omitempty"`
	SpellSkillId int32               `protobuf:"varint,10,opt,name=spellSkillId,proto3" json:"spellSkillId,omitempty"` //造成变化的技能Id
	SpellCard    int32               `protobuf:"varint,11,opt,name=spellCard,proto3" json:"spellCard,omitempty"`       //造成变化的源牌(原协议为srcCard)
}

func (x *SSyncCard) Reset() {
	*x = SSyncCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSyncCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSyncCard) ProtoMessage() {}

func (x *SSyncCard) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSyncCard.ProtoReflect.Descriptor instead.
func (*SSyncCard) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{21}
}

func (x *SSyncCard) GetCard() *def.Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *SSyncCard) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *SSyncCard) GetChanges() []*SSyncCard_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *SSyncCard) GetSpellSkillId() int32 {
	if x != nil {
		return x.SpellSkillId
	}
	return 0
}

func (x *SSyncCard) GetSpellCard() int32 {
	if x != nil {
		return x.SpellCard
	}
	return 0
}

//同步使用技能,纯表现
type SSyncUseSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seat         int32   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	SkillId      int32   `protobuf:"varint,2,opt,name=skillId,proto3" json:"skillId,omitempty"`
	Card         int32   `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`               //原类型为gamedef.Card
	TargetCards  []int32 `protobuf:"varint,4,rep,name=targetCards,proto3" json:"targetCards,omitempty"` //原类型为gamedef.Card
	Data         []int32 `protobuf:"varint,5,rep,name=data,proto3" json:"data,omitempty"`
	TargetSeatId int32   `protobuf:"varint,7,opt,name=targetSeatId,proto3" json:"targetSeatId,omitempty"` //技能目标为军营
}

func (x *SSyncUseSkill) Reset() {
	*x = SSyncUseSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSyncUseSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSyncUseSkill) ProtoMessage() {}

func (x *SSyncUseSkill) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSyncUseSkill.ProtoReflect.Descriptor instead.
func (*SSyncUseSkill) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{22}
}

func (x *SSyncUseSkill) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SSyncUseSkill) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *SSyncUseSkill) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *SSyncUseSkill) GetTargetCards() []int32 {
	if x != nil {
		return x.TargetCards
	}
	return nil
}

func (x *SSyncUseSkill) GetData() []int32 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SSyncUseSkill) GetTargetSeatId() int32 {
	if x != nil {
		return x.TargetSeatId
	}
	return 0
}

type SSyncUseSkillEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seat    int32 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	SkillId int32 `protobuf:"varint,2,opt,name=skillId,proto3" json:"skillId,omitempty"`
	Card    int32 `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *SSyncUseSkillEnd) Reset() {
	*x = SSyncUseSkillEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSyncUseSkillEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSyncUseSkillEnd) ProtoMessage() {}

func (x *SSyncUseSkillEnd) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSyncUseSkillEnd.ProtoReflect.Descriptor instead.
func (*SSyncUseSkillEnd) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{23}
}

func (x *SSyncUseSkillEnd) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SSyncUseSkillEnd) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *SSyncUseSkillEnd) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

//同步军营变化
type SSyncCamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes   []*SSyncCamp_Change `protobuf:"bytes,10,rep,name=changes,proto3" json:"changes,omitempty"`
	SeatId    int32               `protobuf:"varint,11,opt,name=seatId,proto3" json:"seatId,omitempty"`
	SpellCard int32               `protobuf:"varint,20,opt,name=spellCard,proto3" json:"spellCard,omitempty"` //造成变化的牌
}

func (x *SSyncCamp) Reset() {
	*x = SSyncCamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSyncCamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSyncCamp) ProtoMessage() {}

func (x *SSyncCamp) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSyncCamp.ProtoReflect.Descriptor instead.
func (*SSyncCamp) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{24}
}

func (x *SSyncCamp) GetChanges() []*SSyncCamp_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *SSyncCamp) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *SSyncCamp) GetSpellCard() int32 {
	if x != nil {
		return x.SpellCard
	}
	return 0
}

//同步手牌变化
type SSyncHandCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeTypes SSyncHandCard_ChangeType `protobuf:"varint,1,opt,name=changeTypes,proto3,enum=cmsg.SSyncHandCard_ChangeType" json:"changeTypes,omitempty"`
	SeatId      int32                    `protobuf:"varint,2,opt,name=seatId,proto3" json:"seatId,omitempty"`
	GetCards    []*def.PoolCard          `protobuf:"bytes,3,rep,name=getCards,proto3" json:"getCards,omitempty"`    //此次变化获得的牌
	LoseCards   []*def.PoolCard          `protobuf:"bytes,4,rep,name=loseCards,proto3" json:"loseCards,omitempty"`  //此次变化失去的牌
	HandCards   []*def.PoolCard          `protobuf:"bytes,5,rep,name=handCards,proto3" json:"handCards,omitempty"`  //最终手牌局
	SpellCard   int32                    `protobuf:"varint,6,opt,name=spellCard,proto3" json:"spellCard,omitempty"` //造成变化的牌Id
}

func (x *SSyncHandCard) Reset() {
	*x = SSyncHandCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSyncHandCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSyncHandCard) ProtoMessage() {}

func (x *SSyncHandCard) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSyncHandCard.ProtoReflect.Descriptor instead.
func (*SSyncHandCard) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{25}
}

func (x *SSyncHandCard) GetChangeTypes() SSyncHandCard_ChangeType {
	if x != nil {
		return x.ChangeTypes
	}
	return SSyncHandCard_None
}

func (x *SSyncHandCard) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *SSyncHandCard) GetGetCards() []*def.PoolCard {
	if x != nil {
		return x.GetCards
	}
	return nil
}

func (x *SSyncHandCard) GetLoseCards() []*def.PoolCard {
	if x != nil {
		return x.LoseCards
	}
	return nil
}

func (x *SSyncHandCard) GetHandCards() []*def.PoolCard {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *SSyncHandCard) GetSpellCard() int32 {
	if x != nil {
		return x.SpellCard
	}
	return 0
}

type SSyncGameBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seats []*def.GameSeat `protobuf:"bytes,1,rep,name=seats,proto3" json:"seats,omitempty"`
}

func (x *SSyncGameBoard) Reset() {
	*x = SSyncGameBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSyncGameBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSyncGameBoard) ProtoMessage() {}

func (x *SSyncGameBoard) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSyncGameBoard.ProtoReflect.Descriptor instead.
func (*SSyncGameBoard) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{26}
}

func (x *SSyncGameBoard) GetSeats() []*def.GameSeat {
	if x != nil {
		return x.Seats
	}
	return nil
}

type SNoticeGameOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinSeat int32 `protobuf:"varint,1,opt,name=winSeat,proto3" json:"winSeat,omitempty"` //赢方
}

func (x *SNoticeGameOver) Reset() {
	*x = SNoticeGameOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeGameOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeGameOver) ProtoMessage() {}

func (x *SNoticeGameOver) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeGameOver.ProtoReflect.Descriptor instead.
func (*SNoticeGameOver) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{27}
}

func (x *SNoticeGameOver) GetWinSeat() int32 {
	if x != nil {
		return x.WinSeat
	}
	return 0
}

//取消当前操作
type CReqCancelCurOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CReqCancelCurOpt) Reset() {
	*x = CReqCancelCurOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqCancelCurOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqCancelCurOpt) ProtoMessage() {}

func (x *CReqCancelCurOpt) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqCancelCurOpt.ProtoReflect.Descriptor instead.
func (*CReqCancelCurOpt) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{28}
}

type SRespCancelCurOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespCancelCurOpt_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespCancelCurOpt_ErrCode" json:"errCode,omitempty"`
}

func (x *SRespCancelCurOpt) Reset() {
	*x = SRespCancelCurOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespCancelCurOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespCancelCurOpt) ProtoMessage() {}

func (x *SRespCancelCurOpt) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespCancelCurOpt.ProtoReflect.Descriptor instead.
func (*SRespCancelCurOpt) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{29}
}

func (x *SRespCancelCurOpt) GetErrCode() SRespCancelCurOpt_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespCancelCurOpt_None
}

type CReqGameExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitType int32 `protobuf:"varint,1,opt,name=exitType,proto3" json:"exitType,omitempty"` //1，逃跑
}

func (x *CReqGameExit) Reset() {
	*x = CReqGameExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqGameExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqGameExit) ProtoMessage() {}

func (x *CReqGameExit) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqGameExit.ProtoReflect.Descriptor instead.
func (*CReqGameExit) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{30}
}

func (x *CReqGameExit) GetExitType() int32 {
	if x != nil {
		return x.ExitType
	}
	return 0
}

type SRespGameExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode  uint32 `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ExitType int32  `protobuf:"varint,2,opt,name=exitType,proto3" json:"exitType,omitempty"` //1，逃跑
}

func (x *SRespGameExit) Reset() {
	*x = SRespGameExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespGameExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespGameExit) ProtoMessage() {}

func (x *SRespGameExit) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespGameExit.ProtoReflect.Descriptor instead.
func (*SRespGameExit) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{31}
}

func (x *SRespGameExit) GetErrCode() uint32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *SRespGameExit) GetExitType() int32 {
	if x != nil {
		return x.ExitType
	}
	return 0
}

type SSyncPlayerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seat         int32                       `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	ConnectState gameconf.UserConnectState   `protobuf:"varint,2,opt,name=connectState,proto3,enum=gameconf.UserConnectState" json:"connectState,omitempty"`    //玩家在线，离线，离开状态
	Dead         bool                        `protobuf:"varint,3,opt,name=dead,proto3" json:"dead,omitempty"`                                                   //是否是死亡状态
	HpChange     *def.Change                 `protobuf:"bytes,4,opt,name=hpChange,proto3" json:"hpChange,omitempty"`                                            //大本营生命值(将废除）
	ChangeType   SSyncPlayerState_ChangeType `protobuf:"varint,5,opt,name=changeType,proto3,enum=cmsg.SSyncPlayerState_ChangeType" json:"changeType,omitempty"` //同步类型
	New          int32                       `protobuf:"varint,6,opt,name=new,proto3" json:"new,omitempty"`                                                     //新值
}

func (x *SSyncPlayerState) Reset() {
	*x = SSyncPlayerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSyncPlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSyncPlayerState) ProtoMessage() {}

func (x *SSyncPlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSyncPlayerState.ProtoReflect.Descriptor instead.
func (*SSyncPlayerState) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{32}
}

func (x *SSyncPlayerState) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SSyncPlayerState) GetConnectState() gameconf.UserConnectState {
	if x != nil {
		return x.ConnectState
	}
	return gameconf.UserConnectState_USConnect
}

func (x *SSyncPlayerState) GetDead() bool {
	if x != nil {
		return x.Dead
	}
	return false
}

func (x *SSyncPlayerState) GetHpChange() *def.Change {
	if x != nil {
		return x.HpChange
	}
	return nil
}

func (x *SSyncPlayerState) GetChangeType() SSyncPlayerState_ChangeType {
	if x != nil {
		return x.ChangeType
	}
	return SSyncPlayerState_Invalid
}

func (x *SSyncPlayerState) GetNew() int32 {
	if x != nil {
		return x.New
	}
	return 0
}

// ========================================= Game Logic End =======================================================
type CReqGMCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd string `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
}

func (x *CReqGMCommand) Reset() {
	*x = CReqGMCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqGMCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqGMCommand) ProtoMessage() {}

func (x *CReqGMCommand) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqGMCommand.ProtoReflect.Descriptor instead.
func (*CReqGMCommand) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{33}
}

func (x *CReqGMCommand) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

type SReqGMCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret string `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *SReqGMCommand) Reset() {
	*x = SReqGMCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SReqGMCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SReqGMCommand) ProtoMessage() {}

func (x *SReqGMCommand) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SReqGMCommand.ProtoReflect.Descriptor instead.
func (*SReqGMCommand) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{34}
}

func (x *SReqGMCommand) GetRet() string {
	if x != nil {
		return x.Ret
	}
	return ""
}

//跑马灯消息
type ServerNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ServerNotice) Reset() {
	*x = ServerNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerNotice) ProtoMessage() {}

func (x *ServerNotice) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerNotice.ProtoReflect.Descriptor instead.
func (*ServerNotice) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{35}
}

func (x *ServerNotice) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 聊天请求
type CReqChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel      gameconf.ChatChannelTyp `protobuf:"varint,1,opt,name=channel,proto3,enum=gameconf.ChatChannelTyp" json:"channel,omitempty"`
	MsgType      gameconf.ChatMsgTyp     `protobuf:"varint,2,opt,name=msgType,proto3,enum=gameconf.ChatMsgTyp" json:"msgType,omitempty"`
	Msg          string                  `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	MsgId        string                  `protobuf:"bytes,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	TargetUserId uint64                  `protobuf:"varint,5,opt,name=targetUserId,proto3" json:"targetUserId,omitempty"`
}

func (x *CReqChat) Reset() {
	*x = CReqChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqChat) ProtoMessage() {}

func (x *CReqChat) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqChat.ProtoReflect.Descriptor instead.
func (*CReqChat) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{36}
}

func (x *CReqChat) GetChannel() gameconf.ChatChannelTyp {
	if x != nil {
		return x.Channel
	}
	return gameconf.ChatChannelTyp_ChatCTInvalid
}

func (x *CReqChat) GetMsgType() gameconf.ChatMsgTyp {
	if x != nil {
		return x.MsgType
	}
	return gameconf.ChatMsgTyp_CMTInvalid
}

func (x *CReqChat) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CReqChat) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *CReqChat) GetTargetUserId() uint64 {
	if x != nil {
		return x.TargetUserId
	}
	return 0
}

// 聊天请求返回
type SRespChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode      SRespChat_ErrCode       `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespChat_ErrCode" json:"errCode,omitempty"`
	Channel      gameconf.ChatChannelTyp `protobuf:"varint,3,opt,name=channel,proto3,enum=gameconf.ChatChannelTyp" json:"channel,omitempty"`
	MsgType      gameconf.ChatMsgTyp     `protobuf:"varint,4,opt,name=msgType,proto3,enum=gameconf.ChatMsgTyp" json:"msgType,omitempty"`
	TargetUserId uint64                  `protobuf:"varint,5,opt,name=targetUserId,proto3" json:"targetUserId,omitempty"`
}

func (x *SRespChat) Reset() {
	*x = SRespChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespChat) ProtoMessage() {}

func (x *SRespChat) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespChat.ProtoReflect.Descriptor instead.
func (*SRespChat) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{37}
}

func (x *SRespChat) GetErrCode() SRespChat_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespChat_None
}

func (x *SRespChat) GetChannel() gameconf.ChatChannelTyp {
	if x != nil {
		return x.Channel
	}
	return gameconf.ChatChannelTyp_ChatCTInvalid
}

func (x *SRespChat) GetMsgType() gameconf.ChatMsgTyp {
	if x != nil {
		return x.MsgType
	}
	return gameconf.ChatMsgTyp_CMTInvalid
}

func (x *SRespChat) GetTargetUserId() uint64 {
	if x != nil {
		return x.TargetUserId
	}
	return 0
}

// 聊天消息
type SNoticeChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel  gameconf.ChatChannelTyp `protobuf:"varint,1,opt,name=channel,proto3,enum=gameconf.ChatChannelTyp" json:"channel,omitempty"`
	MsgType  gameconf.ChatMsgTyp     `protobuf:"varint,2,opt,name=msgType,proto3,enum=gameconf.ChatMsgTyp" json:"msgType,omitempty"`
	FromUser *def.UserBrief          `protobuf:"bytes,3,opt,name=fromUser,proto3" json:"fromUser,omitempty"`
	FromSeat int32                   `protobuf:"varint,4,opt,name=fromSeat,proto3" json:"fromSeat,omitempty"` //几号位发的
	Msg      string                  `protobuf:"bytes,10,opt,name=msg,proto3" json:"msg,omitempty"`
	MsgId    string                  `protobuf:"bytes,11,opt,name=msgId,proto3" json:"msgId,omitempty"`
}

func (x *SNoticeChatMsg) Reset() {
	*x = SNoticeChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeChatMsg) ProtoMessage() {}

func (x *SNoticeChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeChatMsg.ProtoReflect.Descriptor instead.
func (*SNoticeChatMsg) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{38}
}

func (x *SNoticeChatMsg) GetChannel() gameconf.ChatChannelTyp {
	if x != nil {
		return x.Channel
	}
	return gameconf.ChatChannelTyp_ChatCTInvalid
}

func (x *SNoticeChatMsg) GetMsgType() gameconf.ChatMsgTyp {
	if x != nil {
		return x.MsgType
	}
	return gameconf.ChatMsgTyp_CMTInvalid
}

func (x *SNoticeChatMsg) GetFromUser() *def.UserBrief {
	if x != nil {
		return x.FromUser
	}
	return nil
}

func (x *SNoticeChatMsg) GetFromSeat() int32 {
	if x != nil {
		return x.FromSeat
	}
	return 0
}

func (x *SNoticeChatMsg) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SNoticeChatMsg) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

//===========================房间相关=======================
// 查询我的房间
type CReqMyRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CReqMyRoom) Reset() {
	*x = CReqMyRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqMyRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqMyRoom) ProtoMessage() {}

func (x *CReqMyRoom) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqMyRoom.ProtoReflect.Descriptor instead.
func (*CReqMyRoom) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{39}
}

type SRespMyRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespMyRoom_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespMyRoom_ErrCode" json:"errCode,omitempty"`
	Room    *def.Room           `protobuf:"bytes,10,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *SRespMyRoom) Reset() {
	*x = SRespMyRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespMyRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespMyRoom) ProtoMessage() {}

func (x *SRespMyRoom) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespMyRoom.ProtoReflect.Descriptor instead.
func (*SRespMyRoom) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{40}
}

func (x *SRespMyRoom) GetErrCode() SRespMyRoom_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespMyRoom_None
}

func (x *SRespMyRoom) GetRoom() *def.Room {
	if x != nil {
		return x.Room
	}
	return nil
}

type CReqRoomCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settting *def.RoomSetting `protobuf:"bytes,1,opt,name=settting,proto3" json:"settting,omitempty"`
}

func (x *CReqRoomCreate) Reset() {
	*x = CReqRoomCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqRoomCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqRoomCreate) ProtoMessage() {}

func (x *CReqRoomCreate) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqRoomCreate.ProtoReflect.Descriptor instead.
func (*CReqRoomCreate) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{41}
}

func (x *CReqRoomCreate) GetSettting() *def.RoomSetting {
	if x != nil {
		return x.Settting
	}
	return nil
}

type SRespRoomCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespRoomCreate_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespRoomCreate_ErrCode" json:"errCode,omitempty"`
	Room    *def.Room               `protobuf:"bytes,2,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *SRespRoomCreate) Reset() {
	*x = SRespRoomCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespRoomCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespRoomCreate) ProtoMessage() {}

func (x *SRespRoomCreate) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespRoomCreate.ProtoReflect.Descriptor instead.
func (*SRespRoomCreate) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{42}
}

func (x *SRespRoomCreate) GetErrCode() SRespRoomCreate_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespRoomCreate_None
}

func (x *SRespRoomCreate) GetRoom() *def.Room {
	if x != nil {
		return x.Room
	}
	return nil
}

//请求快速加入房间，如无可用房间，将创建新房间
type CReqRoomQuickJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameMode gameconf.GameModeTyp `protobuf:"varint,1,opt,name=gameMode,proto3,enum=gameconf.GameModeTyp" json:"gameMode,omitempty"`
}

func (x *CReqRoomQuickJoin) Reset() {
	*x = CReqRoomQuickJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqRoomQuickJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqRoomQuickJoin) ProtoMessage() {}

func (x *CReqRoomQuickJoin) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqRoomQuickJoin.ProtoReflect.Descriptor instead.
func (*CReqRoomQuickJoin) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{43}
}

func (x *CReqRoomQuickJoin) GetGameMode() gameconf.GameModeTyp {
	if x != nil {
		return x.GameMode
	}
	return gameconf.GameModeTyp_MGTInvalid
}

type SRespRoomQuickJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespRoomQuickJoin_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespRoomQuickJoin_ErrCode" json:"errCode,omitempty"`
	Room    *def.Room                  `protobuf:"bytes,2,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *SRespRoomQuickJoin) Reset() {
	*x = SRespRoomQuickJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespRoomQuickJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespRoomQuickJoin) ProtoMessage() {}

func (x *SRespRoomQuickJoin) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespRoomQuickJoin.ProtoReflect.Descriptor instead.
func (*SRespRoomQuickJoin) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{44}
}

func (x *SRespRoomQuickJoin) GetErrCode() SRespRoomQuickJoin_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespRoomQuickJoin_None
}

func (x *SRespRoomQuickJoin) GetRoom() *def.Room {
	if x != nil {
		return x.Room
	}
	return nil
}

//房间配置更改
type CReqRoomSettingChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting *def.RoomSetting `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"`
}

func (x *CReqRoomSettingChange) Reset() {
	*x = CReqRoomSettingChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqRoomSettingChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqRoomSettingChange) ProtoMessage() {}

func (x *CReqRoomSettingChange) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqRoomSettingChange.ProtoReflect.Descriptor instead.
func (*CReqRoomSettingChange) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{45}
}

func (x *CReqRoomSettingChange) GetSetting() *def.RoomSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

type SRespRoomSettingChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespRoomSettingChange_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespRoomSettingChange_ErrCode" json:"errCode,omitempty"`
	Setting *def.RoomSetting               `protobuf:"bytes,2,opt,name=setting,proto3" json:"setting,omitempty"`
}

func (x *SRespRoomSettingChange) Reset() {
	*x = SRespRoomSettingChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespRoomSettingChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespRoomSettingChange) ProtoMessage() {}

func (x *SRespRoomSettingChange) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespRoomSettingChange.ProtoReflect.Descriptor instead.
func (*SRespRoomSettingChange) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{46}
}

func (x *SRespRoomSettingChange) GetErrCode() SRespRoomSettingChange_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespRoomSettingChange_None
}

func (x *SRespRoomSettingChange) GetSetting() *def.RoomSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

type CReqRoomJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomNO uint32 `protobuf:"varint,1,opt,name=roomNO,proto3" json:"roomNO,omitempty"`
}

func (x *CReqRoomJoin) Reset() {
	*x = CReqRoomJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqRoomJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqRoomJoin) ProtoMessage() {}

func (x *CReqRoomJoin) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqRoomJoin.ProtoReflect.Descriptor instead.
func (*CReqRoomJoin) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{47}
}

func (x *CReqRoomJoin) GetRoomNO() uint32 {
	if x != nil {
		return x.RoomNO
	}
	return 0
}

type SRespRoomJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode      SRespRoomJoin_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespRoomJoin_ErrCode" json:"errCode,omitempty"`
	RoomNO       uint32                `protobuf:"varint,2,opt,name=roomNO,proto3" json:"roomNO,omitempty"`
	IsLooker     bool                  `protobuf:"varint,3,opt,name=isLooker,proto3" json:"isLooker,omitempty"`
	RoomIsInGame bool                  `protobuf:"varint,4,opt,name=roomIsInGame,proto3" json:"roomIsInGame,omitempty"`
	Room         *def.Room             `protobuf:"bytes,10,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *SRespRoomJoin) Reset() {
	*x = SRespRoomJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespRoomJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespRoomJoin) ProtoMessage() {}

func (x *SRespRoomJoin) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespRoomJoin.ProtoReflect.Descriptor instead.
func (*SRespRoomJoin) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{48}
}

func (x *SRespRoomJoin) GetErrCode() SRespRoomJoin_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespRoomJoin_None
}

func (x *SRespRoomJoin) GetRoomNO() uint32 {
	if x != nil {
		return x.RoomNO
	}
	return 0
}

func (x *SRespRoomJoin) GetIsLooker() bool {
	if x != nil {
		return x.IsLooker
	}
	return false
}

func (x *SRespRoomJoin) GetRoomIsInGame() bool {
	if x != nil {
		return x.RoomIsInGame
	}
	return false
}

func (x *SRespRoomJoin) GetRoom() *def.Room {
	if x != nil {
		return x.Room
	}
	return nil
}

//站起或坐下
type CReqRoomSeatChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetSeatId int32 `protobuf:"varint,1,opt,name=targetSeatId,proto3" json:"targetSeatId,omitempty"` //目标座位，-1代表站起当旁观
}

func (x *CReqRoomSeatChange) Reset() {
	*x = CReqRoomSeatChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqRoomSeatChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqRoomSeatChange) ProtoMessage() {}

func (x *CReqRoomSeatChange) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqRoomSeatChange.ProtoReflect.Descriptor instead.
func (*CReqRoomSeatChange) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{49}
}

func (x *CReqRoomSeatChange) GetTargetSeatId() int32 {
	if x != nil {
		return x.TargetSeatId
	}
	return 0
}

type SRespRoomSeatChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode      SRespRoomSeatChange_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespRoomSeatChange_ErrCode" json:"errCode,omitempty"`
	TargetSeatId int32                       `protobuf:"varint,2,opt,name=targetSeatId,proto3" json:"targetSeatId,omitempty"`                     //目标座位，-1代表站起当旁观
	LookerType   gameconf.LookerTyp          `protobuf:"varint,3,opt,name=lookerType,proto3,enum=gameconf.LookerTyp" json:"lookerType,omitempty"` //如果是旁观者，旁观者类型
	Room         *def.Room                   `protobuf:"bytes,10,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *SRespRoomSeatChange) Reset() {
	*x = SRespRoomSeatChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespRoomSeatChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespRoomSeatChange) ProtoMessage() {}

func (x *SRespRoomSeatChange) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespRoomSeatChange.ProtoReflect.Descriptor instead.
func (*SRespRoomSeatChange) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{50}
}

func (x *SRespRoomSeatChange) GetErrCode() SRespRoomSeatChange_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespRoomSeatChange_None
}

func (x *SRespRoomSeatChange) GetTargetSeatId() int32 {
	if x != nil {
		return x.TargetSeatId
	}
	return 0
}

func (x *SRespRoomSeatChange) GetLookerType() gameconf.LookerTyp {
	if x != nil {
		return x.LookerType
	}
	return gameconf.LookerTyp_LTInvalid
}

func (x *SRespRoomSeatChange) GetRoom() *def.Room {
	if x != nil {
		return x.Room
	}
	return nil
}

type CReqRoomLookerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CReqRoomLookerInfo) Reset() {
	*x = CReqRoomLookerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqRoomLookerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqRoomLookerInfo) ProtoMessage() {}

func (x *CReqRoomLookerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqRoomLookerInfo.ProtoReflect.Descriptor instead.
func (*CReqRoomLookerInfo) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{51}
}

type SRespRoomLookerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespRoomLookerInfo_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespRoomLookerInfo_ErrCode" json:"errCode,omitempty"`
	Lookers []*def.UserBrief            `protobuf:"bytes,2,rep,name=lookers,proto3" json:"lookers,omitempty"`
}

func (x *SRespRoomLookerInfo) Reset() {
	*x = SRespRoomLookerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespRoomLookerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespRoomLookerInfo) ProtoMessage() {}

func (x *SRespRoomLookerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespRoomLookerInfo.ProtoReflect.Descriptor instead.
func (*SRespRoomLookerInfo) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{52}
}

func (x *SRespRoomLookerInfo) GetErrCode() SRespRoomLookerInfo_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespRoomLookerInfo_None
}

func (x *SRespRoomLookerInfo) GetLookers() []*def.UserBrief {
	if x != nil {
		return x.Lookers
	}
	return nil
}

type CReqRoomReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ready bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *CReqRoomReady) Reset() {
	*x = CReqRoomReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqRoomReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqRoomReady) ProtoMessage() {}

func (x *CReqRoomReady) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqRoomReady.ProtoReflect.Descriptor instead.
func (*CReqRoomReady) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{53}
}

func (x *CReqRoomReady) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

type SRespRoomReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespRoomReady_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespRoomReady_ErrCode" json:"errCode,omitempty"`
	Ready   bool                   `protobuf:"varint,2,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *SRespRoomReady) Reset() {
	*x = SRespRoomReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespRoomReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespRoomReady) ProtoMessage() {}

func (x *SRespRoomReady) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespRoomReady.ProtoReflect.Descriptor instead.
func (*SRespRoomReady) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{54}
}

func (x *SRespRoomReady) GetErrCode() SRespRoomReady_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespRoomReady_None
}

func (x *SRespRoomReady) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

type CReqRoomLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CReqRoomLeave) Reset() {
	*x = CReqRoomLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqRoomLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqRoomLeave) ProtoMessage() {}

func (x *CReqRoomLeave) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqRoomLeave.ProtoReflect.Descriptor instead.
func (*CReqRoomLeave) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{55}
}

type SRespRoomLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespRoomLeave_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespRoomLeave_ErrCode" json:"errCode,omitempty"`
}

func (x *SRespRoomLeave) Reset() {
	*x = SRespRoomLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespRoomLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespRoomLeave) ProtoMessage() {}

func (x *SRespRoomLeave) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespRoomLeave.ProtoReflect.Descriptor instead.
func (*SRespRoomLeave) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{56}
}

func (x *SRespRoomLeave) GetErrCode() SRespRoomLeave_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespRoomLeave_None
}

//T出玩家
type CReqRoomKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KickAllLooker bool   `protobuf:"varint,1,opt,name=kickAllLooker,proto3" json:"kickAllLooker,omitempty"` //是否T所有旁观玩家
	TargetUserId  uint64 `protobuf:"varint,2,opt,name=targetUserId,proto3" json:"targetUserId,omitempty"`   //T出的玩家userId
}

func (x *CReqRoomKick) Reset() {
	*x = CReqRoomKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqRoomKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqRoomKick) ProtoMessage() {}

func (x *CReqRoomKick) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqRoomKick.ProtoReflect.Descriptor instead.
func (*CReqRoomKick) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{57}
}

func (x *CReqRoomKick) GetKickAllLooker() bool {
	if x != nil {
		return x.KickAllLooker
	}
	return false
}

func (x *CReqRoomKick) GetTargetUserId() uint64 {
	if x != nil {
		return x.TargetUserId
	}
	return 0
}

type SRespRoomKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespRoomKick_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespRoomKick_ErrCode" json:"errCode,omitempty"`
}

func (x *SRespRoomKick) Reset() {
	*x = SRespRoomKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespRoomKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespRoomKick) ProtoMessage() {}

func (x *SRespRoomKick) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespRoomKick.ProtoReflect.Descriptor instead.
func (*SRespRoomKick) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{58}
}

func (x *SRespRoomKick) GetErrCode() SRespRoomKick_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespRoomKick_None
}

//通知准备倒计时
type SNoticeRoomTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoticeType SNoticeRoomTimer_NoticeType `protobuf:"varint,1,opt,name=noticeType,proto3,enum=cmsg.SNoticeRoomTimer_NoticeType" json:"noticeType,omitempty"`
	EndTime    int64                       `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"` //倒计时截止时间
}

func (x *SNoticeRoomTimer) Reset() {
	*x = SNoticeRoomTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeRoomTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeRoomTimer) ProtoMessage() {}

func (x *SNoticeRoomTimer) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeRoomTimer.ProtoReflect.Descriptor instead.
func (*SNoticeRoomTimer) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{59}
}

func (x *SNoticeRoomTimer) GetNoticeType() SNoticeRoomTimer_NoticeType {
	if x != nil {
		return x.NoticeType
	}
	return SNoticeRoomTimer_Invalid
}

func (x *SNoticeRoomTimer) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// 被T出通知
type SNoticeRoomKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KickerUserId uint64                  `protobuf:"varint,1,opt,name=kickerUserId,proto3" json:"kickerUserId,omitempty"` //T人者
	RoomId       uint32                  `protobuf:"varint,2,opt,name=roomId,proto3" json:"roomId,omitempty"`
	KickType     SNoticeRoomKick_KickTyp `protobuf:"varint,3,opt,name=kickType,proto3,enum=cmsg.SNoticeRoomKick_KickTyp" json:"kickType,omitempty"`
}

func (x *SNoticeRoomKick) Reset() {
	*x = SNoticeRoomKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeRoomKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeRoomKick) ProtoMessage() {}

func (x *SNoticeRoomKick) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeRoomKick.ProtoReflect.Descriptor instead.
func (*SNoticeRoomKick) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{60}
}

func (x *SNoticeRoomKick) GetKickerUserId() uint64 {
	if x != nil {
		return x.KickerUserId
	}
	return 0
}

func (x *SNoticeRoomKick) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SNoticeRoomKick) GetKickType() SNoticeRoomKick_KickTyp {
	if x != nil {
		return x.KickType
	}
	return SNoticeRoomKick_Invalid
}

//更换座位事件（包含变成旁观事件）
type SNoticeRoomChangeSeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId     int32              `protobuf:"varint,1,opt,name=seatId,proto3" json:"seatId,omitempty"`                                 //换到哪个座位，-1代表旁观
	LookerType gameconf.LookerTyp `protobuf:"varint,2,opt,name=lookerType,proto3,enum=gameconf.LookerTyp" json:"lookerType,omitempty"` //如果是旁观者，旁观类型
}

func (x *SNoticeRoomChangeSeat) Reset() {
	*x = SNoticeRoomChangeSeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeRoomChangeSeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeRoomChangeSeat) ProtoMessage() {}

func (x *SNoticeRoomChangeSeat) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeRoomChangeSeat.ProtoReflect.Descriptor instead.
func (*SNoticeRoomChangeSeat) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{61}
}

func (x *SNoticeRoomChangeSeat) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *SNoticeRoomChangeSeat) GetLookerType() gameconf.LookerTyp {
	if x != nil {
		return x.LookerType
	}
	return gameconf.LookerTyp_LTInvalid
}

type CReqRoomStartGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CReqRoomStartGame) Reset() {
	*x = CReqRoomStartGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqRoomStartGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqRoomStartGame) ProtoMessage() {}

func (x *CReqRoomStartGame) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqRoomStartGame.ProtoReflect.Descriptor instead.
func (*CReqRoomStartGame) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{62}
}

type SRespRoomStartGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespRoomStartGame_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespRoomStartGame_ErrCode" json:"errCode,omitempty"`
}

func (x *SRespRoomStartGame) Reset() {
	*x = SRespRoomStartGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespRoomStartGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespRoomStartGame) ProtoMessage() {}

func (x *SRespRoomStartGame) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespRoomStartGame.ProtoReflect.Descriptor instead.
func (*SRespRoomStartGame) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{63}
}

func (x *SRespRoomStartGame) GetErrCode() SRespRoomStartGame_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespRoomStartGame_None
}

//房间状态改变通知
type SNotifyRoomChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action       SNotifyRoomChange_Action `protobuf:"varint,1,opt,name=action,proto3,enum=cmsg.SNotifyRoomChange_Action" json:"action,omitempty"`
	ActionUserId uint64                   `protobuf:"varint,2,opt,name=actionUserId,proto3" json:"actionUserId,omitempty"`
	ActionSeatId int32                    `protobuf:"varint,3,opt,name=actionSeatId,proto3" json:"actionSeatId,omitempty"`
	KickerUserId uint64                   `protobuf:"varint,4,opt,name=kickerUserId,proto3" json:"kickerUserId,omitempty"` //当Action=LeaveByKick时有值，代表T人者的userId
	Room         *def.Room                `protobuf:"bytes,10,opt,name=room,proto3" json:"room,omitempty"`                 //room最新信息
}

func (x *SNotifyRoomChange) Reset() {
	*x = SNotifyRoomChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNotifyRoomChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNotifyRoomChange) ProtoMessage() {}

func (x *SNotifyRoomChange) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNotifyRoomChange.ProtoReflect.Descriptor instead.
func (*SNotifyRoomChange) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{64}
}

func (x *SNotifyRoomChange) GetAction() SNotifyRoomChange_Action {
	if x != nil {
		return x.Action
	}
	return SNotifyRoomChange_Invalid
}

func (x *SNotifyRoomChange) GetActionUserId() uint64 {
	if x != nil {
		return x.ActionUserId
	}
	return 0
}

func (x *SNotifyRoomChange) GetActionSeatId() int32 {
	if x != nil {
		return x.ActionSeatId
	}
	return 0
}

func (x *SNotifyRoomChange) GetKickerUserId() uint64 {
	if x != nil {
		return x.KickerUserId
	}
	return 0
}

func (x *SNotifyRoomChange) GetRoom() *def.Room {
	if x != nil {
		return x.Room
	}
	return nil
}

//房间事件通知
type SNoticeRoomEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event      SNoticeRoomEvent_Event `protobuf:"varint,1,opt,name=event,proto3,enum=cmsg.SNoticeRoomEvent_Event" json:"event,omitempty"`
	ActionUser *def.UserBrief         `protobuf:"bytes,2,opt,name=actionUser,proto3" json:"actionUser,omitempty"`
}

func (x *SNoticeRoomEvent) Reset() {
	*x = SNoticeRoomEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeRoomEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeRoomEvent) ProtoMessage() {}

func (x *SNoticeRoomEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeRoomEvent.ProtoReflect.Descriptor instead.
func (*SNoticeRoomEvent) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{65}
}

func (x *SNoticeRoomEvent) GetEvent() SNoticeRoomEvent_Event {
	if x != nil {
		return x.Event
	}
	return SNoticeRoomEvent_Invalid
}

func (x *SNoticeRoomEvent) GetActionUser() *def.UserBrief {
	if x != nil {
		return x.ActionUser
	}
	return nil
}

//同步旁观者数量
type SSyncLookerCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SSyncLookerCount) Reset() {
	*x = SSyncLookerCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSyncLookerCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSyncLookerCount) ProtoMessage() {}

func (x *SSyncLookerCount) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSyncLookerCount.ProtoReflect.Descriptor instead.
func (*SSyncLookerCount) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{66}
}

func (x *SSyncLookerCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SNoticeDebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SNoticeDebugInfo) Reset() {
	*x = SNoticeDebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeDebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeDebugInfo) ProtoMessage() {}

func (x *SNoticeDebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeDebugInfo.ProtoReflect.Descriptor instead.
func (*SNoticeDebugInfo) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{67}
}

func (x *SNoticeDebugInfo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SNoticeLogout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason gameconf.KickUserOutReason `protobuf:"varint,1,opt,name=reason,proto3,enum=gameconf.KickUserOutReason" json:"reason,omitempty"`
	Msg    string                     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data   []int64                    `protobuf:"varint,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SNoticeLogout) Reset() {
	*x = SNoticeLogout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeLogout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeLogout) ProtoMessage() {}

func (x *SNoticeLogout) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeLogout.ProtoReflect.Descriptor instead.
func (*SNoticeLogout) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{68}
}

func (x *SNoticeLogout) GetReason() gameconf.KickUserOutReason {
	if x != nil {
		return x.Reason
	}
	return gameconf.KickUserOutReason_KUOInvalid
}

func (x *SNoticeLogout) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SNoticeLogout) GetData() []int64 {
	if x != nil {
		return x.Data
	}
	return nil
}

//同步时间
type SSyncServerTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerTime int64 `protobuf:"varint,1,opt,name=serverTime,proto3" json:"serverTime,omitempty"`
}

func (x *SSyncServerTime) Reset() {
	*x = SSyncServerTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSyncServerTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSyncServerTime) ProtoMessage() {}

func (x *SSyncServerTime) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSyncServerTime.ProtoReflect.Descriptor instead.
func (*SSyncServerTime) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{69}
}

func (x *SSyncServerTime) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

//通用返回错误
type SRespCommonError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespCommonError_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespCommonError_ErrCode" json:"errCode,omitempty"`
}

func (x *SRespCommonError) Reset() {
	*x = SRespCommonError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespCommonError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespCommonError) ProtoMessage() {}

func (x *SRespCommonError) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespCommonError.ProtoReflect.Descriptor instead.
func (*SRespCommonError) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{70}
}

func (x *SRespCommonError) GetErrCode() SRespCommonError_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespCommonError_None
}

//匹配
type CReqMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode CReqMatch_ModeID `protobuf:"varint,1,opt,name=mode,proto3,enum=cmsg.CReqMatch_ModeID" json:"mode,omitempty"`
}

func (x *CReqMatch) Reset() {
	*x = CReqMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqMatch) ProtoMessage() {}

func (x *CReqMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqMatch.ProtoReflect.Descriptor instead.
func (*CReqMatch) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{71}
}

func (x *CReqMatch) GetMode() CReqMatch_ModeID {
	if x != nil {
		return x.Mode
	}
	return CReqMatch_ModeNone
}

type SRespMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespMatch_ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cmsg.SRespMatch_ErrCode" json:"errCode,omitempty"`
	Model   int32              `protobuf:"varint,2,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *SRespMatch) Reset() {
	*x = SRespMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespMatch) ProtoMessage() {}

func (x *SRespMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespMatch.ProtoReflect.Descriptor instead.
func (*SRespMatch) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{72}
}

func (x *SRespMatch) GetErrCode() SRespMatch_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespMatch_None
}

func (x *SRespMatch) GetModel() int32 {
	if x != nil {
		return x.Model
	}
	return 0
}

// 匹配完成通知
type SNoticeMatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model      int32                         `protobuf:"varint,2,opt,name=model,proto3" json:"model,omitempty"`
	NoticeType SNoticeMatchResult_NoticeType `protobuf:"varint,3,opt,name=noticeType,proto3,enum=cmsg.SNoticeMatchResult_NoticeType" json:"noticeType,omitempty"`
	Players    []*def.UserBrief              `protobuf:"bytes,5,rep,name=players,proto3" json:"players,omitempty"`
	Room       *def.Room                     `protobuf:"bytes,6,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *SNoticeMatchResult) Reset() {
	*x = SNoticeMatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeMatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeMatchResult) ProtoMessage() {}

func (x *SNoticeMatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeMatchResult.ProtoReflect.Descriptor instead.
func (*SNoticeMatchResult) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{73}
}

func (x *SNoticeMatchResult) GetModel() int32 {
	if x != nil {
		return x.Model
	}
	return 0
}

func (x *SNoticeMatchResult) GetNoticeType() SNoticeMatchResult_NoticeType {
	if x != nil {
		return x.NoticeType
	}
	return SNoticeMatchResult_Invalid
}

func (x *SNoticeMatchResult) GetPlayers() []*def.UserBrief {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SNoticeMatchResult) GetRoom() *def.Room {
	if x != nil {
		return x.Room
	}
	return nil
}

// 取消匹配
type CCancelMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCancelMatch) Reset() {
	*x = CCancelMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCancelMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCancelMatch) ProtoMessage() {}

func (x *CCancelMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCancelMatch.ProtoReflect.Descriptor instead.
func (*CCancelMatch) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{74}
}

type SRespCancelMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespCancelMatch_ErrCode `protobuf:"varint,2,opt,name=errCode,proto3,enum=cmsg.SRespCancelMatch_ErrCode" json:"errCode,omitempty"`
}

func (x *SRespCancelMatch) Reset() {
	*x = SRespCancelMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespCancelMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespCancelMatch) ProtoMessage() {}

func (x *SRespCancelMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespCancelMatch.ProtoReflect.Descriptor instead.
func (*SRespCancelMatch) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{75}
}

func (x *SRespCancelMatch) GetErrCode() SRespCancelMatch_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespCancelMatch_None
}

type CCardGroupOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptType    CCardGroupOpt_OptType `protobuf:"varint,1,opt,name=optType,proto3,enum=cmsg.CCardGroupOpt_OptType" json:"optType,omitempty"`
	CardsGroup *def.CardGroup        `protobuf:"bytes,2,opt,name=cardsGroup,proto3" json:"cardsGroup,omitempty"` //
}

func (x *CCardGroupOpt) Reset() {
	*x = CCardGroupOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCardGroupOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCardGroupOpt) ProtoMessage() {}

func (x *CCardGroupOpt) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCardGroupOpt.ProtoReflect.Descriptor instead.
func (*CCardGroupOpt) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{76}
}

func (x *CCardGroupOpt) GetOptType() CCardGroupOpt_OptType {
	if x != nil {
		return x.OptType
	}
	return CCardGroupOpt_OptNone
}

func (x *CCardGroupOpt) GetCardsGroup() *def.CardGroup {
	if x != nil {
		return x.CardsGroup
	}
	return nil
}

type SRespCardGroupOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode SRespCardGroupOpt_ErrCode     `protobuf:"varint,2,opt,name=errCode,proto3,enum=cmsg.SRespCardGroupOpt_ErrCode" json:"errCode,omitempty"`
	SCode   SRespCardGroupOpt_SuccessCode `protobuf:"varint,3,opt,name=sCode,proto3,enum=cmsg.SRespCardGroupOpt_SuccessCode" json:"sCode,omitempty"`
}

func (x *SRespCardGroupOpt) Reset() {
	*x = SRespCardGroupOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespCardGroupOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespCardGroupOpt) ProtoMessage() {}

func (x *SRespCardGroupOpt) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespCardGroupOpt.ProtoReflect.Descriptor instead.
func (*SRespCardGroupOpt) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{77}
}

func (x *SRespCardGroupOpt) GetErrCode() SRespCardGroupOpt_ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return SRespCardGroupOpt_ErrNone
}

func (x *SRespCardGroupOpt) GetSCode() SRespCardGroupOpt_SuccessCode {
	if x != nil {
		return x.SCode
	}
	return SRespCardGroupOpt_SuccessNone
}

type CReqCardGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CReqCardGroups) Reset() {
	*x = CReqCardGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqCardGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqCardGroups) ProtoMessage() {}

func (x *CReqCardGroups) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqCardGroups.ProtoReflect.Descriptor instead.
func (*CReqCardGroups) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{78}
}

type SRespCardGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NowUseId   int32            `protobuf:"varint,1,opt,name=nowUseId,proto3" json:"nowUseId,omitempty"` //玩家当前使用的卡组ID
	CardGroups []*def.CardGroup `protobuf:"bytes,2,rep,name=cardGroups,proto3" json:"cardGroups,omitempty"`
}

func (x *SRespCardGroups) Reset() {
	*x = SRespCardGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespCardGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespCardGroups) ProtoMessage() {}

func (x *SRespCardGroups) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespCardGroups.ProtoReflect.Descriptor instead.
func (*SRespCardGroups) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{79}
}

func (x *SRespCardGroups) GetNowUseId() int32 {
	if x != nil {
		return x.NowUseId
	}
	return 0
}

func (x *SRespCardGroups) GetCardGroups() []*def.CardGroup {
	if x != nil {
		return x.CardGroups
	}
	return nil
}

type SNoticeGameReady_Seat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId       int32                     `protobuf:"varint,1,opt,name=seatId,proto3" json:"seatId,omitempty"`
	Head         *def.HeadInfo             `protobuf:"bytes,2,opt,name=head,proto3" json:"head,omitempty"`
	ConnectState gameconf.UserConnectState `protobuf:"varint,3,opt,name=connectState,proto3,enum=gameconf.UserConnectState" json:"connectState,omitempty"` //玩家在线，离线，离开状态
}

func (x *SNoticeGameReady_Seat) Reset() {
	*x = SNoticeGameReady_Seat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeGameReady_Seat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeGameReady_Seat) ProtoMessage() {}

func (x *SNoticeGameReady_Seat) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeGameReady_Seat.ProtoReflect.Descriptor instead.
func (*SNoticeGameReady_Seat) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{7, 0}
}

func (x *SNoticeGameReady_Seat) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *SNoticeGameReady_Seat) GetHead() *def.HeadInfo {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *SNoticeGameReady_Seat) GetConnectState() gameconf.UserConnectState {
	if x != nil {
		return x.ConnectState
	}
	return gameconf.UserConnectState_USConnect
}

type SRespGameScene_Seat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId       int32                     `protobuf:"varint,1,opt,name=seatId,proto3" json:"seatId,omitempty"`
	UserId       uint64                    `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	UserBrief    *def.UserBrief            `protobuf:"bytes,3,opt,name=userBrief,proto3" json:"userBrief,omitempty"`
	ConnectState gameconf.UserConnectState `protobuf:"varint,4,opt,name=connectState,proto3,enum=gameconf.UserConnectState" json:"connectState,omitempty"` //玩家在线，离线，离开状态
	GameSeat     *def.GameSeat             `protobuf:"bytes,5,opt,name=gameSeat,proto3" json:"gameSeat,omitempty"`
}

func (x *SRespGameScene_Seat) Reset() {
	*x = SRespGameScene_Seat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRespGameScene_Seat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRespGameScene_Seat) ProtoMessage() {}

func (x *SRespGameScene_Seat) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRespGameScene_Seat.ProtoReflect.Descriptor instead.
func (*SRespGameScene_Seat) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{9, 0}
}

func (x *SRespGameScene_Seat) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *SRespGameScene_Seat) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SRespGameScene_Seat) GetUserBrief() *def.UserBrief {
	if x != nil {
		return x.UserBrief
	}
	return nil
}

func (x *SRespGameScene_Seat) GetConnectState() gameconf.UserConnectState {
	if x != nil {
		return x.ConnectState
	}
	return gameconf.UserConnectState_USConnect
}

func (x *SRespGameScene_Seat) GetGameSeat() *def.GameSeat {
	if x != nil {
		return x.GameSeat
	}
	return nil
}

type SNoticeOp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptCount      int32              `protobuf:"varint,1,opt,name=optCount,proto3" json:"optCount,omitempty"`                                       //选牌时，代表选牌个数
	SelectCardTyp def.SelectCardType `protobuf:"varint,2,opt,name=selectCardTyp,proto3,enum=gamedef.SelectCardType" json:"selectCardTyp,omitempty"` //选牌类型
}

func (x *SNoticeOp_Data) Reset() {
	*x = SNoticeOp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNoticeOp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNoticeOp_Data) ProtoMessage() {}

func (x *SNoticeOp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNoticeOp_Data.ProtoReflect.Descriptor instead.
func (*SNoticeOp_Data) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{15, 0}
}

func (x *SNoticeOp_Data) GetOptCount() int32 {
	if x != nil {
		return x.OptCount
	}
	return 0
}

func (x *SNoticeOp_Data) GetSelectCardTyp() def.SelectCardType {
	if x != nil {
		return x.SelectCardTyp
	}
	return def.SelectCardType_Any
}

type SSyncCard_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeType SSyncCard_ChangeType `protobuf:"varint,1,opt,name=changeType,proto3,enum=cmsg.SSyncCard_ChangeType" json:"changeType,omitempty"`
	Change     int32                `protobuf:"varint,2,opt,name=change,proto3" json:"change,omitempty"`
	Old        int32                `protobuf:"varint,3,opt,name=old,proto3" json:"old,omitempty"`
	New        int32                `protobuf:"varint,4,opt,name=new,proto3" json:"new,omitempty"`
	OldPos     *def.Position        `protobuf:"bytes,5,opt,name=oldPos,proto3" json:"oldPos,omitempty"`
	NewPos     *def.Position        `protobuf:"bytes,6,opt,name=newPos,proto3" json:"newPos,omitempty"`
	NewBuffId  int32                `protobuf:"varint,9,opt,name=newBuffId,proto3" json:"newBuffId,omitempty"`
}

func (x *SSyncCard_Change) Reset() {
	*x = SSyncCard_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSyncCard_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSyncCard_Change) ProtoMessage() {}

func (x *SSyncCard_Change) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSyncCard_Change.ProtoReflect.Descriptor instead.
func (*SSyncCard_Change) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{21, 0}
}

func (x *SSyncCard_Change) GetChangeType() SSyncCard_ChangeType {
	if x != nil {
		return x.ChangeType
	}
	return SSyncCard_None
}

func (x *SSyncCard_Change) GetChange() int32 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *SSyncCard_Change) GetOld() int32 {
	if x != nil {
		return x.Old
	}
	return 0
}

func (x *SSyncCard_Change) GetNew() int32 {
	if x != nil {
		return x.New
	}
	return 0
}

func (x *SSyncCard_Change) GetOldPos() *def.Position {
	if x != nil {
		return x.OldPos
	}
	return nil
}

func (x *SSyncCard_Change) GetNewPos() *def.Position {
	if x != nil {
		return x.NewPos
	}
	return nil
}

func (x *SSyncCard_Change) GetNewBuffId() int32 {
	if x != nil {
		return x.NewBuffId
	}
	return 0
}

type SSyncCamp_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeType SSyncCamp_ChangeType `protobuf:"varint,1,opt,name=changeType,proto3,enum=cmsg.SSyncCamp_ChangeType" json:"changeType,omitempty"`
	Change     int32                `protobuf:"varint,2,opt,name=change,proto3" json:"change,omitempty"`
	Old        int32                `protobuf:"varint,3,opt,name=old,proto3" json:"old,omitempty"`
	New        int32                `protobuf:"varint,4,opt,name=new,proto3" json:"new,omitempty"`
	NewBuffs   []*def.Buff          `protobuf:"bytes,9,rep,name=newBuffs,proto3" json:"newBuffs,omitempty"`
}

func (x *SSyncCamp_Change) Reset() {
	*x = SSyncCamp_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmsg_client_msg_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSyncCamp_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSyncCamp_Change) ProtoMessage() {}

func (x *SSyncCamp_Change) ProtoReflect() protoreflect.Message {
	mi := &file_cmsg_client_msg_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSyncCamp_Change.ProtoReflect.Descriptor instead.
func (*SSyncCamp_Change) Descriptor() ([]byte, []int) {
	return file_cmsg_client_msg_proto_rawDescGZIP(), []int{24, 0}
}

func (x *SSyncCamp_Change) GetChangeType() SSyncCamp_ChangeType {
	if x != nil {
		return x.ChangeType
	}
	return SSyncCamp_None
}

func (x *SSyncCamp_Change) GetChange() int32 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *SSyncCamp_Change) GetOld() int32 {
	if x != nil {
		return x.Old
	}
	return 0
}

func (x *SSyncCamp_Change) GetNew() int32 {
	if x != nil {
		return x.New
	}
	return 0
}

func (x *SSyncCamp_Change) GetNewBuffs() []*def.Buff {
	if x != nil {
		return x.NewBuffs
	}
	return nil
}

var File_cmsg_client_msg_proto protoreflect.FileDescriptor

var file_cmsg_client_msg_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6d, 0x73, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x6d, 0x73, 0x67, 0x1a, 0x36, 0x73,
	0x61, 0x6e, 0x67, 0x75, 0x6f, 0x73, 0x68, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x67, 0x73,
	0x5f, 0x68, 0x65, 0x72, 0x6f, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x6d,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x73, 0x61, 0x6e, 0x67, 0x75, 0x6f, 0x73, 0x68, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x67, 0x73, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x78, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x66, 0x2f, 0x64, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x08, 0x43, 0x52, 0x65, 0x71, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x76, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x76, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x3f, 0x0a, 0x09, 0x53, 0x52, 0x65, 0x73, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x76, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x76, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x09, 0x43, 0x52, 0x65, 0x71, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xa9, 0x04, 0x0a, 0x0a, 0x53, 0x52, 0x65, 0x73, 0x70, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x32, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x00, 0x52, 0x07, 0x65, 0x72, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x42, 0x72, 0x69,
	0x65, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64,
	0x65, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x66, 0x67,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x66, 0x67, 0x22, 0xf3, 0x01, 0x0a, 0x07, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x75, 0x63, 0x63, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x72, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x72, 0x72, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x72, 0x72,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x72, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x06, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x72, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x72, 0x72, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x72, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x0a, 0x22, 0x42,
	0x0a, 0x0e, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66,
	0x12, 0x30, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x42, 0x72, 0x69,
	0x65, 0x66, 0x22, 0x0c, 0x0a, 0x0a, 0x43, 0x52, 0x65, 0x71, 0x4d, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xad, 0x01, 0x0a, 0x0b, 0x53, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x33, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x2d, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x22, 0x22, 0x0a, 0x07,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x75, 0x63, 0x63, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x01,
	0x22, 0xce, 0x02, 0x0a, 0x10, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x65, 0x61, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x2e,
	0x53, 0x65, 0x61, 0x74, 0x52, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x85, 0x01, 0x0a, 0x04, 0x53, 0x65,
	0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x68, 0x65,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64,
	0x65, 0x66, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x68, 0x65, 0x61,
	0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x52, 0x65, 0x71, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x22, 0x86, 0x07, 0x0a, 0x0e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52,
	0x65, 0x73, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x72, 0x6f, 0x6f,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x4e, 0x4f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x4f,
	0x12, 0x20, 0x0a, 0x09, 0x6f, 0x70, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x53, 0x65, 0x61, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x70, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x65,
	0x61, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x67,
	0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x2e,
	0x53, 0x65, 0x61, 0x74, 0x52, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x79, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x79, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0xd7, 0x01, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65,
	0x66, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x61, 0x74, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x74,
	0x22, 0x49, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x72, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x72,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x10, 0x03, 0x22, 0x10, 0x0a, 0x0e, 0x43,
	0x52, 0x65, 0x71, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0x88, 0x01,
	0x0a, 0x0f, 0x53, 0x52, 0x65, 0x73, 0x70, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x12, 0x37, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x22, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0x99, 0x01, 0x0a,
	0x11, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x68, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x0f, 0x53, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f,
	0x70, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66,
	0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x22, 0xb1, 0x03, 0x0a, 0x09, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x12, 0x2e,
	0x0a, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x2e,
	0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6f, 0x70, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x70, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6f, 0x70, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65,
	0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x70,
	0x65, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x50, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x50, 0x1a, 0x61, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a,
	0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x22, 0x46, 0x0a, 0x06,
	0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61,
	0x6d, 0x70, 0x10, 0x03, 0x22, 0x87, 0x02, 0x0a, 0x07, 0x43, 0x52, 0x65, 0x71, 0x4f, 0x70, 0x74,
	0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x52, 0x65, 0x71, 0x4f, 0x70, 0x74, 0x2e,
	0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x00, 0x52, 0x07, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x64, 0x65, 0x66, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x10, 0x02, 0x22, 0xa0,
	0x01, 0x0a, 0x08, 0x53, 0x52, 0x65, 0x73, 0x70, 0x4f, 0x70, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63,
	0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x4f, 0x70, 0x74, 0x2e, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x62, 0x0a,
	0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x55, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x74, 0x4d, 0x79, 0x54, 0x75, 0x72,
	0x6e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x72, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x53, 0x61, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x72, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x04, 0x22, 0xd5, 0x01, 0x0a, 0x07, 0x43, 0x52, 0x65, 0x71, 0x41, 0x63, 0x74, 0x12, 0x2a, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e,
	0x41, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09,
	0x61, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x22, 0xb9, 0x06, 0x0a, 0x08, 0x53, 0x52,
	0x65, 0x73, 0x70, 0x41, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x41, 0x63, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x64, 0x65, 0x66, 0x2e, 0x41, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x09,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x35, 0x0a,
	0x09, 0x61, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x63, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x61, 0x63, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x22, 0xce, 0x04, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x55, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x72, 0x72,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x72, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x72, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f,
	0x73, 0x4e, 0x6f, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x45,
	0x72, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x4e, 0x6f, 0x74, 0x4d, 0x79,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x72, 0x72, 0x41, 0x50, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x06, 0x12,
	0x10, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x74, 0x4d, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x10,
	0x07, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x72, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x72, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x43, 0x66, 0x67, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x09, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x72, 0x72, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x66, 0x67, 0x4e, 0x6f, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x72, 0x72, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x43, 0x66, 0x67, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x0b,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x72, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x72, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x46, 0x61, 0x63, 0x65, 0x55,
	0x70, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x72, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x61, 0x63, 0x65, 0x55, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x10, 0x0e, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x72, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x43, 0x61, 0x72,
	0x64, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x72, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x72, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x46, 0x61, 0x63, 0x65, 0x55, 0x70, 0x10, 0x11,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x72, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x72, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x43,
	0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x79, 0x4f, 0x77, 0x6e,
	0x43, 0x61, 0x72, 0x64, 0x10, 0x14, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x43, 0x61, 0x6e,
	0x4e, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x79, 0x4f, 0x77, 0x6e, 0x43, 0x61,
	0x6d, 0x70, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x72, 0x72, 0x41, 0x63, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x16, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x10, 0x17, 0x22, 0xb9, 0x01, 0x0a, 0x08, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x41,
	0x63, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6f, 0x70, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70,
	0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x22, 0xe7, 0x04, 0x0a, 0x09, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x21, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61,
	0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6d,
	0x73, 0x67, 0x2e, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x70, 0x65, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x1a, 0xf4,
	0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x65,
	0x77, 0x12, 0x29, 0x0a, 0x06, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x73, 0x12, 0x29, 0x0a, 0x06,
	0x6e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x42, 0x75,
	0x66, 0x66, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x42,
	0x75, 0x66, 0x66, 0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x63,
	0x65, 0x55, 0x70, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x50, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x48, 0x50, 0x4d, 0x61, 0x78, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x69, 0x65, 0x10, 0x06, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x6f, 0x73, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x75, 0x66, 0x66, 0x10, 0x08,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x61,
	0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x61, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x55, 0x70, 0x10, 0x0d, 0x22, 0xb3, 0x01, 0x0a, 0x0d,
	0x53, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x65, 0x61,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12,
	0x24, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x00, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x49,
	0x64, 0x22, 0x54, 0x0a, 0x10, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x65, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x9f, 0x03, 0x0a, 0x09, 0x53, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x61, 0x6d, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x1a, 0xab, 0x01,
	0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63,
	0x6d, 0x73, 0x67, 0x2e, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x61, 0x6d, 0x70, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x65, 0x77,
	0x12, 0x29, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x42, 0x75, 0x66, 0x66, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x42, 0x75, 0x66,
	0x66, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x42, 0x75, 0x66, 0x66, 0x73, 0x22, 0x7c, 0x0a, 0x0a, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x50, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x72,
	0x79, 0x73, 0x74, 0x61, 0x6c, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x72, 0x79, 0x73, 0x74,
	0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x07, 0x22, 0xd0, 0x02, 0x0a, 0x0d, 0x53, 0x53,
	0x79, 0x6e, 0x63, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x48, 0x61, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65,
	0x66, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x67, 0x65, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65,
	0x66, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x6c, 0x6f, 0x73, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64,
	0x65, 0x66, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x68, 0x61, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6c, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x22, 0x36, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x72, 0x61, 0x77, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x03, 0x22, 0x39, 0x0a, 0x0e,
	0x53, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x27,
	0x0a, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x74,
	0x52, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x22, 0x2b, 0x0a, 0x0f, 0x53, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69,
	0x6e, 0x53, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x69, 0x6e,
	0x53, 0x65, 0x61, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x52, 0x65, 0x71, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x43, 0x75, 0x72, 0x4f, 0x70, 0x74, 0x22, 0x75, 0x0a, 0x11, 0x53, 0x52, 0x65, 0x73,
	0x70, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x75, 0x72, 0x4f, 0x70, 0x74, 0x12, 0x39, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x43, 0x75, 0x72, 0x4f, 0x70, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x25, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x74, 0x4d, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x10, 0x01, 0x22,
	0x2a, 0x0a, 0x0c, 0x43, 0x52, 0x65, 0x71, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x45, 0x0a, 0x0d, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x10, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x65, 0x61, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x61, 0x64, 0x12,
	0x2b, 0x0a, 0x08, 0x68, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x08, 0x68, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x65,
	0x77, 0x22, 0x50, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x48, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x69, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x50, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x10, 0x05, 0x22, 0x21, 0x0a, 0x0d, 0x43, 0x52, 0x65, 0x71, 0x47, 0x4d, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0x21, 0x0a, 0x0d, 0x53, 0x52, 0x65, 0x71, 0x47, 0x4d,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x20, 0x0a, 0x0c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xba, 0x01, 0x0a, 0x08,
	0x43, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x07,
	0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x09, 0x53, 0x52, 0x65,
	0x73, 0x70, 0x43, 0x68, 0x61, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a,
	0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x7a, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x74,
	0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x72, 0x72, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x72, 0x72, 0x57, 0x6f, 0x72, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x72, 0x72, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x05, 0x22, 0xe8, 0x01,
	0x0a, 0x0e, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67,
	0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x52, 0x07, 0x6d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x0c, 0x0a, 0x0a, 0x43, 0x52, 0x65, 0x71,
	0x4d, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x53, 0x52, 0x65, 0x73, 0x70,
	0x4d, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x4d, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x72,
	0x6f, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x64, 0x65, 0x66, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x23,
	0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x01, 0x22, 0x42, 0x0a, 0x0e, 0x43, 0x52, 0x65, 0x71, 0x52, 0x6f, 0x6f, 0x6d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65,
	0x66, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xfa, 0x01, 0x0a, 0x0f, 0x53, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63,
	0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x8a, 0x01, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x72, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x72, 0x72, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e, 0x52, 0x6f, 0x6f,
	0x6d, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x72, 0x72, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x72, 0x72,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x72, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x05,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x72, 0x72, 0x53, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x10, 0x06, 0x22, 0x46, 0x0a, 0x11, 0x43, 0x52, 0x65, 0x71, 0x52, 0x6f, 0x6f, 0x6d,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xd5, 0x01, 0x0a,
	0x12, 0x53, 0x52, 0x65, 0x73, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4a,
	0x6f, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x2e, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x21, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72, 0x6f,
	0x6f, 0x6d, 0x22, 0x60, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x72, 0x72, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x72, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x72, 0x72, 0x53, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x10, 0x06, 0x22, 0x47, 0x0a, 0x15, 0x43, 0x52, 0x65, 0x71, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x96, 0x02,
	0x0a, 0x16, 0x53, 0x52, 0x65, 0x73, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6d, 0x73, 0x67,
	0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x64, 0x65, 0x66, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x8b, 0x01, 0x0a, 0x07, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x72, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x72, 0x72, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x4e,
	0x6f, 0x74, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x72,
	0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x72, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x61, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x10, 0x06, 0x22, 0x26, 0x0a, 0x0c, 0x43, 0x52, 0x65, 0x71, 0x52, 0x6f,
	0x6f, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x4f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x4f, 0x22, 0xac,
	0x03, 0x0a, 0x0d, 0x53, 0x52, 0x65, 0x73, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x4a, 0x6f, 0x69, 0x6e,
	0x12, 0x35, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x52, 0x6f,
	0x6f, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x4e,
	0x4f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x4f, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x73, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x73, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72, 0x6f,
	0x6f, 0x6d, 0x22, 0xe8, 0x01, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x72, 0x72, 0x52,
	0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x45, 0x72, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x72, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x72, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x72, 0x72, 0x53, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x06, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x72, 0x72, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x4c, 0x6f, 0x6f,
	0x6b, 0x65, 0x72, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x72, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x72,
	0x72, 0x43, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x6f, 0x6f, 0x6b, 0x53,
	0x65, 0x61, 0x74, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x72, 0x72, 0x53, 0x69, 0x74, 0x4c,
	0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x0a, 0x22, 0x38, 0x0a,
	0x12, 0x43, 0x52, 0x65, 0x71, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x61, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x22, 0xa0, 0x03, 0x0a, 0x13, 0x53, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x3b, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x65, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0xcf, 0x01, 0x0a, 0x07, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x72, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x72, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61,
	0x74, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45,
	0x72, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x41, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x53, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x72, 0x72, 0x53, 0x69, 0x74, 0x55, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x5f, 0x41, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x53, 0x69, 0x74, 0x55, 0x70, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x72,
	0x72, 0x53, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x5f, 0x41, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x53, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x06, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x72, 0x72, 0x53, 0x69, 0x74, 0x55, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x5f, 0x49, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x10, 0x07, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x52,
	0x65, 0x71, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xb7, 0x01, 0x0a, 0x13, 0x53, 0x52, 0x65, 0x73, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x6f,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x67,
	0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x07, 0x6c, 0x6f, 0x6f, 0x6b,
	0x65, 0x72, 0x73, 0x22, 0x35, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x4e,
	0x6f, 0x74, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x02, 0x22, 0x25, 0x0a, 0x0d, 0x43, 0x52,
	0x65, 0x71, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x22, 0x61, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x4e, 0x6f,
	0x74, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x72, 0x72,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x72, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x10, 0x04, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x52, 0x65, 0x71, 0x52, 0x6f, 0x6f,
	0x6d, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x22, 0x7f, 0x0a, 0x0e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x6f, 0x6f, 0x6d, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x67,
	0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x2e,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x35, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x74, 0x49,
	0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x02, 0x22, 0x58, 0x0a, 0x0c, 0x43, 0x52, 0x65, 0x71, 0x52,
	0x6f, 0x6f, 0x6d, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x69, 0x63, 0x6b, 0x41,
	0x6c, 0x6c, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x6b, 0x69, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xcc, 0x01, 0x0a, 0x0d, 0x53, 0x52, 0x65, 0x73, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x4b,
	0x69, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x4b, 0x69, 0x63, 0x6b, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x07, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x52,
	0x6f, 0x6f, 0x6d, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x72, 0x72, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x06,
	0x22, 0xb5, 0x01, 0x0a, 0x10, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x67,
	0x2e, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x44, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x02, 0x22, 0xb2, 0x01, 0x0a, 0x0f, 0x53, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c,
	0x6b, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x6b, 0x69, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6d, 0x73,
	0x67, 0x2e, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4b, 0x69, 0x63,
	0x6b, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x52, 0x08, 0x6b, 0x69, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x28, 0x0a, 0x07, 0x4b, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x10, 0x01, 0x22, 0x64, 0x0a,
	0x15, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x65, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x52, 0x65, 0x71, 0x52, 0x6f, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x12, 0x53, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x07,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x74, 0x49,
	0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x72,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x10,
	0x05, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x10, 0x06, 0x22, 0xee, 0x02, 0x0a, 0x11, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6d,
	0x73, 0x67, 0x2e, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6b,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72, 0x6f,
	0x6f, 0x6d, 0x22, 0x91, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x69,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x42, 0x79, 0x4b, 0x69, 0x63,
	0x6b, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x05, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x06,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x69, 0x74, 0x55, 0x70, 0x54, 0x6f, 0x4c, 0x6f,
	0x6f, 0x6b, 0x65, 0x72, 0x10, 0x08, 0x22, 0xb3, 0x01, 0x0a, 0x10, 0x53, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6d, 0x73,
	0x67, 0x2e, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x37, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x69, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x03, 0x22, 0x28, 0x0a, 0x10,
	0x53, 0x53, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x24, 0x0a, 0x10, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x6e, 0x0a, 0x0d,
	0x53, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x42, 0x02, 0x10, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x0f,
	0x53, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xa2, 0x01, 0x0a, 0x10, 0x53, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65,
	0x73, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x54,
	0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x74, 0x49, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x4f, 0x70, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x10, 0x03, 0x22, 0x6c, 0x0a, 0x09, 0x43, 0x52, 0x65, 0x71, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x52, 0x65, 0x71, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a,
	0x06, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x10, 0x02, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x53, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x32, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x2c, 0x0a, 0x07, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22, 0x80, 0x02, 0x0a, 0x12, 0x53, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6d, 0x73,
	0x67, 0x2e, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x6f, 0x6f,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65,
	0x66, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x3e, 0x0a, 0x0a,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x22, 0x0e, 0x0a, 0x0c,
	0x43, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x7a, 0x0a, 0x10,
	0x53, 0x52, 0x65, 0x73, 0x70, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x38, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x07, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x02, 0x22, 0xbe, 0x01, 0x0a, 0x0d, 0x43, 0x43, 0x61,
	0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74,
	0x2e, 0x4f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x42, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x70, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f,
	0x70, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x70,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x03, 0x22, 0x9d, 0x02, 0x0a, 0x11, 0x53, 0x52,
	0x65, 0x73, 0x70, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x12,
	0x39, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x43, 0x61, 0x72,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6d, 0x73, 0x67,
	0x2e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f,
	0x70, 0x74, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x72, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x43, 0x61, 0x72, 0x64, 0x53, 0x61, 0x6d, 0x65, 0x10,
	0x02, 0x22, 0x56, 0x0a, 0x0b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x03, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x52, 0x65,
	0x71, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x61, 0x0a, 0x0f, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6e, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x61,
	0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x24,
	0x5a, 0x22, 0x73, 0x61, 0x6e, 0x67, 0x75, 0x6f, 0x73, 0x68, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x67, 0x73, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6d, 0x73, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cmsg_client_msg_proto_rawDescOnce sync.Once
	file_cmsg_client_msg_proto_rawDescData = file_cmsg_client_msg_proto_rawDesc
)

func file_cmsg_client_msg_proto_rawDescGZIP() []byte {
	file_cmsg_client_msg_proto_rawDescOnce.Do(func() {
		file_cmsg_client_msg_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmsg_client_msg_proto_rawDescData)
	})
	return file_cmsg_client_msg_proto_rawDescData
}

var file_cmsg_client_msg_proto_enumTypes = make([]protoimpl.EnumInfo, 37)
var file_cmsg_client_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 85)
var file_cmsg_client_msg_proto_goTypes = []interface{}{
	(SRespLogin_ErrCode)(0),             // 0: cmsg.SRespLogin.ErrCode
	(SRespMyData_ErrCode)(0),            // 1: cmsg.SRespMyData.ErrCode
	(SRespGameScene_ErrCode)(0),         // 2: cmsg.SRespGameScene.ErrCode
	(SRespSceneReady_ErrCode)(0),        // 3: cmsg.SRespSceneReady.ErrCode
	(SNoticeOp_OpType)(0),               // 4: cmsg.SNoticeOp.OpType
	(CReqOpt_OpType)(0),                 // 5: cmsg.CReqOpt.OpType
	(SRespOpt_ErrCode)(0),               // 6: cmsg.SRespOpt.ErrCode
	(SRespAct_ErrCode)(0),               // 7: cmsg.SRespAct.ErrCode
	(SSyncCard_ChangeType)(0),           // 8: cmsg.SSyncCard.ChangeType
	(SSyncCamp_ChangeType)(0),           // 9: cmsg.SSyncCamp.ChangeType
	(SSyncHandCard_ChangeType)(0),       // 10: cmsg.SSyncHandCard.ChangeType
	(SRespCancelCurOpt_ErrCode)(0),      // 11: cmsg.SRespCancelCurOpt.ErrCode
	(SSyncPlayerState_ChangeType)(0),    // 12: cmsg.SSyncPlayerState.ChangeType
	(SRespChat_ErrCode)(0),              // 13: cmsg.SRespChat.ErrCode
	(SRespMyRoom_ErrCode)(0),            // 14: cmsg.SRespMyRoom.ErrCode
	(SRespRoomCreate_ErrCode)(0),        // 15: cmsg.SRespRoomCreate.ErrCode
	(SRespRoomQuickJoin_ErrCode)(0),     // 16: cmsg.SRespRoomQuickJoin.ErrCode
	(SRespRoomSettingChange_ErrCode)(0), // 17: cmsg.SRespRoomSettingChange.ErrCode
	(SRespRoomJoin_ErrCode)(0),          // 18: cmsg.SRespRoomJoin.ErrCode
	(SRespRoomSeatChange_ErrCode)(0),    // 19: cmsg.SRespRoomSeatChange.ErrCode
	(SRespRoomLookerInfo_ErrCode)(0),    // 20: cmsg.SRespRoomLookerInfo.ErrCode
	(SRespRoomReady_ErrCode)(0),         // 21: cmsg.SRespRoomReady.ErrCode
	(SRespRoomLeave_ErrCode)(0),         // 22: cmsg.SRespRoomLeave.ErrCode
	(SRespRoomKick_ErrCode)(0),          // 23: cmsg.SRespRoomKick.ErrCode
	(SNoticeRoomTimer_NoticeType)(0),    // 24: cmsg.SNoticeRoomTimer.NoticeType
	(SNoticeRoomKick_KickTyp)(0),        // 25: cmsg.SNoticeRoomKick.KickTyp
	(SRespRoomStartGame_ErrCode)(0),     // 26: cmsg.SRespRoomStartGame.ErrCode
	(SNotifyRoomChange_Action)(0),       // 27: cmsg.SNotifyRoomChange.Action
	(SNoticeRoomEvent_Event)(0),         // 28: cmsg.SNoticeRoomEvent.Event
	(SRespCommonError_ErrCode)(0),       // 29: cmsg.SRespCommonError.ErrCode
	(CReqMatch_ModeID)(0),               // 30: cmsg.CReqMatch.ModeID
	(SRespMatch_ErrCode)(0),             // 31: cmsg.SRespMatch.ErrCode
	(SNoticeMatchResult_NoticeType)(0),  // 32: cmsg.SNoticeMatchResult.NoticeType
	(SRespCancelMatch_ErrCode)(0),       // 33: cmsg.SRespCancelMatch.ErrCode
	(CCardGroupOpt_OptType)(0),          // 34: cmsg.CCardGroupOpt.OptType
	(SRespCardGroupOpt_ErrCode)(0),      // 35: cmsg.SRespCardGroupOpt.ErrCode
	(SRespCardGroupOpt_SuccessCode)(0),  // 36: cmsg.SRespCardGroupOpt.SuccessCode
	(*CReqPing)(nil),                    // 37: cmsg.CReqPing
	(*SRespPing)(nil),                   // 38: cmsg.SRespPing
	(*CReqLogin)(nil),                   // 39: cmsg.CReqLogin
	(*SRespLogin)(nil),                  // 40: cmsg.SRespLogin
	(*SSyncUserBrief)(nil),              // 41: cmsg.SSyncUserBrief
	(*CReqMyData)(nil),                  // 42: cmsg.CReqMyData
	(*SRespMyData)(nil),                 // 43: cmsg.SRespMyData
	(*SNoticeGameReady)(nil),            // 44: cmsg.SNoticeGameReady
	(*CReqGameScene)(nil),               // 45: cmsg.CReqGameScene
	(*SRespGameScene)(nil),              // 46: cmsg.SRespGameScene
	(*CReqSceneReady)(nil),              // 47: cmsg.CReqSceneReady
	(*SRespSceneReady)(nil),             // 48: cmsg.SRespSceneReady
	(*SNoticeGameStart)(nil),            // 49: cmsg.SNoticeGameStart
	(*SNoticeEnterPhase)(nil),           // 50: cmsg.SNoticeEnterPhase
	(*SNoticeDrawCard)(nil),             // 51: cmsg.SNoticeDrawCard
	(*SNoticeOp)(nil),                   // 52: cmsg.SNoticeOp
	(*CReqOpt)(nil),                     // 53: cmsg.CReqOpt
	(*SRespOpt)(nil),                    // 54: cmsg.SRespOpt
	(*CReqAct)(nil),                     // 55: cmsg.CReqAct
	(*SRespAct)(nil),                    // 56: cmsg.SRespAct
	(*SSyncAct)(nil),                    // 57: cmsg.SSyncAct
	(*SSyncCard)(nil),                   // 58: cmsg.SSyncCard
	(*SSyncUseSkill)(nil),               // 59: cmsg.SSyncUseSkill
	(*SSyncUseSkillEnd)(nil),            // 60: cmsg.SSyncUseSkillEnd
	(*SSyncCamp)(nil),                   // 61: cmsg.SSyncCamp
	(*SSyncHandCard)(nil),               // 62: cmsg.SSyncHandCard
	(*SSyncGameBoard)(nil),              // 63: cmsg.SSyncGameBoard
	(*SNoticeGameOver)(nil),             // 64: cmsg.SNoticeGameOver
	(*CReqCancelCurOpt)(nil),            // 65: cmsg.CReqCancelCurOpt
	(*SRespCancelCurOpt)(nil),           // 66: cmsg.SRespCancelCurOpt
	(*CReqGameExit)(nil),                // 67: cmsg.CReqGameExit
	(*SRespGameExit)(nil),               // 68: cmsg.SRespGameExit
	(*SSyncPlayerState)(nil),            // 69: cmsg.SSyncPlayerState
	(*CReqGMCommand)(nil),               // 70: cmsg.CReqGMCommand
	(*SReqGMCommand)(nil),               // 71: cmsg.SReqGMCommand
	(*ServerNotice)(nil),                // 72: cmsg.ServerNotice
	(*CReqChat)(nil),                    // 73: cmsg.CReqChat
	(*SRespChat)(nil),                   // 74: cmsg.SRespChat
	(*SNoticeChatMsg)(nil),              // 75: cmsg.SNoticeChatMsg
	(*CReqMyRoom)(nil),                  // 76: cmsg.CReqMyRoom
	(*SRespMyRoom)(nil),                 // 77: cmsg.SRespMyRoom
	(*CReqRoomCreate)(nil),              // 78: cmsg.CReqRoomCreate
	(*SRespRoomCreate)(nil),             // 79: cmsg.SRespRoomCreate
	(*CReqRoomQuickJoin)(nil),           // 80: cmsg.CReqRoomQuickJoin
	(*SRespRoomQuickJoin)(nil),          // 81: cmsg.SRespRoomQuickJoin
	(*CReqRoomSettingChange)(nil),       // 82: cmsg.CReqRoomSettingChange
	(*SRespRoomSettingChange)(nil),      // 83: cmsg.SRespRoomSettingChange
	(*CReqRoomJoin)(nil),                // 84: cmsg.CReqRoomJoin
	(*SRespRoomJoin)(nil),               // 85: cmsg.SRespRoomJoin
	(*CReqRoomSeatChange)(nil),          // 86: cmsg.CReqRoomSeatChange
	(*SRespRoomSeatChange)(nil),         // 87: cmsg.SRespRoomSeatChange
	(*CReqRoomLookerInfo)(nil),          // 88: cmsg.CReqRoomLookerInfo
	(*SRespRoomLookerInfo)(nil),         // 89: cmsg.SRespRoomLookerInfo
	(*CReqRoomReady)(nil),               // 90: cmsg.CReqRoomReady
	(*SRespRoomReady)(nil),              // 91: cmsg.SRespRoomReady
	(*CReqRoomLeave)(nil),               // 92: cmsg.CReqRoomLeave
	(*SRespRoomLeave)(nil),              // 93: cmsg.SRespRoomLeave
	(*CReqRoomKick)(nil),                // 94: cmsg.CReqRoomKick
	(*SRespRoomKick)(nil),               // 95: cmsg.SRespRoomKick
	(*SNoticeRoomTimer)(nil),            // 96: cmsg.SNoticeRoomTimer
	(*SNoticeRoomKick)(nil),             // 97: cmsg.SNoticeRoomKick
	(*SNoticeRoomChangeSeat)(nil),       // 98: cmsg.SNoticeRoomChangeSeat
	(*CReqRoomStartGame)(nil),           // 99: cmsg.CReqRoomStartGame
	(*SRespRoomStartGame)(nil),          // 100: cmsg.SRespRoomStartGame
	(*SNotifyRoomChange)(nil),           // 101: cmsg.SNotifyRoomChange
	(*SNoticeRoomEvent)(nil),            // 102: cmsg.SNoticeRoomEvent
	(*SSyncLookerCount)(nil),            // 103: cmsg.SSyncLookerCount
	(*SNoticeDebugInfo)(nil),            // 104: cmsg.SNoticeDebugInfo
	(*SNoticeLogout)(nil),               // 105: cmsg.SNoticeLogout
	(*SSyncServerTime)(nil),             // 106: cmsg.SSyncServerTime
	(*SRespCommonError)(nil),            // 107: cmsg.SRespCommonError
	(*CReqMatch)(nil),                   // 108: cmsg.CReqMatch
	(*SRespMatch)(nil),                  // 109: cmsg.SRespMatch
	(*SNoticeMatchResult)(nil),          // 110: cmsg.SNoticeMatchResult
	(*CCancelMatch)(nil),                // 111: cmsg.CCancelMatch
	(*SRespCancelMatch)(nil),            // 112: cmsg.SRespCancelMatch
	(*CCardGroupOpt)(nil),               // 113: cmsg.CCardGroupOpt
	(*SRespCardGroupOpt)(nil),           // 114: cmsg.SRespCardGroupOpt
	(*CReqCardGroups)(nil),              // 115: cmsg.CReqCardGroups
	(*SRespCardGroups)(nil),             // 116: cmsg.SRespCardGroups
	(*SNoticeGameReady_Seat)(nil),       // 117: cmsg.SNoticeGameReady.Seat
	(*SRespGameScene_Seat)(nil),         // 118: cmsg.SRespGameScene.Seat
	(*SNoticeOp_Data)(nil),              // 119: cmsg.SNoticeOp.Data
	(*SSyncCard_Change)(nil),            // 120: cmsg.SSyncCard.Change
	(*SSyncCamp_Change)(nil),            // 121: cmsg.SSyncCamp.Change
	(gameconf.AccountLoginTyp)(0),       // 122: gameconf.AccountLoginTyp
	(*def.UserBrief)(nil),               // 123: gamedef.UserBrief
	(*def.ServerConfig)(nil),            // 124: gamedef.ServerConfig
	(*def.UserBase)(nil),                // 125: gamedef.UserBase
	(gameconf.GameModeTyp)(0),           // 126: gameconf.GameModeTyp
	(*def.RoomSetting)(nil),             // 127: gamedef.RoomSetting
	(def.GamePhase)(0),                  // 128: gamedef.GamePhase
	(gameconf.LookerTyp)(0),             // 129: gameconf.LookerTyp
	(*def.GameBoard)(nil),               // 130: gamedef.GameBoard
	(*def.PoolCard)(nil),                // 131: gamedef.PoolCard
	(*def.Position)(nil),                // 132: gamedef.Position
	(def.ActType)(0),                    // 133: gamedef.ActType
	(*def.ActSelectParam)(nil),          // 134: gamedef.ActSelectParam
	(*def.Card)(nil),                    // 135: gamedef.Card
	(*def.GameSeat)(nil),                // 136: gamedef.GameSeat
	(gameconf.UserConnectState)(0),      // 137: gameconf.UserConnectState
	(*def.Change)(nil),                  // 138: gamedef.Change
	(gameconf.ChatChannelTyp)(0),        // 139: gameconf.ChatChannelTyp
	(gameconf.ChatMsgTyp)(0),            // 140: gameconf.ChatMsgTyp
	(*def.Room)(nil),                    // 141: gamedef.Room
	(gameconf.KickUserOutReason)(0),     // 142: gameconf.KickUserOutReason
	(*def.CardGroup)(nil),               // 143: gamedef.CardGroup
	(*def.HeadInfo)(nil),                // 144: gamedef.HeadInfo
	(def.SelectCardType)(0),             // 145: gamedef.SelectCardType
	(*def.Buff)(nil),                    // 146: gamedef.Buff
}
var file_cmsg_client_msg_proto_depIdxs = []int32{
	122, // 0: cmsg.CReqLogin.loginType:type_name -> gameconf.AccountLoginTyp
	0,   // 1: cmsg.SRespLogin.errCode:type_name -> cmsg.SRespLogin.ErrCode
	123, // 2: cmsg.SRespLogin.userBrief:type_name -> gamedef.UserBrief
	124, // 3: cmsg.SRespLogin.serverCfg:type_name -> gamedef.ServerConfig
	123, // 4: cmsg.SSyncUserBrief.userBrief:type_name -> gamedef.UserBrief
	1,   // 5: cmsg.SRespMyData.errCode:type_name -> cmsg.SRespMyData.ErrCode
	125, // 6: cmsg.SRespMyData.userBase:type_name -> gamedef.UserBase
	126, // 7: cmsg.SNoticeGameReady.gameMode:type_name -> gameconf.GameModeTyp
	117, // 8: cmsg.SNoticeGameReady.seats:type_name -> cmsg.SNoticeGameReady.Seat
	2,   // 9: cmsg.SRespGameScene.errCode:type_name -> cmsg.SRespGameScene.ErrCode
	126, // 10: cmsg.SRespGameScene.gameMode:type_name -> gameconf.GameModeTyp
	127, // 11: cmsg.SRespGameScene.roomSetting:type_name -> gamedef.RoomSetting
	128, // 12: cmsg.SRespGameScene.phase:type_name -> gamedef.GamePhase
	118, // 13: cmsg.SRespGameScene.seats:type_name -> cmsg.SRespGameScene.Seat
	129, // 14: cmsg.SRespGameScene.lookerType:type_name -> gameconf.LookerTyp
	130, // 15: cmsg.SRespGameScene.board:type_name -> gamedef.GameBoard
	3,   // 16: cmsg.SRespSceneReady.errCode:type_name -> cmsg.SRespSceneReady.ErrCode
	128, // 17: cmsg.SNoticeEnterPhase.phase:type_name -> gamedef.GamePhase
	131, // 18: cmsg.SNoticeDrawCard.cards:type_name -> gamedef.PoolCard
	4,   // 19: cmsg.SNoticeOp.opType:type_name -> cmsg.SNoticeOp.OpType
	132, // 20: cmsg.SNoticeOp.targetPos:type_name -> gamedef.Position
	119, // 21: cmsg.SNoticeOp.data:type_name -> cmsg.SNoticeOp.Data
	5,   // 22: cmsg.CReqOpt.opType:type_name -> cmsg.CReqOpt.OpType
	132, // 23: cmsg.CReqOpt.targetPos:type_name -> gamedef.Position
	6,   // 24: cmsg.SRespOpt.errCode:type_name -> cmsg.SRespOpt.ErrCode
	133, // 25: cmsg.CReqAct.actType:type_name -> gamedef.ActType
	132, // 26: cmsg.CReqAct.targetPos:type_name -> gamedef.Position
	134, // 27: cmsg.CReqAct.actSelect:type_name -> gamedef.ActSelectParam
	7,   // 28: cmsg.SRespAct.errCode:type_name -> cmsg.SRespAct.ErrCode
	133, // 29: cmsg.SRespAct.actType:type_name -> gamedef.ActType
	132, // 30: cmsg.SRespAct.targetPos:type_name -> gamedef.Position
	134, // 31: cmsg.SRespAct.actSelect:type_name -> gamedef.ActSelectParam
	133, // 32: cmsg.SSyncAct.actType:type_name -> gamedef.ActType
	132, // 33: cmsg.SSyncAct.targetPos:type_name -> gamedef.Position
	135, // 34: cmsg.SSyncCard.card:type_name -> gamedef.Card
	120, // 35: cmsg.SSyncCard.changes:type_name -> cmsg.SSyncCard.Change
	121, // 36: cmsg.SSyncCamp.changes:type_name -> cmsg.SSyncCamp.Change
	10,  // 37: cmsg.SSyncHandCard.changeTypes:type_name -> cmsg.SSyncHandCard.ChangeType
	131, // 38: cmsg.SSyncHandCard.getCards:type_name -> gamedef.PoolCard
	131, // 39: cmsg.SSyncHandCard.loseCards:type_name -> gamedef.PoolCard
	131, // 40: cmsg.SSyncHandCard.handCards:type_name -> gamedef.PoolCard
	136, // 41: cmsg.SSyncGameBoard.seats:type_name -> gamedef.GameSeat
	11,  // 42: cmsg.SRespCancelCurOpt.errCode:type_name -> cmsg.SRespCancelCurOpt.ErrCode
	137, // 43: cmsg.SSyncPlayerState.connectState:type_name -> gameconf.UserConnectState
	138, // 44: cmsg.SSyncPlayerState.hpChange:type_name -> gamedef.Change
	12,  // 45: cmsg.SSyncPlayerState.changeType:type_name -> cmsg.SSyncPlayerState.ChangeType
	139, // 46: cmsg.CReqChat.channel:type_name -> gameconf.ChatChannelTyp
	140, // 47: cmsg.CReqChat.msgType:type_name -> gameconf.ChatMsgTyp
	13,  // 48: cmsg.SRespChat.errCode:type_name -> cmsg.SRespChat.ErrCode
	139, // 49: cmsg.SRespChat.channel:type_name -> gameconf.ChatChannelTyp
	140, // 50: cmsg.SRespChat.msgType:type_name -> gameconf.ChatMsgTyp
	139, // 51: cmsg.SNoticeChatMsg.channel:type_name -> gameconf.ChatChannelTyp
	140, // 52: cmsg.SNoticeChatMsg.msgType:type_name -> gameconf.ChatMsgTyp
	123, // 53: cmsg.SNoticeChatMsg.fromUser:type_name -> gamedef.UserBrief
	14,  // 54: cmsg.SRespMyRoom.errCode:type_name -> cmsg.SRespMyRoom.ErrCode
	141, // 55: cmsg.SRespMyRoom.room:type_name -> gamedef.Room
	127, // 56: cmsg.CReqRoomCreate.settting:type_name -> gamedef.RoomSetting
	15,  // 57: cmsg.SRespRoomCreate.errCode:type_name -> cmsg.SRespRoomCreate.ErrCode
	141, // 58: cmsg.SRespRoomCreate.room:type_name -> gamedef.Room
	126, // 59: cmsg.CReqRoomQuickJoin.gameMode:type_name -> gameconf.GameModeTyp
	16,  // 60: cmsg.SRespRoomQuickJoin.errCode:type_name -> cmsg.SRespRoomQuickJoin.ErrCode
	141, // 61: cmsg.SRespRoomQuickJoin.room:type_name -> gamedef.Room
	127, // 62: cmsg.CReqRoomSettingChange.setting:type_name -> gamedef.RoomSetting
	17,  // 63: cmsg.SRespRoomSettingChange.errCode:type_name -> cmsg.SRespRoomSettingChange.ErrCode
	127, // 64: cmsg.SRespRoomSettingChange.setting:type_name -> gamedef.RoomSetting
	18,  // 65: cmsg.SRespRoomJoin.errCode:type_name -> cmsg.SRespRoomJoin.ErrCode
	141, // 66: cmsg.SRespRoomJoin.room:type_name -> gamedef.Room
	19,  // 67: cmsg.SRespRoomSeatChange.errCode:type_name -> cmsg.SRespRoomSeatChange.ErrCode
	129, // 68: cmsg.SRespRoomSeatChange.lookerType:type_name -> gameconf.LookerTyp
	141, // 69: cmsg.SRespRoomSeatChange.room:type_name -> gamedef.Room
	20,  // 70: cmsg.SRespRoomLookerInfo.errCode:type_name -> cmsg.SRespRoomLookerInfo.ErrCode
	123, // 71: cmsg.SRespRoomLookerInfo.lookers:type_name -> gamedef.UserBrief
	21,  // 72: cmsg.SRespRoomReady.errCode:type_name -> cmsg.SRespRoomReady.ErrCode
	22,  // 73: cmsg.SRespRoomLeave.errCode:type_name -> cmsg.SRespRoomLeave.ErrCode
	23,  // 74: cmsg.SRespRoomKick.errCode:type_name -> cmsg.SRespRoomKick.ErrCode
	24,  // 75: cmsg.SNoticeRoomTimer.noticeType:type_name -> cmsg.SNoticeRoomTimer.NoticeType
	25,  // 76: cmsg.SNoticeRoomKick.kickType:type_name -> cmsg.SNoticeRoomKick.KickTyp
	129, // 77: cmsg.SNoticeRoomChangeSeat.lookerType:type_name -> gameconf.LookerTyp
	26,  // 78: cmsg.SRespRoomStartGame.errCode:type_name -> cmsg.SRespRoomStartGame.ErrCode
	27,  // 79: cmsg.SNotifyRoomChange.action:type_name -> cmsg.SNotifyRoomChange.Action
	141, // 80: cmsg.SNotifyRoomChange.room:type_name -> gamedef.Room
	28,  // 81: cmsg.SNoticeRoomEvent.event:type_name -> cmsg.SNoticeRoomEvent.Event
	123, // 82: cmsg.SNoticeRoomEvent.actionUser:type_name -> gamedef.UserBrief
	142, // 83: cmsg.SNoticeLogout.reason:type_name -> gameconf.KickUserOutReason
	29,  // 84: cmsg.SRespCommonError.errCode:type_name -> cmsg.SRespCommonError.ErrCode
	30,  // 85: cmsg.CReqMatch.mode:type_name -> cmsg.CReqMatch.ModeID
	31,  // 86: cmsg.SRespMatch.errCode:type_name -> cmsg.SRespMatch.ErrCode
	32,  // 87: cmsg.SNoticeMatchResult.noticeType:type_name -> cmsg.SNoticeMatchResult.NoticeType
	123, // 88: cmsg.SNoticeMatchResult.players:type_name -> gamedef.UserBrief
	141, // 89: cmsg.SNoticeMatchResult.room:type_name -> gamedef.Room
	33,  // 90: cmsg.SRespCancelMatch.errCode:type_name -> cmsg.SRespCancelMatch.ErrCode
	34,  // 91: cmsg.CCardGroupOpt.optType:type_name -> cmsg.CCardGroupOpt.OptType
	143, // 92: cmsg.CCardGroupOpt.cardsGroup:type_name -> gamedef.CardGroup
	35,  // 93: cmsg.SRespCardGroupOpt.errCode:type_name -> cmsg.SRespCardGroupOpt.ErrCode
	36,  // 94: cmsg.SRespCardGroupOpt.sCode:type_name -> cmsg.SRespCardGroupOpt.SuccessCode
	143, // 95: cmsg.SRespCardGroups.cardGroups:type_name -> gamedef.CardGroup
	144, // 96: cmsg.SNoticeGameReady.Seat.head:type_name -> gamedef.HeadInfo
	137, // 97: cmsg.SNoticeGameReady.Seat.connectState:type_name -> gameconf.UserConnectState
	123, // 98: cmsg.SRespGameScene.Seat.userBrief:type_name -> gamedef.UserBrief
	137, // 99: cmsg.SRespGameScene.Seat.connectState:type_name -> gameconf.UserConnectState
	136, // 100: cmsg.SRespGameScene.Seat.gameSeat:type_name -> gamedef.GameSeat
	145, // 101: cmsg.SNoticeOp.Data.selectCardTyp:type_name -> gamedef.SelectCardType
	8,   // 102: cmsg.SSyncCard.Change.changeType:type_name -> cmsg.SSyncCard.ChangeType
	132, // 103: cmsg.SSyncCard.Change.oldPos:type_name -> gamedef.Position
	132, // 104: cmsg.SSyncCard.Change.newPos:type_name -> gamedef.Position
	9,   // 105: cmsg.SSyncCamp.Change.changeType:type_name -> cmsg.SSyncCamp.ChangeType
	146, // 106: cmsg.SSyncCamp.Change.newBuffs:type_name -> gamedef.Buff
	107, // [107:107] is the sub-list for method output_type
	107, // [107:107] is the sub-list for method input_type
	107, // [107:107] is the sub-list for extension type_name
	107, // [107:107] is the sub-list for extension extendee
	0,   // [0:107] is the sub-list for field type_name
}

func init() { file_cmsg_client_msg_proto_init() }
func file_cmsg_client_msg_proto_init() {
	if File_cmsg_client_msg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cmsg_client_msg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSyncUserBrief); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqMyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespMyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeGameReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqGameScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespGameScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqSceneReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespSceneReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeGameStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeEnterPhase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeDrawCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSyncAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSyncCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSyncUseSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSyncUseSkillEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSyncCamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSyncHandCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSyncGameBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeGameOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqCancelCurOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespCancelCurOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqGameExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespGameExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSyncPlayerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqGMCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SReqGMCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqMyRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespMyRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqRoomCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespRoomCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqRoomQuickJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespRoomQuickJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqRoomSettingChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespRoomSettingChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqRoomJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespRoomJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqRoomSeatChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespRoomSeatChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqRoomLookerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespRoomLookerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqRoomReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespRoomReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqRoomLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespRoomLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqRoomKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespRoomKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeRoomTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeRoomKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeRoomChangeSeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqRoomStartGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespRoomStartGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNotifyRoomChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeRoomEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSyncLookerCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeDebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeLogout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSyncServerTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespCommonError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeMatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCancelMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespCancelMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCardGroupOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespCardGroupOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqCardGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespCardGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeGameReady_Seat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRespGameScene_Seat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNoticeOp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSyncCard_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmsg_client_msg_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSyncCamp_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmsg_client_msg_proto_rawDesc,
			NumEnums:      37,
			NumMessages:   85,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmsg_client_msg_proto_goTypes,
		DependencyIndexes: file_cmsg_client_msg_proto_depIdxs,
		EnumInfos:         file_cmsg_client_msg_proto_enumTypes,
		MessageInfos:      file_cmsg_client_msg_proto_msgTypes,
	}.Build()
	File_cmsg_client_msg_proto = out.File
	file_cmsg_client_msg_proto_rawDesc = nil
	file_cmsg_client_msg_proto_goTypes = nil
	file_cmsg_client_msg_proto_depIdxs = nil
}
