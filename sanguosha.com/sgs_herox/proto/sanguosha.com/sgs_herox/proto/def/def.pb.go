// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: def/def.proto

package def

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	gameconf "sanguosha.com/sgs_herox/proto/gameconf"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GamePhase int32

const (
	GamePhase_Invalid    GamePhase = 0
	GamePhase_Ready      GamePhase = 1 //游戏准备开始中
	GamePhase_Start      GamePhase = 2 //游戏开始了
	GamePhase_InitCard   GamePhase = 3 //初始牌阶段
	GamePhase_PhaseBegin GamePhase = 4 //回合开始阶段
	GamePhase_PhaseDraw  GamePhase = 5 //抓牌阶段
	GamePhase_PhaseMain  GamePhase = 6 //操作开始阶段
	GamePhase_PhaseEnd   GamePhase = 7 //回合结束
	GamePhase_End        GamePhase = 8 //游戏结束
)

// Enum value maps for GamePhase.
var (
	GamePhase_name = map[int32]string{
		0: "Invalid",
		1: "Ready",
		2: "Start",
		3: "InitCard",
		4: "PhaseBegin",
		5: "PhaseDraw",
		6: "PhaseMain",
		7: "PhaseEnd",
		8: "End",
	}
	GamePhase_value = map[string]int32{
		"Invalid":    0,
		"Ready":      1,
		"Start":      2,
		"InitCard":   3,
		"PhaseBegin": 4,
		"PhaseDraw":  5,
		"PhaseMain":  6,
		"PhaseEnd":   7,
		"End":        8,
	}
)

func (x GamePhase) Enum() *GamePhase {
	p := new(GamePhase)
	*p = x
	return p
}

func (x GamePhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GamePhase) Descriptor() protoreflect.EnumDescriptor {
	return file_def_def_proto_enumTypes[0].Descriptor()
}

func (GamePhase) Type() protoreflect.EnumType {
	return &file_def_def_proto_enumTypes[0]
}

func (x GamePhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GamePhase.Descriptor instead.
func (GamePhase) EnumDescriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{0}
}

type ActType int32

const (
	ActType_None       ActType = 0
	ActType_PlaceCard  ActType = 1
	ActType_TurnUpCard ActType = 2
	ActType_MoveCard   ActType = 3
	ActType_AttackCard ActType = 4
	ActType_AttackCamp ActType = 5
)

// Enum value maps for ActType.
var (
	ActType_name = map[int32]string{
		0: "None",
		1: "PlaceCard",
		2: "TurnUpCard",
		3: "MoveCard",
		4: "AttackCard",
		5: "AttackCamp",
	}
	ActType_value = map[string]int32{
		"None":       0,
		"PlaceCard":  1,
		"TurnUpCard": 2,
		"MoveCard":   3,
		"AttackCard": 4,
		"AttackCamp": 5,
	}
)

func (x ActType) Enum() *ActType {
	p := new(ActType)
	*p = x
	return p
}

func (x ActType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActType) Descriptor() protoreflect.EnumDescriptor {
	return file_def_def_proto_enumTypes[1].Descriptor()
}

func (ActType) Type() protoreflect.EnumType {
	return &file_def_def_proto_enumTypes[1]
}

func (x ActType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActType.Descriptor instead.
func (ActType) EnumDescriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{1}
}

type SelectCardType int32

const (
	SelectCardType_Any         SelectCardType = 0 //任意卡牌
	SelectCardType_MyOwn       SelectCardType = 1 //己方卡牌
	SelectCardType_Enemy       SelectCardType = 2 //敌方卡牌
	SelectCardType_MyOwnFaceUp SelectCardType = 3 //己方 已经正面朝上的 卡牌
	SelectCardType_MyOwnBack   SelectCardType = 4 //己方 背面朝上 的卡牌
	SelectCardType_EnemyFaceUp SelectCardType = 5 //敌方  已经正面朝上的 卡牌
	SelectCardType_EnemyBack   SelectCardType = 6 // 敌方 背面朝上 的卡牌
	//其他卡牌 （不能选择技能发动者自己）
	SelectCardType_OtherMyOwn               SelectCardType = 7  // 其他 己方卡牌
	SelectCardType_OtherMyOwnFaceUp         SelectCardType = 8  //其他 己方 已经正面朝上的 卡牌
	SelectCardType_OtherMyOwnBack           SelectCardType = 9  // 其他 己方 背面朝上 的卡牌
	SelectCardType_OtherEnemyFaceUp         SelectCardType = 10 //其他敌方  已经正面朝上的 卡牌
	SelectCardType_OtherEnemyBack           SelectCardType = 11 // 其他 敌方 背面朝上 的卡牌
	SelectCardType_other                    SelectCardType = 12 //其他卡牌，除了发起者本身的任意卡牌
	SelectCardType_NotHeavy                 SelectCardType = 13 //非重装
	SelectCardType_OneOtherMyOwnAndOneEnemy SelectCardType = 14 // 选择一张其他己方武将 和一张敌方武将  用于貂蝉离间
)

// Enum value maps for SelectCardType.
var (
	SelectCardType_name = map[int32]string{
		0:  "Any",
		1:  "MyOwn",
		2:  "Enemy",
		3:  "MyOwnFaceUp",
		4:  "MyOwnBack",
		5:  "EnemyFaceUp",
		6:  "EnemyBack",
		7:  "OtherMyOwn",
		8:  "OtherMyOwnFaceUp",
		9:  "OtherMyOwnBack",
		10: "OtherEnemyFaceUp",
		11: "OtherEnemyBack",
		12: "other",
		13: "NotHeavy",
		14: "OneOtherMyOwnAndOneEnemy",
	}
	SelectCardType_value = map[string]int32{
		"Any":                      0,
		"MyOwn":                    1,
		"Enemy":                    2,
		"MyOwnFaceUp":              3,
		"MyOwnBack":                4,
		"EnemyFaceUp":              5,
		"EnemyBack":                6,
		"OtherMyOwn":               7,
		"OtherMyOwnFaceUp":         8,
		"OtherMyOwnBack":           9,
		"OtherEnemyFaceUp":         10,
		"OtherEnemyBack":           11,
		"other":                    12,
		"NotHeavy":                 13,
		"OneOtherMyOwnAndOneEnemy": 14,
	}
)

func (x SelectCardType) Enum() *SelectCardType {
	p := new(SelectCardType)
	*p = x
	return p
}

func (x SelectCardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelectCardType) Descriptor() protoreflect.EnumDescriptor {
	return file_def_def_proto_enumTypes[2].Descriptor()
}

func (SelectCardType) Type() protoreflect.EnumType {
	return &file_def_def_proto_enumTypes[2]
}

func (x SelectCardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelectCardType.Descriptor instead.
func (SelectCardType) EnumDescriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{2}
}

type UserSummary_Version int32

const (
	UserSummary_VerInit UserSummary_Version = 0
)

// Enum value maps for UserSummary_Version.
var (
	UserSummary_Version_name = map[int32]string{
		0: "VerInit",
	}
	UserSummary_Version_value = map[string]int32{
		"VerInit": 0,
	}
)

func (x UserSummary_Version) Enum() *UserSummary_Version {
	p := new(UserSummary_Version)
	*p = x
	return p
}

func (x UserSummary_Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSummary_Version) Descriptor() protoreflect.EnumDescriptor {
	return file_def_def_proto_enumTypes[3].Descriptor()
}

func (UserSummary_Version) Type() protoreflect.EnumType {
	return &file_def_def_proto_enumTypes[3]
}

func (x UserSummary_Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSummary_Version.Descriptor instead.
func (UserSummary_Version) EnumDescriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{2, 0}
}

//-----------用户信息----------
type AuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          uint64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Nickname        string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Sex             int32  `protobuf:"varint,3,opt,name=sex,proto3" json:"sex,omitempty"`
	HeadImgUrl      string `protobuf:"bytes,4,opt,name=headImgUrl,proto3" json:"headImgUrl,omitempty"`
	HeadFrameImgUrl string `protobuf:"bytes,5,opt,name=headFrameImgUrl,proto3" json:"headFrameImgUrl,omitempty"`
	Birthday        string `protobuf:"bytes,6,opt,name=birthday,proto3" json:"birthday,omitempty"`
	RegisterTime    int64  `protobuf:"varint,7,opt,name=registerTime,proto3" json:"registerTime,omitempty"`
	ThirdAccountId  string `protobuf:"bytes,8,opt,name=thirdAccountId,proto3" json:"thirdAccountId,omitempty"` //唯一账号Id
}

func (x *AuthInfo) Reset() {
	*x = AuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthInfo) ProtoMessage() {}

func (x *AuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthInfo.ProtoReflect.Descriptor instead.
func (*AuthInfo) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{0}
}

func (x *AuthInfo) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AuthInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *AuthInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *AuthInfo) GetHeadImgUrl() string {
	if x != nil {
		return x.HeadImgUrl
	}
	return ""
}

func (x *AuthInfo) GetHeadFrameImgUrl() string {
	if x != nil {
		return x.HeadFrameImgUrl
	}
	return ""
}

func (x *AuthInfo) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *AuthInfo) GetRegisterTime() int64 {
	if x != nil {
		return x.RegisterTime
	}
	return 0
}

func (x *AuthInfo) GetThirdAccountId() string {
	if x != nil {
		return x.ThirdAccountId
	}
	return ""
}

//简略信息
type UserBrief struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          uint64                   `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	CreateTime      int64                    `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime,omitempty"`        //账号创建日期
	LoginIP         string                   `protobuf:"bytes,3,opt,name=loginIP,proto3" json:"loginIP,omitempty"`               //登录的ip
	Nickname        string                   `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`             //昵称
	Level           int32                    `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`                  //角色等级
	Account         string                   `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty"`               //账号
	ThirdAccountId  string                   `protobuf:"bytes,7,opt,name=thirdAccountId,proto3" json:"thirdAccountId,omitempty"` //登录渠道的账号Id
	Icon            int32                    `protobuf:"varint,8,opt,name=icon,proto3" json:"icon,omitempty"`                    //角色头像
	IconEdge        int32                    `protobuf:"varint,9,opt,name=iconEdge,proto3" json:"iconEdge,omitempty"`            //角色头框
	AccountType     gameconf.AccountLoginTyp `protobuf:"varint,10,opt,name=accountType,proto3,enum=gameconf.AccountLoginTyp" json:"accountType,omitempty"`
	Exp             int32                    `protobuf:"varint,12,opt,name=exp,proto3" json:"exp,omitempty"` //经验
	Sex             int32                    `protobuf:"varint,20,opt,name=sex,proto3" json:"sex,omitempty"`
	HeadImgUrl      string                   `protobuf:"bytes,30,opt,name=headImgUrl,proto3" json:"headImgUrl,omitempty"`           //头像地址
	HeadFrameImgUrl string                   `protobuf:"bytes,31,opt,name=headFrameImgUrl,proto3" json:"headFrameImgUrl,omitempty"` //头像框地址
	WinCount        int32                    `protobuf:"varint,40,opt,name=winCount,proto3" json:"winCount,omitempty"`              //胜利场次
	LoseCount       int32                    `protobuf:"varint,41,opt,name=loseCount,proto3" json:"loseCount,omitempty"`            //失败场次
}

func (x *UserBrief) Reset() {
	*x = UserBrief{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBrief) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBrief) ProtoMessage() {}

func (x *UserBrief) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBrief.ProtoReflect.Descriptor instead.
func (*UserBrief) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{1}
}

func (x *UserBrief) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserBrief) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserBrief) GetLoginIP() string {
	if x != nil {
		return x.LoginIP
	}
	return ""
}

func (x *UserBrief) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserBrief) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserBrief) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserBrief) GetThirdAccountId() string {
	if x != nil {
		return x.ThirdAccountId
	}
	return ""
}

func (x *UserBrief) GetIcon() int32 {
	if x != nil {
		return x.Icon
	}
	return 0
}

func (x *UserBrief) GetIconEdge() int32 {
	if x != nil {
		return x.IconEdge
	}
	return 0
}

func (x *UserBrief) GetAccountType() gameconf.AccountLoginTyp {
	if x != nil {
		return x.AccountType
	}
	return gameconf.AccountLoginTyp_ALTInvalid
}

func (x *UserBrief) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *UserBrief) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UserBrief) GetHeadImgUrl() string {
	if x != nil {
		return x.HeadImgUrl
	}
	return ""
}

func (x *UserBrief) GetHeadFrameImgUrl() string {
	if x != nil {
		return x.HeadFrameImgUrl
	}
	return ""
}

func (x *UserBrief) GetWinCount() int32 {
	if x != nil {
		return x.WinCount
	}
	return 0
}

func (x *UserBrief) GetLoseCount() int32 {
	if x != nil {
		return x.LoseCount
	}
	return 0
}

//玩家展示信息，比UserBrief要丰富
type UserSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   UserSummary_Version `protobuf:"varint,1,opt,name=version,proto3,enum=gamedef.UserSummary_Version" json:"version,omitempty"`
	UserId    uint64              `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	UserBrief *UserBrief          `protobuf:"bytes,3,opt,name=userBrief,proto3" json:"userBrief,omitempty"`
}

func (x *UserSummary) Reset() {
	*x = UserSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSummary) ProtoMessage() {}

func (x *UserSummary) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSummary.ProtoReflect.Descriptor instead.
func (*UserSummary) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{2}
}

func (x *UserSummary) GetVersion() UserSummary_Version {
	if x != nil {
		return x.Version
	}
	return UserSummary_VerInit
}

func (x *UserSummary) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserSummary) GetUserBrief() *UserBrief {
	if x != nil {
		return x.UserBrief
	}
	return nil
}

//玩家登录时基础信息
type UserBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          uint64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	CreateTime      int64  `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime,omitempty"` //账号创建日期
	LoginIP         string `protobuf:"bytes,3,opt,name=loginIP,proto3" json:"loginIP,omitempty"`        //登录的ip
	Nickname        string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`      //昵称
	Level           int32  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`           //角色等级
	Account         string `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty"`        //账号
	Icon            string `protobuf:"bytes,8,opt,name=icon,proto3" json:"icon,omitempty"`              //角色头像
	IconEdge        int32  `protobuf:"varint,9,opt,name=iconEdge,proto3" json:"iconEdge,omitempty"`     //角色头框
	Exp             int32  `protobuf:"varint,12,opt,name=exp,proto3" json:"exp,omitempty"`              //经验
	Sex             int32  `protobuf:"varint,20,opt,name=sex,proto3" json:"sex,omitempty"`
	IsAdult         bool   `protobuf:"varint,26,opt,name=isAdult,proto3" json:"isAdult,omitempty"` //是否是成年人
	UserAge         int32  `protobuf:"varint,27,opt,name=userAge,proto3" json:"userAge,omitempty"` //年龄
	Showid          uint64 `protobuf:"varint,29,opt,name=showid,proto3" json:"showid,omitempty"`
	HeadImgUrl      string `protobuf:"bytes,30,opt,name=headImgUrl,proto3" json:"headImgUrl,omitempty"`           //头像地址
	HeadFrameImgUrl string `protobuf:"bytes,31,opt,name=headFrameImgUrl,proto3" json:"headFrameImgUrl,omitempty"` //头像框地址
}

func (x *UserBase) Reset() {
	*x = UserBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBase) ProtoMessage() {}

func (x *UserBase) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBase.ProtoReflect.Descriptor instead.
func (*UserBase) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{3}
}

func (x *UserBase) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserBase) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserBase) GetLoginIP() string {
	if x != nil {
		return x.LoginIP
	}
	return ""
}

func (x *UserBase) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserBase) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserBase) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserBase) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UserBase) GetIconEdge() int32 {
	if x != nil {
		return x.IconEdge
	}
	return 0
}

func (x *UserBase) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *UserBase) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UserBase) GetIsAdult() bool {
	if x != nil {
		return x.IsAdult
	}
	return false
}

func (x *UserBase) GetUserAge() int32 {
	if x != nil {
		return x.UserAge
	}
	return 0
}

func (x *UserBase) GetShowid() uint64 {
	if x != nil {
		return x.Showid
	}
	return 0
}

func (x *UserBase) GetHeadImgUrl() string {
	if x != nil {
		return x.HeadImgUrl
	}
	return ""
}

func (x *UserBase) GetHeadFrameImgUrl() string {
	if x != nil {
		return x.HeadFrameImgUrl
	}
	return ""
}

//头像信息
type HeadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     uint64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ShowID     uint64 `protobuf:"varint,2,opt,name=showID,proto3" json:"showID,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Level      int32  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Icon       int32  `protobuf:"varint,5,opt,name=icon,proto3" json:"icon,omitempty"`
	IconEdge   int32  `protobuf:"varint,6,opt,name=iconEdge,proto3" json:"iconEdge,omitempty"`
	Star       int32  `protobuf:"varint,8,opt,name=star,proto3" json:"star,omitempty"`
	Sex        int32  `protobuf:"varint,12,opt,name=sex,proto3" json:"sex,omitempty"`
	HeadImgUrl string `protobuf:"bytes,13,opt,name=headImgUrl,proto3" json:"headImgUrl,omitempty"`
}

func (x *HeadInfo) Reset() {
	*x = HeadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadInfo) ProtoMessage() {}

func (x *HeadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadInfo.ProtoReflect.Descriptor instead.
func (*HeadInfo) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{4}
}

func (x *HeadInfo) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *HeadInfo) GetShowID() uint64 {
	if x != nil {
		return x.ShowID
	}
	return 0
}

func (x *HeadInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HeadInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *HeadInfo) GetIcon() int32 {
	if x != nil {
		return x.Icon
	}
	return 0
}

func (x *HeadInfo) GetIconEdge() int32 {
	if x != nil {
		return x.IconEdge
	}
	return 0
}

func (x *HeadInfo) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *HeadInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *HeadInfo) GetHeadImgUrl() string {
	if x != nil {
		return x.HeadImgUrl
	}
	return ""
}

type GameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameMode gameconf.GameModeTyp `protobuf:"varint,1,opt,name=gameMode,proto3,enum=gameconf.GameModeTyp" json:"gameMode,omitempty"`
	GameUUID string               `protobuf:"bytes,2,opt,name=gameUUID,proto3" json:"gameUUID,omitempty"`
}

func (x *GameInfo) Reset() {
	*x = GameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameInfo) ProtoMessage() {}

func (x *GameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameInfo.ProtoReflect.Descriptor instead.
func (*GameInfo) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{5}
}

func (x *GameInfo) GetGameMode() gameconf.GameModeTyp {
	if x != nil {
		return x.GameMode
	}
	return gameconf.GameModeTyp_MGTInvalid
}

func (x *GameInfo) GetGameUUID() string {
	if x != nil {
		return x.GameUUID
	}
	return ""
}

type LoginSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcSceneId  int32  `protobuf:"varint,1,opt,name=srcSceneId,proto3" json:"srcSceneId,omitempty"`
	SrcShowId   uint64 `protobuf:"varint,2,opt,name=srcShowId,proto3" json:"srcShowId,omitempty"`    //邀请人
	SubType     string `protobuf:"bytes,3,opt,name=subType,proto3" json:"subType,omitempty"`         //子类型
	Data        string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`               //其它数据
	AdChannelId string `protobuf:"bytes,5,opt,name=adChannelId,proto3" json:"adChannelId,omitempty"` //广告渠道号
}

func (x *LoginSource) Reset() {
	*x = LoginSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginSource) ProtoMessage() {}

func (x *LoginSource) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginSource.ProtoReflect.Descriptor instead.
func (*LoginSource) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{6}
}

func (x *LoginSource) GetSrcSceneId() int32 {
	if x != nil {
		return x.SrcSceneId
	}
	return 0
}

func (x *LoginSource) GetSrcShowId() uint64 {
	if x != nil {
		return x.SrcShowId
	}
	return 0
}

func (x *LoginSource) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *LoginSource) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *LoginSource) GetAdChannelId() string {
	if x != nil {
		return x.AdChannelId
	}
	return ""
}

type Room struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting     *RoomSetting `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"`
	OwnerUserId uint64       `protobuf:"varint,2,opt,name=ownerUserId,proto3" json:"ownerUserId,omitempty"`  //房主
	RoomId      uint32       `protobuf:"varint,3,opt,name=roomId,proto3" json:"roomId,omitempty"`            //房间id(内部用)
	RoomNO      uint32       `protobuf:"varint,4,opt,name=roomNO,proto3" json:"roomNO,omitempty"`            //房间编号
	VoiceId     string       `protobuf:"bytes,5,opt,name=voiceId,proto3" json:"voiceId,omitempty"`           //房间语音id
	Seats       []*Room_Seat `protobuf:"bytes,10,rep,name=seats,proto3" json:"seats,omitempty"`              //座位信息
	LookerCount int32        `protobuf:"varint,11,opt,name=lookerCount,proto3" json:"lookerCount,omitempty"` //旁观者数量
}

func (x *Room) Reset() {
	*x = Room{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Room) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room) ProtoMessage() {}

func (x *Room) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room.ProtoReflect.Descriptor instead.
func (*Room) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{7}
}

func (x *Room) GetSetting() *RoomSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *Room) GetOwnerUserId() uint64 {
	if x != nil {
		return x.OwnerUserId
	}
	return 0
}

func (x *Room) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Room) GetRoomNO() uint32 {
	if x != nil {
		return x.RoomNO
	}
	return 0
}

func (x *Room) GetVoiceId() string {
	if x != nil {
		return x.VoiceId
	}
	return ""
}

func (x *Room) GetSeats() []*Room_Seat {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *Room) GetLookerCount() int32 {
	if x != nil {
		return x.LookerCount
	}
	return 0
}

type RoomSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameMode   gameconf.GameModeTyp `protobuf:"varint,1,opt,name=gameMode,proto3,enum=gameconf.GameModeTyp" json:"gameMode,omitempty"` //游戏模式
	RoomName   string               `protobuf:"bytes,2,opt,name=roomName,proto3" json:"roomName,omitempty"`                            //房间名称
	MaxPlayer  uint32               `protobuf:"varint,3,opt,name=maxPlayer,proto3" json:"maxPlayer,omitempty"`                         //最大人数
	AllowEnter bool                 `protobuf:"varint,4,opt,name=allowEnter,proto3" json:"allowEnter,omitempty"`                       //允许进入
}

func (x *RoomSetting) Reset() {
	*x = RoomSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomSetting) ProtoMessage() {}

func (x *RoomSetting) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomSetting.ProtoReflect.Descriptor instead.
func (*RoomSetting) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{8}
}

func (x *RoomSetting) GetGameMode() gameconf.GameModeTyp {
	if x != nil {
		return x.GameMode
	}
	return gameconf.GameModeTyp_MGTInvalid
}

func (x *RoomSetting) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *RoomSetting) GetMaxPlayer() uint32 {
	if x != nil {
		return x.MaxPlayer
	}
	return 0
}

func (x *RoomSetting) GetAllowEnter() bool {
	if x != nil {
		return x.AllowEnter
	}
	return false
}

type GameSeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId        int32            `protobuf:"varint,1,opt,name=seatId,proto3" json:"seatId,omitempty"`
	Dead          bool             `protobuf:"varint,3,opt,name=dead,proto3" json:"dead,omitempty"`
	RoleType      gameconf.RoleTyp `protobuf:"varint,4,opt,name=roleType,proto3,enum=gameconf.RoleTyp" json:"roleType,omitempty"`
	Hp            int32            `protobuf:"varint,5,opt,name=hp,proto3" json:"hp,omitempty"`
	Ap            int32            `protobuf:"varint,6,opt,name=ap,proto3" json:"ap,omitempty"`                       //行动力
	CardPoolCount int32            `protobuf:"varint,7,opt,name=cardPoolCount,proto3" json:"cardPoolCount,omitempty"` //牌库数量
}

func (x *GameSeat) Reset() {
	*x = GameSeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSeat) ProtoMessage() {}

func (x *GameSeat) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSeat.ProtoReflect.Descriptor instead.
func (*GameSeat) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{9}
}

func (x *GameSeat) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GameSeat) GetDead() bool {
	if x != nil {
		return x.Dead
	}
	return false
}

func (x *GameSeat) GetRoleType() gameconf.RoleTyp {
	if x != nil {
		return x.RoleType
	}
	return gameconf.RoleTyp_RTInvalid
}

func (x *GameSeat) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *GameSeat) GetAp() int32 {
	if x != nil {
		return x.Ap
	}
	return 0
}

func (x *GameSeat) GetCardPoolCount() int32 {
	if x != nil {
		return x.CardPoolCount
	}
	return 0
}

//房间配置
type ServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinPlayerCount uint32 `protobuf:"varint,1,opt,name=minPlayerCount,proto3" json:"minPlayerCount,omitempty"`
	MaxPlayerCount uint32 `protobuf:"varint,2,opt,name=maxPlayerCount,proto3" json:"maxPlayerCount,omitempty"`
}

func (x *ServerConfig) Reset() {
	*x = ServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConfig) ProtoMessage() {}

func (x *ServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConfig.ProtoReflect.Descriptor instead.
func (*ServerConfig) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{10}
}

func (x *ServerConfig) GetMinPlayerCount() uint32 {
	if x != nil {
		return x.MinPlayerCount
	}
	return 0
}

func (x *ServerConfig) GetMaxPlayerCount() uint32 {
	if x != nil {
		return x.MaxPlayerCount
	}
	return 0
}

type Int32KV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key int32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	V   int32 `protobuf:"varint,2,opt,name=v,proto3" json:"v,omitempty"`
}

func (x *Int32KV) Reset() {
	*x = Int32KV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32KV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32KV) ProtoMessage() {}

func (x *Int32KV) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32KV.ProtoReflect.Descriptor instead.
func (*Int32KV) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{11}
}

func (x *Int32KV) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *Int32KV) GetV() int32 {
	if x != nil {
		return x.V
	}
	return 0
}

//位置
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row int32 `protobuf:"varint,1,opt,name=row,proto3" json:"row,omitempty"`
	Col int32 `protobuf:"varint,2,opt,name=col,proto3" json:"col,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{12}
}

func (x *Position) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *Position) GetCol() int32 {
	if x != nil {
		return x.Col
	}
	return 0
}

//棋盘
type GameBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cells []*Cell `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (x *GameBoard) Reset() {
	*x = GameBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameBoard) ProtoMessage() {}

func (x *GameBoard) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameBoard.ProtoReflect.Descriptor instead.
func (*GameBoard) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{13}
}

func (x *GameBoard) GetCells() []*Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos  *Position `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	Card *Card     `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{14}
}

func (x *Cell) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Cell) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBack         bool      `protobuf:"varint,1,opt,name=isBack,proto3" json:"isBack,omitempty"`         //是否背面朝上
	BuffHp         int32     `protobuf:"varint,2,opt,name=buffHp,proto3" json:"buffHp,omitempty"`         //背面朝上时显示的buff生命值
	BuffAttack     int32     `protobuf:"varint,3,opt,name=buffAttack,proto3" json:"buffAttack,omitempty"` //背面朝上时显示的buff攻击力
	HeroId         int32     `protobuf:"varint,4,opt,name=heroId,proto3" json:"heroId,omitempty"`
	Hp             int32     `protobuf:"varint,5,opt,name=hp,proto3" json:"hp,omitempty"`
	Attack         int32     `protobuf:"varint,6,opt,name=attack,proto3" json:"attack,omitempty"`
	Buffs          []*Buff   `protobuf:"bytes,7,rep,name=buffs,proto3" json:"buffs,omitempty"`                     //拥有的buff
	Position       *Position `protobuf:"bytes,8,opt,name=position,proto3" json:"position,omitempty"`               //位置
	SkillId        int32     `protobuf:"varint,9,opt,name=skillId,proto3" json:"skillId,omitempty"`                //技能Id
	HpMax          int32     `protobuf:"varint,10,opt,name=hpMax,proto3" json:"hpMax,omitempty"`                   //最大血量
	CanTurnUp      bool      `protobuf:"varint,11,opt,name=canTurnUp,proto3" json:"canTurnUp,omitempty"`           //是否可以翻到正面
	AttackDistance int32     `protobuf:"varint,12,opt,name=attackDistance,proto3" json:"attackDistance,omitempty"` //攻击距离（默认为1)
	LeftAttackCnt  int32     `protobuf:"varint,13,opt,name=leftAttackCnt,proto3" json:"leftAttackCnt,omitempty"`   //剩余攻击次数
	Id             int32     `protobuf:"varint,14,opt,name=id,proto3" json:"id,omitempty"`                         //卡牌游戏局内唯一Id
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{15}
}

func (x *Card) GetIsBack() bool {
	if x != nil {
		return x.IsBack
	}
	return false
}

func (x *Card) GetBuffHp() int32 {
	if x != nil {
		return x.BuffHp
	}
	return 0
}

func (x *Card) GetBuffAttack() int32 {
	if x != nil {
		return x.BuffAttack
	}
	return 0
}

func (x *Card) GetHeroId() int32 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

func (x *Card) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *Card) GetAttack() int32 {
	if x != nil {
		return x.Attack
	}
	return 0
}

func (x *Card) GetBuffs() []*Buff {
	if x != nil {
		return x.Buffs
	}
	return nil
}

func (x *Card) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Card) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *Card) GetHpMax() int32 {
	if x != nil {
		return x.HpMax
	}
	return 0
}

func (x *Card) GetCanTurnUp() bool {
	if x != nil {
		return x.CanTurnUp
	}
	return false
}

func (x *Card) GetAttackDistance() int32 {
	if x != nil {
		return x.AttackDistance
	}
	return 0
}

func (x *Card) GetLeftAttackCnt() int32 {
	if x != nil {
		return x.LeftAttackCnt
	}
	return 0
}

func (x *Card) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Buff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffId      int32              `protobuf:"varint,1,opt,name=buffId,proto3" json:"buffId,omitempty"`
	ExpireType  gameconf.ExpireTyp `protobuf:"varint,2,opt,name=expireType,proto3,enum=gameconf.ExpireTyp" json:"expireType,omitempty"` //buff生命周期类型  ：1 永久buff 2 回合制buff 3次数buff
	ExpireV     int32              `protobuf:"varint,3,opt,name=expireV,proto3" json:"expireV,omitempty"`                               // 生命周期 （持续回合数或者允许使用次数）
	CreateRound int32              `protobuf:"varint,4,opt,name=createRound,proto3" json:"createRound,omitempty"`                       //buff施加的回合
	UseCount    int32              `protobuf:"varint,5,opt,name=useCount,proto3" json:"useCount,omitempty"`                             //如果是次数buff，则每次使用都计数
	IsOverlap   bool               `protobuf:"varint,6,opt,name=isOverlap,proto3" json:"isOverlap,omitempty"`                           //（是否需要叠放buff）
	BuffCount   int32              `protobuf:"varint,7,opt,name=buffCount,proto3" json:"buffCount,omitempty"`                           //根据buff的IsOverlap 属性使用，如果需要叠放，新增重复buff只做buffCount累加；如果不需要叠放，buffCount都为1.新增重复buff时直接新建一个Buff对象
}

func (x *Buff) Reset() {
	*x = Buff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buff) ProtoMessage() {}

func (x *Buff) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buff.ProtoReflect.Descriptor instead.
func (*Buff) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{16}
}

func (x *Buff) GetBuffId() int32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

func (x *Buff) GetExpireType() gameconf.ExpireTyp {
	if x != nil {
		return x.ExpireType
	}
	return gameconf.ExpireTyp_ETInvalid
}

func (x *Buff) GetExpireV() int32 {
	if x != nil {
		return x.ExpireV
	}
	return 0
}

func (x *Buff) GetCreateRound() int32 {
	if x != nil {
		return x.CreateRound
	}
	return 0
}

func (x *Buff) GetUseCount() int32 {
	if x != nil {
		return x.UseCount
	}
	return 0
}

func (x *Buff) GetIsOverlap() bool {
	if x != nil {
		return x.IsOverlap
	}
	return false
}

func (x *Buff) GetBuffCount() int32 {
	if x != nil {
		return x.BuffCount
	}
	return 0
}

type Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Old    int32 `protobuf:"varint,1,opt,name=old,proto3" json:"old,omitempty"`
	New    int32 `protobuf:"varint,2,opt,name=new,proto3" json:"new,omitempty"`
	Change int32 `protobuf:"varint,3,opt,name=change,proto3" json:"change,omitempty"`
}

func (x *Change) Reset() {
	*x = Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change) ProtoMessage() {}

func (x *Change) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change.ProtoReflect.Descriptor instead.
func (*Change) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{17}
}

func (x *Change) GetOld() int32 {
	if x != nil {
		return x.Old
	}
	return 0
}

func (x *Change) GetNew() int32 {
	if x != nil {
		return x.New
	}
	return 0
}

func (x *Change) GetChange() int32 {
	if x != nil {
		return x.Change
	}
	return 0
}

type PosChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Old *Position `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	New *Position `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *PosChange) Reset() {
	*x = PosChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosChange) ProtoMessage() {}

func (x *PosChange) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosChange.ProtoReflect.Descriptor instead.
func (*PosChange) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{18}
}

func (x *PosChange) GetOld() *Position {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *PosChange) GetNew() *Position {
	if x != nil {
		return x.New
	}
	return nil
}

type BuffChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldBuffIds []int32 `protobuf:"varint,1,rep,name=oldBuffIds,proto3" json:"oldBuffIds,omitempty"`
	NewBuffIds []int32 `protobuf:"varint,2,rep,name=newBuffIds,proto3" json:"newBuffIds,omitempty"`
	AddBuffId  int32   `protobuf:"varint,3,opt,name=addBuffId,proto3" json:"addBuffId,omitempty"`
	DelBuffId  int32   `protobuf:"varint,4,opt,name=delBuffId,proto3" json:"delBuffId,omitempty"`
}

func (x *BuffChange) Reset() {
	*x = BuffChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffChange) ProtoMessage() {}

func (x *BuffChange) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffChange.ProtoReflect.Descriptor instead.
func (*BuffChange) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{19}
}

func (x *BuffChange) GetOldBuffIds() []int32 {
	if x != nil {
		return x.OldBuffIds
	}
	return nil
}

func (x *BuffChange) GetNewBuffIds() []int32 {
	if x != nil {
		return x.NewBuffIds
	}
	return nil
}

func (x *BuffChange) GetAddBuffId() int32 {
	if x != nil {
		return x.AddBuffId
	}
	return 0
}

func (x *BuffChange) GetDelBuffId() int32 {
	if x != nil {
		return x.DelBuffId
	}
	return 0
}

type ActSelectParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positions []*Position `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"` //技能选择的目标
	Seat      int32       `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`          //技能选择的座位号
}

func (x *ActSelectParam) Reset() {
	*x = ActSelectParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActSelectParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActSelectParam) ProtoMessage() {}

func (x *ActSelectParam) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActSelectParam.ProtoReflect.Descriptor instead.
func (*ActSelectParam) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{20}
}

func (x *ActSelectParam) GetPositions() []*Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *ActSelectParam) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

type CardGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int32   `protobuf:"varint,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Name    string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` //卡组名称
	HeroIds []int32 `protobuf:"varint,3,rep,name=heroIds,proto3" json:"heroIds,omitempty"`
}

func (x *CardGroup) Reset() {
	*x = CardGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardGroup) ProtoMessage() {}

func (x *CardGroup) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardGroup.ProtoReflect.Descriptor instead.
func (*CardGroup) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{21}
}

func (x *CardGroup) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CardGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CardGroup) GetHeroIds() []int32 {
	if x != nil {
		return x.HeroIds
	}
	return nil
}

type PoolCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId int32 `protobuf:"varint,1,opt,name=cardId,proto3" json:"cardId,omitempty"` //卡牌局内唯一id
	HeroId int32 `protobuf:"varint,2,opt,name=heroId,proto3" json:"heroId,omitempty"` //英雄Id
}

func (x *PoolCard) Reset() {
	*x = PoolCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolCard) ProtoMessage() {}

func (x *PoolCard) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolCard.ProtoReflect.Descriptor instead.
func (*PoolCard) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{22}
}

func (x *PoolCard) GetCardId() int32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *PoolCard) GetHeroId() int32 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

type Room_Seat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId    int32      `protobuf:"varint,1,opt,name=seatId,proto3" json:"seatId,omitempty"`
	UserBrief *UserBrief `protobuf:"bytes,2,opt,name=userBrief,proto3" json:"userBrief,omitempty"`
	Ready     bool       `protobuf:"varint,3,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *Room_Seat) Reset() {
	*x = Room_Seat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_def_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Room_Seat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room_Seat) ProtoMessage() {}

func (x *Room_Seat) ProtoReflect() protoreflect.Message {
	mi := &file_def_def_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room_Seat.ProtoReflect.Descriptor instead.
func (*Room_Seat) Descriptor() ([]byte, []int) {
	return file_def_def_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Room_Seat) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *Room_Seat) GetUserBrief() *UserBrief {
	if x != nil {
		return x.UserBrief
	}
	return nil
}

func (x *Room_Seat) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

var File_def_def_proto protoreflect.FileDescriptor

var file_def_def_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x64, 0x65, 0x66, 0x2f, 0x64, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x1a, 0x36, 0x73, 0x61, 0x6e, 0x67, 0x75, 0x6f,
	0x73, 0x68, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x67, 0x73, 0x5f, 0x68, 0x65, 0x72, 0x6f,
	0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x2f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x82, 0x02, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x73, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x65,
	0x61, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe6, 0x03, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x42, 0x72,
	0x69, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x49, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x63, 0x6f, 0x6e, 0x45, 0x64, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x69, 0x63, 0x6f, 0x6e, 0x45, 0x64, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x65,
	0x61, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa7,
	0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x36,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66,
	0x22, 0x16, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x56,
	0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x00, 0x22, 0x92, 0x03, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x45,
	0x64, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x45,
	0x64, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x64, 0x75,
	0x6c, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x75, 0x6c,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x68, 0x6f, 0x77, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x68, 0x6f,
	0x77, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x65,
	0x61, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x22, 0xda, 0x01,
	0x0a, 0x08, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e,
	0x45, 0x64, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e,
	0x45, 0x64, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x22, 0x59, 0x0a, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x55, 0x55, 0x49, 0x44, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x53, 0x68, 0x6f, 0x77,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x72, 0x63, 0x53, 0x68, 0x6f,
	0x77, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x22, 0xd6, 0x02, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x07,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x4f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x4f, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x65, 0x61, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65,
	0x66, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x52, 0x05, 0x73, 0x65, 0x61,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x66, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65,
	0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x22, 0x9a, 0x01, 0x0a,
	0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65,
	0x61, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x61,
	0x70, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x50, 0x6f,
	0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x4b, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x76, 0x22, 0x2e, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x6f, 0x77,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63,
	0x6f, 0x6c, 0x22, 0x30, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63,
	0x65, 0x6c, 0x6c, 0x73, 0x22, 0x4e, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x23, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x64, 0x65, 0x66, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04,
	0x63, 0x61, 0x72, 0x64, 0x22, 0x96, 0x03, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x48, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x48, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x75, 0x66, 0x66, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x68, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a,
	0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x52, 0x05, 0x62, 0x75, 0x66,
	0x66, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x68,
	0x70, 0x4d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x68, 0x70, 0x4d, 0x61,
	0x78, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x54, 0x75, 0x72, 0x6e, 0x55, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x54, 0x75, 0x72, 0x6e, 0x55, 0x70, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6c, 0x65, 0x66, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe7, 0x01,
	0x0a, 0x04, 0x42, 0x75, 0x66, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x79, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x56, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x56, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x66,
	0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x75,
	0x66, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6f, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x55, 0x0a,
	0x09, 0x50, 0x6f, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6f, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65,
	0x66, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12,
	0x23, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x6e, 0x65, 0x77, 0x22, 0x90, 0x01, 0x0a, 0x0a, 0x42, 0x75, 0x66, 0x66, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x00, 0x52, 0x0a, 0x6f, 0x6c, 0x64,
	0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x42, 0x75,
	0x66, 0x66, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x00, 0x52,
	0x0a, 0x6e, 0x65, 0x77, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c,
	0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x09, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x65, 0x61, 0x74, 0x22, 0x57,
	0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x68, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x00, 0x52, 0x07,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x73, 0x22, 0x3a, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x72, 0x6f, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x2a, 0x81, 0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x72, 0x61, 0x77, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x10, 0x06,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x68, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x10, 0x07, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x6e, 0x64, 0x10, 0x08, 0x2a, 0x60, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x75, 0x72, 0x6e, 0x55, 0x70, 0x43, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x6f, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x43, 0x61, 0x6d, 0x70, 0x10, 0x05, 0x2a, 0x8a, 0x02, 0x0a, 0x0e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x6e, 0x79, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x79, 0x4f, 0x77, 0x6e, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x79, 0x4f, 0x77, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x55, 0x70, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x79, 0x4f, 0x77, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x6e, 0x65, 0x6d, 0x79, 0x46, 0x61, 0x63, 0x65, 0x55, 0x70, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x45, 0x6e, 0x65, 0x6d, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x4d, 0x79, 0x4f, 0x77, 0x6e, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x4d, 0x79, 0x4f, 0x77, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x55, 0x70, 0x10,
	0x08, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x79, 0x4f, 0x77, 0x6e, 0x42,
	0x61, 0x63, 0x6b, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6e,
	0x65, 0x6d, 0x79, 0x46, 0x61, 0x63, 0x65, 0x55, 0x70, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x10, 0x0b, 0x12,
	0x09, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f,
	0x74, 0x48, 0x65, 0x61, 0x76, 0x79, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x6e, 0x65, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x4d, 0x79, 0x4f, 0x77, 0x6e, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x45,
	0x6e, 0x65, 0x6d, 0x79, 0x10, 0x0e, 0x42, 0x23, 0x5a, 0x21, 0x73, 0x61, 0x6e, 0x67, 0x75, 0x6f,
	0x73, 0x68, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x67, 0x73, 0x5f, 0x68, 0x65, 0x72, 0x6f,
	0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_def_def_proto_rawDescOnce sync.Once
	file_def_def_proto_rawDescData = file_def_def_proto_rawDesc
)

func file_def_def_proto_rawDescGZIP() []byte {
	file_def_def_proto_rawDescOnce.Do(func() {
		file_def_def_proto_rawDescData = protoimpl.X.CompressGZIP(file_def_def_proto_rawDescData)
	})
	return file_def_def_proto_rawDescData
}

var file_def_def_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_def_def_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_def_def_proto_goTypes = []interface{}{
	(GamePhase)(0),                // 0: gamedef.GamePhase
	(ActType)(0),                  // 1: gamedef.ActType
	(SelectCardType)(0),           // 2: gamedef.SelectCardType
	(UserSummary_Version)(0),      // 3: gamedef.UserSummary.Version
	(*AuthInfo)(nil),              // 4: gamedef.AuthInfo
	(*UserBrief)(nil),             // 5: gamedef.UserBrief
	(*UserSummary)(nil),           // 6: gamedef.UserSummary
	(*UserBase)(nil),              // 7: gamedef.UserBase
	(*HeadInfo)(nil),              // 8: gamedef.HeadInfo
	(*GameInfo)(nil),              // 9: gamedef.GameInfo
	(*LoginSource)(nil),           // 10: gamedef.LoginSource
	(*Room)(nil),                  // 11: gamedef.Room
	(*RoomSetting)(nil),           // 12: gamedef.RoomSetting
	(*GameSeat)(nil),              // 13: gamedef.GameSeat
	(*ServerConfig)(nil),          // 14: gamedef.ServerConfig
	(*Int32KV)(nil),               // 15: gamedef.Int32KV
	(*Position)(nil),              // 16: gamedef.Position
	(*GameBoard)(nil),             // 17: gamedef.GameBoard
	(*Cell)(nil),                  // 18: gamedef.Cell
	(*Card)(nil),                  // 19: gamedef.Card
	(*Buff)(nil),                  // 20: gamedef.Buff
	(*Change)(nil),                // 21: gamedef.Change
	(*PosChange)(nil),             // 22: gamedef.PosChange
	(*BuffChange)(nil),            // 23: gamedef.BuffChange
	(*ActSelectParam)(nil),        // 24: gamedef.ActSelectParam
	(*CardGroup)(nil),             // 25: gamedef.CardGroup
	(*PoolCard)(nil),              // 26: gamedef.PoolCard
	(*Room_Seat)(nil),             // 27: gamedef.Room.Seat
	(gameconf.AccountLoginTyp)(0), // 28: gameconf.AccountLoginTyp
	(gameconf.GameModeTyp)(0),     // 29: gameconf.GameModeTyp
	(gameconf.RoleTyp)(0),         // 30: gameconf.RoleTyp
	(gameconf.ExpireTyp)(0),       // 31: gameconf.ExpireTyp
}
var file_def_def_proto_depIdxs = []int32{
	28, // 0: gamedef.UserBrief.accountType:type_name -> gameconf.AccountLoginTyp
	3,  // 1: gamedef.UserSummary.version:type_name -> gamedef.UserSummary.Version
	5,  // 2: gamedef.UserSummary.userBrief:type_name -> gamedef.UserBrief
	29, // 3: gamedef.GameInfo.gameMode:type_name -> gameconf.GameModeTyp
	12, // 4: gamedef.Room.setting:type_name -> gamedef.RoomSetting
	27, // 5: gamedef.Room.seats:type_name -> gamedef.Room.Seat
	29, // 6: gamedef.RoomSetting.gameMode:type_name -> gameconf.GameModeTyp
	30, // 7: gamedef.GameSeat.roleType:type_name -> gameconf.RoleTyp
	18, // 8: gamedef.GameBoard.cells:type_name -> gamedef.Cell
	16, // 9: gamedef.Cell.pos:type_name -> gamedef.Position
	19, // 10: gamedef.Cell.card:type_name -> gamedef.Card
	20, // 11: gamedef.Card.buffs:type_name -> gamedef.Buff
	16, // 12: gamedef.Card.position:type_name -> gamedef.Position
	31, // 13: gamedef.Buff.expireType:type_name -> gameconf.ExpireTyp
	16, // 14: gamedef.PosChange.old:type_name -> gamedef.Position
	16, // 15: gamedef.PosChange.new:type_name -> gamedef.Position
	16, // 16: gamedef.ActSelectParam.positions:type_name -> gamedef.Position
	5,  // 17: gamedef.Room.Seat.userBrief:type_name -> gamedef.UserBrief
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_def_def_proto_init() }
func file_def_def_proto_init() {
	if File_def_def_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_def_def_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBrief); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Room); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32KV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActSelectParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_def_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Room_Seat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_def_def_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_def_def_proto_goTypes,
		DependencyIndexes: file_def_def_proto_depIdxs,
		EnumInfos:         file_def_def_proto_enumTypes,
		MessageInfos:      file_def_def_proto_msgTypes,
	}.Build()
	File_def_def_proto = out.File
	file_def_def_proto_rawDesc = nil
	file_def_def_proto_goTypes = nil
	file_def_def_proto_depIdxs = nil
}
