syntax = "proto3";

option go_package="sanguosha.com/sgs_herox/proto/cmsg";
// 客户端与服务端交互协议

package cmsg;

import "sanguosha.com/sgs_herox/proto/gameconf/game_type.proto";
import "sanguosha.com/sgs_herox/proto/def/def.proto";


message CReqPing {
    int64 timeTag = 1;
    int32 svrType = 2;
}

message SRespPing {
    int64 timeTag = 1;
    int32 svrType = 2;
}

//请求登录
message CReqLogin{
    string account = 1;
    string password = 2;
    string version = 3;
    string ticket = 4;
    gameconf.AccountLoginTyp loginType =5;
}

// 响应登陆请求.
message SRespLogin {
    enum ErrCode {
        Succ = 0;
        ErrSystem = 1;
        ErrTicketInvalid = 2;//凭据无效
        ErrForceRealName = 3;//强制实名而未实名
        ErrExtraInfoInvalid = 4;//登录信息不全
        ErrAccountBan = 5;//账户被封
        ErrCreateAccountFailed = 6;//创建账号出错
        ErrLoadAccountFailed = 7;//加载账号出错
        ErrNotInWhiteList = 8;//未在白名单内
        ErrNotOpenTime = 9; //未到开服时间或者已关服
        ErrVersionNotMatch = 10; //版本不匹配
    }
    ErrCode errCode = 1;
    repeated int64 errData = 2[packed=false];//错误额外数据（用于显示）

    uint64 userId = 3;
    string account = 4;

    gamedef.UserBrief userBrief = 10;
    int64 serverTime = 11;//服务器当前时间

    bool isInGame = 20;//是否在游戏中，如果在请求游戏断线重连

    gamedef.ServerConfig serverCfg = 21;//服务器相关配置
}

//同步玩家信息
message SSyncUserBrief{
    gamedef.UserBrief userBrief = 1;
}

// 请求我的数据(暂时不用)
message CReqMyData {

}

// 响应我的数据请求（暂时不用）
message SRespMyData {
    enum ErrCode {
        Succ = 0;
        ErrUnknow = 1;
    }

    ErrCode errCode = 1;
    string errMsg = 2;
    //基础信息
    gamedef.UserBase userBase = 5;
}


//通知游戏开始，可以进入场景了
message SNoticeGameReady{
    message Seat{
        int32 seatId = 1;
        gamedef.HeadInfo head = 2;
        gameconf.UserConnectState connectState = 3;//玩家在线，离线，离开状态
    }
    gameconf.GameModeTyp gameMode = 1;//模式ID
    repeated Seat seats = 2;//玩家列表
    string gameUUID = 3;
    uint32 roomId = 4;
    string voiceId = 6; // 语音id
}

//请求游戏场景，游戏开始或断线重连用
message CReqGameScene{

}

message SRespGameScene{
    enum ErrCode {
        None = 0;
        ErrUnknown = 1;
        ErrGameNotFound = 2;
        ErrGameOver = 3;//游戏已结束
    }

    message Seat{
        int32 seatId = 1;
        uint64 userId = 2;
        gamedef.UserBrief userBrief = 3;
        gameconf.UserConnectState connectState = 4;//玩家在线，离线，离开状态
        gamedef.GameSeat gameSeat = 5;
    }

    ErrCode errCode = 1;
    gameconf.GameModeTyp gameMode = 2;
    gamedef.RoomSetting roomSetting = 4;
    uint32 roomNO = 5;//房间NO

    repeated int32 opSeatIds = 8[packed=false];//当前操作的人
    int64 opEndTime = 9;//当前操作截止时间

    gamedef.GamePhase phase = 10;//游戏在什么阶段
    repeated Seat seats = 12;//场上座位上的玩家信息

    string voiceId = 14;
    int32 lookerCount = 15;//旁观者数量
    int64 phaseEndTime = 16;//阶段截止时间戳

    int32 mySeatId = 17;//我的座位号,旁观者为-1
    gameconf.LookerTyp lookerType = 18;//旁观类型
    int64 serverTime = 19;//服务器当前时间戳

    gamedef.GameBoard board = 20;
}


//暂时无用
message CReqSceneReady{

}

message SRespSceneReady{
    enum ErrCode{
        None = 0;
        ErrSystem = 1;
    }
    ErrCode errCode = 1;
    int32 outTime = 2;
}

message SNoticeGameStart{

}

message SNoticeEnterPhase{
    gamedef.GamePhase phase = 1;
    int32 roundCount = 2; // 回合数计数
    int32 seatId = 3; //当前回合玩家座位号
    int64 phaseEndTime = 4;//阶段截止时间戳（倒计时=此值-SRespGameScene中的serverTime）
}

//通知抓牌
message SNoticeDrawCard{
    int32 opSeatId = 1;
    repeated gamedef.PoolCard cards = 2;
}

message SNoticeOp{
    enum OpType{
        Invalid = 0;
        ActionStart = 1;//自己回合 可以操作了
        SelectCard = 2;//选择卡牌 指明目标位置
        SelectCamp = 3;//选择军营
    }

    message Data{
        int32 optCount = 1;//选牌时，代表选牌个数
        gamedef.SelectCardType selectCardTyp = 2;//选牌类型
    }

    OpType opType = 1;
    int32 opSeatId = 2;//被要求操作动作人的seatId
    repeated gamedef.Position targetPos = 4;//可选目标位置
    int64 opEndTime = 6;//操作截止时间戳
    int32 spellCard = 7;
    Data data = 10;
    int32 leftAP = 11;//剩余行动力,opType=ActionStart时有效
}

message CReqOpt{
    enum OpType{
        Invalid = 0;
        SelectCard = 1;
        SelectCamp = 2;
    }

    OpType opType = 1;
    int32 skillId = 2;
    repeated int32 cardIds = 3[packed=false];
    repeated gamedef.Position targetPos = 4;
    repeated int32 data = 5[packed=false];
    int32 seatId = 6 ;//选的军营Id
}

message SRespOpt{
    enum ErrCode{
        None = 0;
        ErrUnKnow = 1;
        ErrNotMyTurn = 2;//不在我的操作时间内
        ErrSelectCountNotSame = 3 ; // 选牌数量 不等于 指定的选牌个数
        ErrSelectType = 4; // 选牌 类型 错误
    }
    ErrCode errCode = 1;
}



message CReqAct{ //客户端请求行动 （攻击、移动、放置、翻牌）

    gamedef.ActType actType = 1;
    int32 cardId = 2;
    gamedef.Position targetPos = 3;

    bool needSelect = 4;//当动作为翻牌时用，标识是否为指向性翻牌技能 
    gamedef.ActSelectParam actSelect = 5; //当动作为翻牌时用，指向性翻牌技能专用，用于指定目标

}

message SRespAct{//若客户端请求的行动非法，则服务端回复 非法信息
    enum ErrCode{
        None = 0;
        ErrUnKnow = 1;
        ErrInputParam = 2;
        ErrCardNotExist = 3;//我无此牌
        ErrTargetPosNotEmpty = 4;//目标位置不为空
        ErrTargetPosNotMyPlaceArea = 5;//不是我的放置区域
        ErrAPNotEnough = 6;//行动力不足
        ErrNotMyTurn = 7;//不是我的回合
        ErrDistanceLimit = 8;//距离太长
        ErrCardCfgNotExist =9;
        ErrHeroCfgNotExist = 10;//英雄配置不存在
        ErrSkillCfgNotExist = 11;//英雄配置不存在
        ErrActionNotSupport = 12;//不支持此操作
        ErrCardAlreadyFaceUp  = 13;//卡牌已经正面
        ErrCreateFaceUpSkill = 14;//创建翻牌技失败
        ErrTargetPosCardNotExist = 15;//目标位置没有牌
        ErrCampCannotAttack = 16;//军营不可被攻击
        ErrAttackCardNotFaceUp = 17;//背面牌不可攻击
        ErrCardRoundNotEnough = 18 ;//卡牌于本回合放置，本回合内无法翻面
        ErrAttackCountNotEnough =19 ;// 卡牌本回合攻击次数已经用完 ，无法再攻击
        ErrCanNotAttackMyOwnCard =20 ;// 不能攻击自己的武将
        ErrCanNotAttackMyOwnCamp =21 ;// 不能攻击自己的军营
        ErrActSelectNotRight = 22;//选择操作对象错误
        ErrNoSelectTarget = 23 ;//翻面技 目标为空
    }
    ErrCode errCode = 1;
    gamedef.ActType actType = 2;
    int32 cardId = 3;
    gamedef.Position targetPos = 4;
    gamedef.ActSelectParam actSelect = 5;
}

//同步玩家操作,纯表现
message SSyncAct{
    gamedef.ActType actType = 1;
    int32 opSeatId = 2;//操作人座位号
    int32 opCard = 3;//操作的牌 原协议为opPos和card
    repeated gamedef.Position targetPos = 4;//目标牌操作位
    int32 spellCard = 6;//哪张牌谁发动的 原协议类型为gamedef.Card

    //Example ：离间 由 A发起 ，指定 B 对C 发动攻击 。 spellCard=A_Card  , opSeatId =B_SeatId   , card =B_Card  , targerPos = C
}

//同步卡牌变化
message SSyncCard{
    enum ChangeType{
        None = 0;
        Place = 1;//放置
        FaceUp = 2;
        HP = 3;
        HPMax = 4;
        Attack= 5;
        Die = 6;
        Pos = 7;
        Buff = 8;
        Skill = 9;//技能变化（被沉默了)
        AttackCnt = 10; //一回合的默认攻击次数
        FaceDown = 11; //被重新翻回 背面 //孙权技能
        AttackDistance = 12;//攻击距离发生变化（军营除外) -1代表不限距离
        CanFaceUp = 13;//是否可以翻面
    }

    message Change{
        ChangeType changeType = 1;
        int32 change = 2;
        int32 old = 3;
        int32 new = 4;
        gamedef.Position oldPos = 5;
        gamedef.Position newPos = 6;
        int32 newBuffId = 9;
    }

    gamedef.Card card = 1; //变化的牌
    int32 seatId = 3;

    repeated Change changes = 4;

    int32 spellSkillId = 10;//造成变化的技能Id
    int32 spellCard = 11;//造成变化的源牌(原协议为srcCard)
}

//同步使用技能,纯表现
message SSyncUseSkill{
    int32 seat = 1;
    int32 skillId = 2;
    int32 card = 3;//原类型为gamedef.Card
    repeated int32 targetCards = 4[packed=false];//原类型为gamedef.Card

    repeated int32 data = 5[packed=false];

    int32 targetSeatId = 7;//技能目标为军营
}

message SSyncUseSkillEnd{
    int32 seat = 1;
    int32 skillId = 2;
    int32 card = 3;
}

//同步军营变化
message SSyncCamp{
    enum ChangeType{
        None = 0;
        HP = 1;
        Attack = 2;
        WeaponAttack = 3;
        WeaponDurability = 4;
        Armor = 5;
        Crystal = 6;
        CrystalLimit = 7;
    }

    message Change{
        ChangeType changeType = 1;
        int32 change = 2;
        int32 old = 3;
        int32 new = 4;
        repeated gamedef.Buff newBuffs = 9;
    }

    repeated Change changes = 10;
    int32 seatId = 11;

    int32 spellCard = 20;//造成变化的牌
}

//同步手牌变化
message SSyncHandCard{
    enum ChangeType{
        None  = 0;
        Draw = 1;//抓牌导致的手牌变化
        Skill = 2;//技能导致的手牌变化（暂无）
        Place = 3;//放置导致的手牌变化
    }

    ChangeType changeTypes = 1;
    int32 seatId = 2;
    repeated gamedef.PoolCard getCards = 3;//此次变化获得的牌
    repeated gamedef.PoolCard loseCards = 4;//此次变化失去的牌
    repeated gamedef.PoolCard handCards = 5;//最终手牌局
    int32 spellCard = 6;//造成变化的牌Id
}

message SSyncGameBoard{
    repeated gamedef.GameSeat seats = 1;
}

message SNoticeGameOver{
    int32 winSeat = 1;//赢方
}





//取消当前操作
message CReqCancelCurOpt{

}

message SRespCancelCurOpt{
    enum ErrCode{
        None = 0;
        ErrNotMyTurn = 1;//不在我的操作时间内
    }
    ErrCode errCode = 1;
}

message CReqGameExit{
    int32 exitType = 1;//1，逃跑
}

message SRespGameExit{
    uint32 errCode = 1;
    int32 exitType = 2;//1，逃跑
}

message SSyncPlayerState{
    enum ChangeType{
        Invalid = 0;
        HP = 1;//(将废除）
        Die = 2;
        State = 3;//玩家状态变化
        AP = 4;//行动力变化
        CardPoolCount = 5;//牌库数量
    }

    int32 seat = 1;
    gameconf.UserConnectState connectState = 2;//玩家在线，离线，离开状态

    bool dead = 3;//是否是死亡状态

    gamedef.Change hpChange = 4;//大本营生命值(将废除）

    ChangeType changeType = 5;//同步类型

    int32 new = 6;//新值
}

// ========================================= Game Logic End =======================================================
message CReqGMCommand{
    string cmd = 1;
}
message SReqGMCommand{
    string ret = 1;
}

//跑马灯消息
message ServerNotice {
    string msg = 1;
}

// 聊天请求
message CReqChat{
    gameconf.ChatChannelTyp channel = 1;
    gameconf.ChatMsgTyp msgType = 2;
    string msg = 3;
    string msgId = 4;
    uint64 targetUserId = 5;
}

// 聊天请求返回
message SRespChat{
    enum ErrCode{
        None = 0;
        ErrNotInRoom = 1;//不在房间中
        ErrTargetNotOnline = 2;//对方不在线
        ErrNotSupport = 3;//暂不支持
        ErrWordFilterError = 4;//敏感词过滤系统报错
        ErrNotInGame = 5;//不在游戏中
    }

    ErrCode errCode = 1;
    gameconf.ChatChannelTyp channel = 3;
    gameconf.ChatMsgTyp msgType = 4;
    uint64 targetUserId = 5;
}

// 聊天消息
message SNoticeChatMsg{
    gameconf.ChatChannelTyp channel = 1;
    gameconf.ChatMsgTyp msgType = 2;
    gamedef.UserBrief fromUser = 3;
    int32 fromSeat = 4;//几号位发的
    string msg = 10;
    string msgId = 11;
}
//===========================房间相关=======================
// 查询我的房间
message CReqMyRoom{

}

message SRespMyRoom{
    enum ErrCode{
        None = 0;
        ErrUnknown = 1;
    }

    ErrCode errCode = 1;
    gamedef.Room room = 10;
}

message CReqRoomCreate{
    gamedef.RoomSetting settting = 1;
}

message SRespRoomCreate{
    enum ErrCode{
        None = 0;
        ErrUnknown = 1;
        ErrAlreadyInRoom = 2;//已在房间中
        ErrAlreadyInGame = 3;//已在游戏中
        ErrRoomSetting = 4;//房间参数错误
        ErrCreateRoom = 5;//创建房间失败
        ErrSitDownFail = 6;
    }

    ErrCode errCode = 1;
    gamedef.Room room = 2;
}

//请求快速加入房间，如无可用房间，将创建新房间
message CReqRoomQuickJoin{
    gameconf.GameModeTyp gameMode = 1;
}

message SRespRoomQuickJoin{
    enum ErrCode{
        None = 0;
        ErrUnknown = 1;
        ErrAlreadyInGame = 2;//已在游戏中
        ErrCreateRoom = 3;//创建房间失败
        ErrSitDownFail = 6;
    }

    ErrCode errCode = 1;
    gamedef.Room room = 2;
}

//房间配置更改
message CReqRoomSettingChange{
    gamedef.RoomSetting setting = 1;
}

message SRespRoomSettingChange{
    enum ErrCode{
        None = 0;
        ErrUnknown = 1;
        ErrNoAuthority = 2;//无权限
        ErrAlreadyInGame = 3;//房间游戏中
        ErrNotInRoom = 4;//不在房间中
        ErrRoomSetting = 5;//配置参数不对
        ErrChangeSeatCount = 6;//座位数量更改失败
    }

    ErrCode errCode = 1;
    gamedef.RoomSetting setting = 2;
}

message CReqRoomJoin{
    uint32 roomNO = 1;
}

message SRespRoomJoin{
    enum ErrCode{
        None = 0;
        ErrUnknown = 1;
        ErrRoomNotExist = 2;
        ErrRoomFull = 3;
        ErrRoomInGame = 4;
        ErrRoomNotAllowEnter = 5;
        ErrSitDownFail = 6;
        ErrAlreadyLooker = 7;
        ErrPlayerInGame = 8;
        ErrCanNotFindLookSeat = 9;
        ErrSitLookerFailed = 10;
    }

    ErrCode errCode = 1;
    uint32 roomNO = 2;
    bool isLooker = 3;
    bool roomIsInGame = 4;

    gamedef.Room room = 10;
}

//站起或坐下
message CReqRoomSeatChange{
    int32 targetSeatId = 1;//目标座位，-1代表站起当旁观
}

message SRespRoomSeatChange{
    enum ErrCode{
        None = 0;
        ErrUnknown = 1;
        ErrNotInRoom = 2;//不在房间中
        ErrTargetSeatNotExist = 3;//目标座位不存在
        ErrTargetSeatAlreadySeated = 4;//目标座位已有人
        ErrSitUpFail_AlreadySitUp = 5;//已是旁观者，站起失败
        ErrSitDownFail_AlreadySitDown = 6;//坐下失败,已是座位者
        ErrSitUpFail_IsLastUser = 7;//场上只有一个玩家时，不许站起
    }
    ErrCode errCode = 1;
    int32 targetSeatId = 2;//目标座位，-1代表站起当旁观
    gameconf.LookerTyp lookerType = 3;//如果是旁观者，旁观者类型

    gamedef.Room room = 10;
}

message CReqRoomLookerInfo{

}

message SRespRoomLookerInfo{
    enum ErrCode{
        None = 0;
        ErrUnknown = 1;
        ErrNotInRoom = 2;//不在房间中
    }
    ErrCode errCode = 1;
    repeated  gamedef.UserBrief lookers = 2;
}

message CReqRoomReady{
    bool ready = 1;
}

message SRespRoomReady{
    enum ErrCode{
        None = 0;
        ErrUnknown = 1;
        ErrNotInRoom = 2;
        ErrRoomInGame = 3;
        ErrOwnerNoNeedReady = 4;//房主不需要准备
    }

    ErrCode errCode = 1;
    bool ready = 2;
}

message CReqRoomLeave{

}

message SRespRoomLeave{
    enum ErrCode{
        None = 0;
        ErrUnknown = 1;
        ErrNotInRoom = 2;
    }

    ErrCode errCode = 1;
}

//T出玩家
message CReqRoomKick{
    bool kickAllLooker = 1;//是否T所有旁观玩家
    uint64 targetUserId = 2;//T出的玩家userId
}

message SRespRoomKick{
    enum ErrCode{
        None = 0;
        ErrUnknown = 1;
        ErrNoSeat = 2;//此位无人可T
        ErrNoAuthority = 3;//无权限
        ErrNotInRoom = 4;//不在房间中
        ErrRoomInGame = 5;//房间正在游戏中
        ErrTargetNotInRoom = 6;//被T对象不在房间中
    }

    ErrCode errCode = 1;
}

//通知准备倒计时
message SNoticeRoomTimer{
    enum NoticeType{
        Invalid = 0;
        ReadyTimerStart = 1;//准备倒计时生效
        ReadyTimerCancel = 2;//准备倒计时取消
    }
    NoticeType noticeType = 1;
    int64 endTime = 2;//倒计时截止时间
}

// 被T出通知
message SNoticeRoomKick {
    enum KickTyp{
        Invalid = 0;
        MatchGameEnd = 1;
    }
    uint64 kickerUserId = 1;//T人者
    uint32 roomId = 2;
    KickTyp kickType = 3;
}

//更换座位事件（包含变成旁观事件）
message SNoticeRoomChangeSeat{
    int32 seatId = 1;//换到哪个座位，-1代表旁观
    gameconf.LookerTyp lookerType = 2;//如果是旁观者，旁观类型
}

message CReqRoomStartGame{

}

message SRespRoomStartGame{
    enum ErrCode{
        None = 0;
        ErrUnknown = 1;
        ErrNoAuthority = 2;//无权限
        ErrNotInRoom = 3;
        ErrRoomInGame = 4;
        ErrCreateGameFail = 5;
        ErrNotAllReady = 6;
    }

    ErrCode errCode = 1;
}

//房间状态改变通知
message SNotifyRoomChange{
    enum Action{
        Invalid = 0;
        SitDown = 1;
        Leave = 2;//主动离开
        LeaveByKick = 3;//被T出离开
        OwnerChange = 4;//房主换了
        Ready = 5;//有人准备
        ReadyCancel = 6;//有人取消准备
        SettingChange = 7;//配置更改
        SitUpToLooker = 8;//有人变成旁观者
    }

    Action action  = 1;
    uint64 actionUserId = 2;
    int32 actionSeatId = 3;
    uint64 kickerUserId = 4;//当Action=LeaveByKick时有值，代表T人者的userId

    gamedef.Room room = 10;//room最新信息
}

//房间事件通知
message SNoticeRoomEvent{
    enum Event{
        Invalid = 0;
        Enter = 1;//有人进入
        Leave = 2;//有人退出
        SitFull = 3;//座位坐满
    }
    Event event = 1;
    gamedef.UserBrief actionUser = 2;
}

//同步旁观者数量
message SSyncLookerCount{
    int32 count = 1;
}

message SNoticeDebugInfo{
    string msg = 1;
}

message SNoticeLogout {
    gameconf.KickUserOutReason  reason = 1;
    string msg = 2;
    repeated int64 data = 3[packed=false];
}

//同步时间
message SSyncServerTime{
    int64 serverTime = 1;
}

//通用返回错误
message SRespCommonError{
    enum ErrCode{
        None = 0;
        SessionNotInLobby = 1;//不在大厅
        LookerCannotOp = 2;//旁观者不可操作
        SessionNotInGame = 3;//不在游戏中
    }
    ErrCode errCode = 1;
}

//匹配
message CReqMatch{
    enum ModeID{
        ModeNone = 0;
        ModeText = 1;  //文字场
        ModeVoice = 2;  //语音场
    }
    ModeID mode = 1;
}

message SRespMatch{
    enum ErrCode{
        None = 0;
        Success = 1;
        Failed = 2;
    }
    ErrCode errCode = 1;
    int32 model = 2;
}

// 匹配完成通知
message SNoticeMatchResult {
    enum NoticeType{
        Invalid = 0;
        MatchSucess = 1;
        MatchStartGame = 2;
    }
    int32 model = 2;
    NoticeType noticeType = 3;
    repeated  gamedef.UserBrief players = 5;
    gamedef.Room room = 6;
}

// 取消匹配
message CCancelMatch {
}

message SRespCancelMatch {
    enum ErrCode{
        None = 0;
        Failed = 1;
        Success = 2;
    }
    ErrCode errCode = 2;
}



message CCardGroupOpt{ //编辑卡组相关操作 ：1 客户端新建卡组 2 修改卡组  3选择使用
    enum OptType{
        OptNone = 0;
        OptCreat = 1;
        OptModify = 2;
        OptSelect = 3;
    }
    OptType optType = 1;
    gamedef.CardGroup cardsGroup = 2;//
}

message SRespCardGroupOpt{ //服务端回复 错误码
    enum ErrCode{
        ErrNone =0 ;
        ErrCardsCount= 1; //卡牌数量不符合规定的12张牌
        ErrCardSame = 2; //卡组中出现重复 卡牌
    }
    enum SuccessCode{
        SuccessNone= 0;
        SuccessCreat = 1;
        SuccessModify = 2;
        SuccessSelect = 3;
    }
    ErrCode errCode = 2;
    SuccessCode sCode = 3;
}



message CReqCardGroups{//客户端请求玩家的所有卡牌数据以及当前使用的卡组的ID

}

message SRespCardGroups{//服务端回复已编辑过的 多组卡牌
    int32 nowUseId= 1;//玩家当前使用的卡组ID
    repeated gamedef.CardGroup cardGroups = 2;
}



