syntax = "proto3";

// 共同的基础定义

package gamedef;

import "sanguosha.com/sgs_herox/proto/gameconf/game_type.proto";

//-----------用户信息----------
message AuthInfo{
    uint64 userId = 1;
    string nickname = 2;
    int32 sex = 3;
    string headImgUrl = 4;
    string headFrameImgUrl = 5;
    string birthday = 6;
    int64 registerTime = 7;
    string thirdAccountId = 8;//唯一账号Id
}

//简略信息
message UserBrief{
    uint64 userID = 1;
    int64 createTime = 2;//账号创建日期
    string loginIP = 3;//登录的ip
    string nickname = 4;//昵称
    int32 level = 5;//角色等级
    string account = 6;//账号
    string thirdAccountId = 7;//登录渠道的账号Id
    int32 icon = 8;//角色头像
    int32 iconEdge = 9;//角色头框
    gameconf.AccountLoginTyp accountType = 10;
    int32 exp = 12;//经验

    int32 sex = 20;
    string headImgUrl = 30;//头像地址
    string headFrameImgUrl = 31;//头像框地址


    int32 winCount = 40;//胜利场次
    int32 loseCount = 41;//失败场次
}

//玩家展示信息，比UserBrief要丰富
message UserSummary{
    enum Version{
        VerInit = 0;
    }

    Version version = 1;
    uint64 userId = 2;
    UserBrief userBrief = 3;
}

//玩家登录时基础信息
message UserBase{
    uint64 userID = 1;
    int64 createTime = 2;//账号创建日期
    string loginIP = 3;//登录的ip
    string nickname = 4;//昵称
    int32 level = 5;//角色等级
    string account = 6;//账号
    string icon = 8;//角色头像
    int32 iconEdge = 9;//角色头框
    int32 exp = 12;//经验
    int32 sex = 20;
    bool isAdult = 26;//是否是成年人
    int32 userAge = 27;//年龄
    uint64 showid = 29;
    string headImgUrl = 30;//头像地址
    string headFrameImgUrl = 31;//头像框地址
}

//头像信息
message HeadInfo{
    uint64 userID = 1;
    uint64 showID = 2;
    string name = 3;
    int32 level = 4;
    int32 icon = 5;
    int32 iconEdge = 6;
    int32 star = 8;
    int32 sex = 12;
    string headImgUrl = 13;
}


message GameInfo{
    gameconf.GameModeTyp gameMode = 1;
    string gameUUID = 2;
}


message LoginSource{
    int32  srcSceneId = 1;
    uint64 srcShowId = 2;//邀请人
    string subType = 3;//子类型
    string data = 4;//其它数据
    string  adChannelId = 5;//广告渠道号
}

message Room{
    message Seat{
        int32 seatId = 1;
        UserBrief userBrief = 2;
        bool ready = 3;
    }

    RoomSetting setting = 1;
    uint64 ownerUserId = 2;//房主
    uint32 roomId = 3;//房间id(内部用)
    uint32 roomNO = 4;//房间编号
    string voiceId = 5;//房间语音id

    repeated Seat seats = 10;//座位信息
    int32 lookerCount = 11;//旁观者数量
}

message RoomSetting{
    gameconf.GameModeTyp gameMode = 1;//游戏模式
    string roomName = 2;//房间名称
    uint32 maxPlayer = 3;//最大人数
    bool allowEnter = 4;//允许进入
}

message GameSeat{
    int32 seatId = 1;
    bool dead = 3;
    gameconf.RoleTyp roleType = 4;
    int32 hp = 5;
    int32 ap = 6;//行动力
    int32 cardPoolCount = 7;//牌库数量
}

enum GamePhase{
    Invalid = 0;
    Ready = 1;//游戏准备开始中
    Start = 2;//游戏开始了
    InitCard = 3;//初始牌阶段
    PhaseBegin = 4;//回合开始阶段
    PhaseDraw = 5;//抓牌阶段
    PhaseMain = 6;//操作开始阶段
    PhaseEnd = 7;//回合结束
    End = 8;//游戏结束
}

//房间配置
message ServerConfig{
    uint32 minPlayerCount = 1;
    uint32 maxPlayerCount = 2;
}

message Int32KV{
    int32 key = 1;
    int32 v = 2;
}

//位置
message Position{
    int32 row = 1;
    int32 col = 2;
}

//棋盘
message GameBoard{
    repeated Cell cells = 1;
}

message Cell{
    Position pos = 1;
    Card card = 2;
}

message Card{
    bool isBack = 1;//是否背面朝上
    int32 buffHp = 2;//背面朝上时显示的buff生命值
    int32 buffAttack = 3;//背面朝上时显示的buff攻击力
    int32 heroId = 4;
    int32 hp = 5;
    int32 attack = 6;
    repeated Buff buffs = 7;//拥有的buff
    Position position = 8;//位置
    int32 skillId = 9;//技能Id
    int32 hpMax = 10;//最大血量
    bool canTurnUp =11;//是否可以翻到正面

    int32 attackDistance = 12;  //攻击距离（默认为1)
    int32 leftAttackCnt = 13; //剩余攻击次数
    int32 id = 14;//卡牌游戏局内唯一Id
}

message Buff{
    int32 buffId = 1;
    gameconf.ExpireTyp expireType = 2;//buff生命周期类型  ：1 永久buff 2 回合制buff 3次数buff
    int32 expireV = 3; // 生命周期 （持续回合数或者允许使用次数）
    int32 createRound = 4;//buff施加的回合
    int32 useCount = 5;//如果是次数buff，则每次使用都计数
    bool isOverlap = 6;//（是否需要叠放buff）
    int32 buffCount = 7;//根据buff的IsOverlap 属性使用，如果需要叠放，新增重复buff只做buffCount累加；如果不需要叠放，buffCount都为1.新增重复buff时直接新建一个Buff对象
}

message Change{
    int32 old = 1;
    int32 new = 2;
    int32 change = 3;
}

message PosChange{
    gamedef.Position old = 1;
    gamedef.Position new = 2;
}

message BuffChange{
    repeated int32 oldBuffIds = 1[packed=false];
    repeated int32 newBuffIds = 2[packed=false];
    int32 addBuffId = 3;
    int32 delBuffId = 4;
}

enum ActType{
    None = 0;
    PlaceCard = 1;
    TurnUpCard = 2;
    MoveCard = 3;
    AttackCard = 4;
    AttackCamp = 5;
}

enum SelectCardType{
    Any = 0; //任意卡牌
    MyOwn = 1; //己方卡牌
    Enemy = 2; //敌方卡牌
    MyOwnFaceUp = 3; //己方 已经正面朝上的 卡牌
    MyOwnBack = 4; //己方 背面朝上 的卡牌
    EnemyFaceUp = 5; //敌方  已经正面朝上的 卡牌
    EnemyBack = 6; // 敌方 背面朝上 的卡牌

    //其他卡牌 （不能选择技能发动者自己）
    OtherMyOwn = 7; // 其他 己方卡牌
    OtherMyOwnFaceUp = 8; //其他 己方 已经正面朝上的 卡牌
    OtherMyOwnBack = 9; // 其他 己方 背面朝上 的卡牌
    OtherEnemyFaceUp = 10; //其他敌方  已经正面朝上的 卡牌
    OtherEnemyBack = 11; // 其他 敌方 背面朝上 的卡牌
    other = 12; //其他卡牌，除了发起者本身的任意卡牌

    NotHeavy = 13; //非重装
    OneOtherMyOwnAndOneEnemy = 14; // 选择一张其他己方武将 和一张敌方武将  用于貂蝉离间

}

message ActSelectParam{
    repeated gamedef.Position positions = 1;//技能选择的目标
    int32 seat = 2;//技能选择的座位号
}


message CardGroup{ //卡组结构体
    int32 groupId= 1 ;
    string name = 2; //卡组名称
    repeated int32 heroIds = 3[packed=false];
}

message PoolCard{
    int32 cardId = 1;//卡牌局内唯一id
    int32 heroId = 2;//英雄Id
}




