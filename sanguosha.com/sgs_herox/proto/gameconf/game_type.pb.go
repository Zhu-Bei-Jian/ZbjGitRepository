// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gameconf/game_type.proto

package gameconf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Defined in table: DoNotUseThis
type ClientDeviceTyp int32

const (
	ClientDeviceTyp_CDTInvalid ClientDeviceTyp = 0
	// 安卓
	ClientDeviceTyp_CDTAndroid ClientDeviceTyp = 1
	// IOS
	ClientDeviceTyp_CDTIOS ClientDeviceTyp = 2
	// PC
	ClientDeviceTyp_CDTPC ClientDeviceTyp = 11
)

var ClientDeviceTyp_name = map[int32]string{
	0:  "CDTInvalid",
	1:  "CDTAndroid",
	2:  "CDTIOS",
	11: "CDTPC",
}
var ClientDeviceTyp_value = map[string]int32{
	"CDTInvalid": 0,
	"CDTAndroid": 1,
	"CDTIOS":     2,
	"CDTPC":      11,
}

func (x ClientDeviceTyp) String() string {
	return proto.EnumName(ClientDeviceTyp_name, int32(x))
}
func (ClientDeviceTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// Defined in table: DoNotUseThis
type AccountLoginTyp int32

const (
	AccountLoginTyp_ALTInvalid AccountLoginTyp = 0
	// 测试账号
	AccountLoginTyp_ALTTest AccountLoginTyp = 1
	// 桌上学院
	AccountLoginTyp_ALTTablePark AccountLoginTyp = 2
)

var AccountLoginTyp_name = map[int32]string{
	0: "ALTInvalid",
	1: "ALTTest",
	2: "ALTTablePark",
}
var AccountLoginTyp_value = map[string]int32{
	"ALTInvalid":   0,
	"ALTTest":      1,
	"ALTTablePark": 2,
}

func (x AccountLoginTyp) String() string {
	return proto.EnumName(AccountLoginTyp_name, int32(x))
}
func (AccountLoginTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

// Defined in table: DoNotUseThis
type GenderTyp int32

const (
	GenderTyp_SETInvalid GenderTyp = 0
	// 男
	GenderTyp_SETMale GenderTyp = 1
	// 女
	GenderTyp_SETFemale GenderTyp = 2
	// 第三性别
	GenderTyp_SETThird GenderTyp = 3
)

var GenderTyp_name = map[int32]string{
	0: "SETInvalid",
	1: "SETMale",
	2: "SETFemale",
	3: "SETThird",
}
var GenderTyp_value = map[string]int32{
	"SETInvalid": 0,
	"SETMale":    1,
	"SETFemale":  2,
	"SETThird":   3,
}

func (x GenderTyp) String() string {
	return proto.EnumName(GenderTyp_name, int32(x))
}
func (GenderTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

// Defined in table: DoNotUseThis
type WinLoseTyp int32

const (
	WinLoseTyp_WLTInvalid WinLoseTyp = 0
	// 胜利
	WinLoseTyp_WLTWin WinLoseTyp = 1
	// 失败
	WinLoseTyp_WLTLose WinLoseTyp = 2
	// 平局
	WinLoseTyp_WLTDraw WinLoseTyp = 3
)

var WinLoseTyp_name = map[int32]string{
	0: "WLTInvalid",
	1: "WLTWin",
	2: "WLTLose",
	3: "WLTDraw",
}
var WinLoseTyp_value = map[string]int32{
	"WLTInvalid": 0,
	"WLTWin":     1,
	"WLTLose":    2,
	"WLTDraw":    3,
}

func (x WinLoseTyp) String() string {
	return proto.EnumName(WinLoseTyp_name, int32(x))
}
func (WinLoseTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

// Defined in table: DoNotUseThis
type RoleTyp int32

const (
	RoleTyp_RTInvalid RoleTyp = 0
	// 平民
	RoleTyp_RTPleb RoleTyp = 1
	// 卧底
	RoleTyp_RTSpy RoleTyp = 2
)

var RoleTyp_name = map[int32]string{
	0: "RTInvalid",
	1: "RTPleb",
	2: "RTSpy",
}
var RoleTyp_value = map[string]int32{
	"RTInvalid": 0,
	"RTPleb":    1,
	"RTSpy":     2,
}

func (x RoleTyp) String() string {
	return proto.EnumName(RoleTyp_name, int32(x))
}
func (RoleTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

// Defined in table: DoNotUseThis
type GameModeTyp int32

const (
	GameModeTyp_MGTInvalid GameModeTyp = 0
	// 谁是卧底文本场
	GameModeTyp_MGTSpyText GameModeTyp = 1
	// 谁是卧底语音场
	GameModeTyp_MGTSpyVoice GameModeTyp = 2
)

var GameModeTyp_name = map[int32]string{
	0: "MGTInvalid",
	1: "MGTSpyText",
	2: "MGTSpyVoice",
}
var GameModeTyp_value = map[string]int32{
	"MGTInvalid":  0,
	"MGTSpyText":  1,
	"MGTSpyVoice": 2,
}

func (x GameModeTyp) String() string {
	return proto.EnumName(GameModeTyp_name, int32(x))
}
func (GameModeTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

// Defined in table: DoNotUseThis
type ChatChannelTyp int32

const (
	ChatChannelTyp_ChatCTInvalid ChatChannelTyp = 0
	// 私人
	ChatChannelTyp_ChatCTPrivate ChatChannelTyp = 1
	// 游戏
	ChatChannelTyp_ChatCTGame ChatChannelTyp = 2
	// 大厅
	ChatChannelTyp_ChatCTLobby ChatChannelTyp = 3
	// 全局
	ChatChannelTyp_ChatCTGlobal ChatChannelTyp = 4
	// 组队
	ChatChannelTyp_ChatCTTeam ChatChannelTyp = 5
	// 房间
	ChatChannelTyp_ChatCTRoom ChatChannelTyp = 7
)

var ChatChannelTyp_name = map[int32]string{
	0: "ChatCTInvalid",
	1: "ChatCTPrivate",
	2: "ChatCTGame",
	3: "ChatCTLobby",
	4: "ChatCTGlobal",
	5: "ChatCTTeam",
	7: "ChatCTRoom",
}
var ChatChannelTyp_value = map[string]int32{
	"ChatCTInvalid": 0,
	"ChatCTPrivate": 1,
	"ChatCTGame":    2,
	"ChatCTLobby":   3,
	"ChatCTGlobal":  4,
	"ChatCTTeam":    5,
	"ChatCTRoom":    7,
}

func (x ChatChannelTyp) String() string {
	return proto.EnumName(ChatChannelTyp_name, int32(x))
}
func (ChatChannelTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

// Defined in table: DoNotUseThis
type ChatMsgTyp int32

const (
	ChatMsgTyp_CMTInvalid    ChatMsgTyp = 0
	ChatMsgTyp_CMTText       ChatMsgTyp = 1
	ChatMsgTyp_CMTMsgID      ChatMsgTyp = 2
	ChatMsgTyp_CMTSysTip     ChatMsgTyp = 3
	ChatMsgTyp_CMTExpression ChatMsgTyp = 4
)

var ChatMsgTyp_name = map[int32]string{
	0: "CMTInvalid",
	1: "CMTText",
	2: "CMTMsgID",
	3: "CMTSysTip",
	4: "CMTExpression",
}
var ChatMsgTyp_value = map[string]int32{
	"CMTInvalid":    0,
	"CMTText":       1,
	"CMTMsgID":      2,
	"CMTSysTip":     3,
	"CMTExpression": 4,
}

func (x ChatMsgTyp) String() string {
	return proto.EnumName(ChatMsgTyp_name, int32(x))
}
func (ChatMsgTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

// Defined in table: DoNotUseThis
type DateTyp int32

const (
	DateTyp_DTTInvalid DateTyp = 0
	// 秒
	DateTyp_DTTSecond DateTyp = 1
	// 分
	DateTyp_DTTMinute DateTyp = 2
	// 时
	DateTyp_DTTHour DateTyp = 3
	// 天
	DateTyp_DTTDay DateTyp = 4
	// 周
	DateTyp_DTTWeek DateTyp = 5
	// 月
	DateTyp_DTTMonth DateTyp = 6
	// 年
	DateTyp_DTTYear DateTyp = 7
)

var DateTyp_name = map[int32]string{
	0: "DTTInvalid",
	1: "DTTSecond",
	2: "DTTMinute",
	3: "DTTHour",
	4: "DTTDay",
	5: "DTTWeek",
	6: "DTTMonth",
	7: "DTTYear",
}
var DateTyp_value = map[string]int32{
	"DTTInvalid": 0,
	"DTTSecond":  1,
	"DTTMinute":  2,
	"DTTHour":    3,
	"DTTDay":     4,
	"DTTWeek":    5,
	"DTTMonth":   6,
	"DTTYear":    7,
}

func (x DateTyp) String() string {
	return proto.EnumName(DateTyp_name, int32(x))
}
func (DateTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

// Defined in table: DoNotUseThis
type KickUserOutReason int32

const (
	KickUserOutReason_KUOInvalid KickUserOutReason = 0
	// 重复登录
	KickUserOutReason_KUORelogin KickUserOutReason = 1
	// 封号
	KickUserOutReason_KUOAccountLock KickUserOutReason = 2
	// 服务器出错
	KickUserOutReason_KUOServerError KickUserOutReason = 3
	// 服务器维护
	KickUserOutReason_KUOServerUpgrade KickUserOutReason = 4
)

var KickUserOutReason_name = map[int32]string{
	0: "KUOInvalid",
	1: "KUORelogin",
	2: "KUOAccountLock",
	3: "KUOServerError",
	4: "KUOServerUpgrade",
}
var KickUserOutReason_value = map[string]int32{
	"KUOInvalid":       0,
	"KUORelogin":       1,
	"KUOAccountLock":   2,
	"KUOServerError":   3,
	"KUOServerUpgrade": 4,
}

func (x KickUserOutReason) String() string {
	return proto.EnumName(KickUserOutReason_name, int32(x))
}
func (KickUserOutReason) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

// Defined in table: DoNotUseThis
type UserConnectState int32

const (
	UserConnectState_USConnect    UserConnectState = 0
	UserConnectState_USDisconnect UserConnectState = 1
	UserConnectState_USQuit       UserConnectState = 2
)

var UserConnectState_name = map[int32]string{
	0: "USConnect",
	1: "USDisconnect",
	2: "USQuit",
}
var UserConnectState_value = map[string]int32{
	"USConnect":    0,
	"USDisconnect": 1,
	"USQuit":       2,
}

func (x UserConnectState) String() string {
	return proto.EnumName(UserConnectState_name, int32(x))
}
func (UserConnectState) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

// Defined in table: DoNotUseThis
type LookerTyp int32

const (
	LookerTyp_LTInvalid LookerTyp = 0
	// 双盲视角
	LookerTyp_LTBlind LookerTyp = 1
	// 玩家视角
	LookerTyp_LTPlayer LookerTyp = 2
	// 上帝视角
	LookerTyp_LTGod LookerTyp = 3
)

var LookerTyp_name = map[int32]string{
	0: "LTInvalid",
	1: "LTBlind",
	2: "LTPlayer",
	3: "LTGod",
}
var LookerTyp_value = map[string]int32{
	"LTInvalid": 0,
	"LTBlind":   1,
	"LTPlayer":  2,
	"LTGod":     3,
}

func (x LookerTyp) String() string {
	return proto.EnumName(LookerTyp_name, int32(x))
}
func (LookerTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

// Defined in table: DoNotUseThis
type CardColorTyp int32

const (
	CardColorTyp_CCTInvalid CardColorTyp = 0
	// 红桃
	CardColorTyp_CCTHeart CardColorTyp = 1
	// 梅花
	CardColorTyp_CCTClub CardColorTyp = 2
	// 方块
	CardColorTyp_CCTDiamond CardColorTyp = 3
	// 黑桃
	CardColorTyp_CCTSpade CardColorTyp = 4
)

var CardColorTyp_name = map[int32]string{
	0: "CCTInvalid",
	1: "CCTHeart",
	2: "CCTClub",
	3: "CCTDiamond",
	4: "CCTSpade",
}
var CardColorTyp_value = map[string]int32{
	"CCTInvalid": 0,
	"CCTHeart":   1,
	"CCTClub":    2,
	"CCTDiamond": 3,
	"CCTSpade":   4,
}

func (x CardColorTyp) String() string {
	return proto.EnumName(CardColorTyp_name, int32(x))
}
func (CardColorTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

// Defined in table: DoNotUseThis
type CountryTyp int32

const (
	CountryTyp_KDTInvalid CountryTyp = 0
	// 魏
	CountryTyp_KITWei CountryTyp = 1
	// 蜀
	CountryTyp_KITSHu CountryTyp = 2
	// 吴
	CountryTyp_KITWu CountryTyp = 3
	// 群
	CountryTyp_KITQun CountryTyp = 4
)

var CountryTyp_name = map[int32]string{
	0: "KDTInvalid",
	1: "KITWei",
	2: "KITSHu",
	3: "KITWu",
	4: "KITQun",
}
var CountryTyp_value = map[string]int32{
	"KDTInvalid": 0,
	"KITWei":     1,
	"KITSHu":     2,
	"KITWu":      3,
	"KITQun":     4,
}

func (x CountryTyp) String() string {
	return proto.EnumName(CountryTyp_name, int32(x))
}
func (CountryTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

// Defined in table: DoNotUseThis
type SkillTyp int32

const (
	SkillTyp_STInvalid SkillTyp = 0
	// 翻牌技
	SkillTyp_STFaceUp SkillTyp = 1
	// 被动技
	SkillTyp_STPassive SkillTyp = 2
)

var SkillTyp_name = map[int32]string{
	0: "STInvalid",
	1: "STFaceUp",
	2: "STPassive",
}
var SkillTyp_value = map[string]int32{
	"STInvalid": 0,
	"STFaceUp":  1,
	"STPassive": 2,
}

func (x SkillTyp) String() string {
	return proto.EnumName(SkillTyp_name, int32(x))
}
func (SkillTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

// Defined in table: DoNotUseThis
type UserGameStatusTyp int32

const (
	UserGameStatusTyp_UGSTInvalid   UserGameStatusTyp = 0
	UserGameStatusTyp_UGSTFree      UserGameStatusTyp = 1
	UserGameStatusTyp_UGSTMatching  UserGameStatusTyp = 2
	UserGameStatusTyp_UGSTReadyRoom UserGameStatusTyp = 3
	UserGameStatusTyp_UGSTGame      UserGameStatusTyp = 4
)

var UserGameStatusTyp_name = map[int32]string{
	0: "UGSTInvalid",
	1: "UGSTFree",
	2: "UGSTMatching",
	3: "UGSTReadyRoom",
	4: "UGSTGame",
}
var UserGameStatusTyp_value = map[string]int32{
	"UGSTInvalid":   0,
	"UGSTFree":      1,
	"UGSTMatching":  2,
	"UGSTReadyRoom": 3,
	"UGSTGame":      4,
}

func (x UserGameStatusTyp) String() string {
	return proto.EnumName(UserGameStatusTyp_name, int32(x))
}
func (UserGameStatusTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

// Defined in table: DoNotUseThis
type GameStartTyp int32

const (
	GameStartTyp_GSTypeInvalid GameStartTyp = 0
	GameStartTyp_GSTypeNormal  GameStartTyp = 1
	GameStartTyp_GSTypeMatch   GameStartTyp = 2
)

var GameStartTyp_name = map[int32]string{
	0: "GSTypeInvalid",
	1: "GSTypeNormal",
	2: "GSTypeMatch",
}
var GameStartTyp_value = map[string]int32{
	"GSTypeInvalid": 0,
	"GSTypeNormal":  1,
	"GSTypeMatch":   2,
}

func (x GameStartTyp) String() string {
	return proto.EnumName(GameStartTyp_name, int32(x))
}
func (GameStartTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

// Defined in table: DoNotUseThis
type SelectCardTyp int32

const (
	// 无
	SelectCardTyp_SCTNone SelectCardTyp = 0
	// 任意卡牌
	SelectCardTyp_SCTAny SelectCardTyp = 1
	// 己方卡牌
	SelectCardTyp_SCTMyOwn SelectCardTyp = 2
	// 敌方卡牌
	SelectCardTyp_SCTEnemy SelectCardTyp = 3
	// 己方正面朝上的卡牌
	SelectCardTyp_SCTMyOwnFaceUp SelectCardTyp = 4
	// 己方背面朝上的卡牌
	SelectCardTyp_SCTMyOwnBack SelectCardTyp = 5
	// 敌方正面朝上的卡牌
	SelectCardTyp_SCTEnemyFaceUp SelectCardTyp = 6
	// 敌方背面朝上的卡牌
	SelectCardTyp_SCTEnemyBack SelectCardTyp = 7
	// 其他己方卡牌
	SelectCardTyp_SCTOtherMyOwn SelectCardTyp = 8
	// 其他己方正面朝上的卡牌
	SelectCardTyp_SCTOtherMyOwnFaceUp SelectCardTyp = 9
	// 其他己方背面朝上的卡牌
	SelectCardTyp_SCTOtherMyOwnBack SelectCardTyp = 10
	// 其他敌方正面朝上的卡牌
	SelectCardTyp_SCTOtherEnemyFaceUp SelectCardTyp = 11
	// 其他敌方背面朝上的卡牌
	SelectCardTyp_SCTOtherEnemyBack SelectCardTyp = 12
	// 非重装卡牌
	SelectCardTyp_SCTNotHeavy SelectCardTyp = 13
	// 一张己方卡牌和一张敌方卡牌
	SelectCardTyp_SCTOneMyOwnAndOneEnemy SelectCardTyp = 14
	// 其他卡牌
	SelectCardTyp_SCTOther SelectCardTyp = 15
	// 我方军营或者敌方军营
	SelectCardTyp_SCTMyOwnBaseOrEnemyBase SelectCardTyp = 16
	// 任意一张可以后退一格的卡牌
	SelectCardTyp_SCTAnyCanBack SelectCardTyp = 17
)

var SelectCardTyp_name = map[int32]string{
	0:  "SCTNone",
	1:  "SCTAny",
	2:  "SCTMyOwn",
	3:  "SCTEnemy",
	4:  "SCTMyOwnFaceUp",
	5:  "SCTMyOwnBack",
	6:  "SCTEnemyFaceUp",
	7:  "SCTEnemyBack",
	8:  "SCTOtherMyOwn",
	9:  "SCTOtherMyOwnFaceUp",
	10: "SCTOtherMyOwnBack",
	11: "SCTOtherEnemyFaceUp",
	12: "SCTOtherEnemyBack",
	13: "SCTNotHeavy",
	14: "SCTOneMyOwnAndOneEnemy",
	15: "SCTOther",
	16: "SCTMyOwnBaseOrEnemyBase",
	17: "SCTAnyCanBack",
}
var SelectCardTyp_value = map[string]int32{
	"SCTNone":                 0,
	"SCTAny":                  1,
	"SCTMyOwn":                2,
	"SCTEnemy":                3,
	"SCTMyOwnFaceUp":          4,
	"SCTMyOwnBack":            5,
	"SCTEnemyFaceUp":          6,
	"SCTEnemyBack":            7,
	"SCTOtherMyOwn":           8,
	"SCTOtherMyOwnFaceUp":     9,
	"SCTOtherMyOwnBack":       10,
	"SCTOtherEnemyFaceUp":     11,
	"SCTOtherEnemyBack":       12,
	"SCTNotHeavy":             13,
	"SCTOneMyOwnAndOneEnemy":  14,
	"SCTOther":                15,
	"SCTMyOwnBaseOrEnemyBase": 16,
	"SCTAnyCanBack":           17,
}

func (x SelectCardTyp) String() string {
	return proto.EnumName(SelectCardTyp_name, int32(x))
}
func (SelectCardTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

// Defined in table: DoNotUseThis
type AreaTyp int32

const (
	// 无
	AreaTyp_ATNone AreaTyp = 0
	// 我方置牌区
	AreaTyp_ATMyPlace AreaTyp = 1
	// 交战区
	AreaTyp_ATBattle AreaTyp = 2
	// 敌方置牌区
	AreaTyp_ATEnemyPlace AreaTyp = 3
)

var AreaTyp_name = map[int32]string{
	0: "ATNone",
	1: "ATMyPlace",
	2: "ATBattle",
	3: "ATEnemyPlace",
}
var AreaTyp_value = map[string]int32{
	"ATNone":       0,
	"ATMyPlace":    1,
	"ATBattle":     2,
	"ATEnemyPlace": 3,
}

func (x AreaTyp) String() string {
	return proto.EnumName(AreaTyp_name, int32(x))
}
func (AreaTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

// Defined in table: DoNotUseThis
type ExpireTyp int32

const (
	ExpireTyp_ETInvalid ExpireTyp = 0
	ExpireTyp_ETRound   ExpireTyp = 1
	ExpireTyp_ETTimes   ExpireTyp = 2
)

var ExpireTyp_name = map[int32]string{
	0: "ETInvalid",
	1: "ETRound",
	2: "ETTimes",
}
var ExpireTyp_value = map[string]int32{
	"ETInvalid": 0,
	"ETRound":   1,
	"ETTimes":   2,
}

func (x ExpireTyp) String() string {
	return proto.EnumName(ExpireTyp_name, int32(x))
}
func (ExpireTyp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

// Defined in table: DoNotUseThis
type Map int32

const (
	// 地图行数
	Map_MRow Map = 0
	// 地图列数
	Map_MCol Map = 1
)

var Map_name = map[int32]string{
	0: "MRow",
	1: "MCol",
}
var Map_value = map[string]int32{
	"MRow": 0,
	"MCol": 1,
}

func (x Map) String() string {
	return proto.EnumName(Map_name, int32(x))
}
func (Map) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

// Defined in table: DoNotUseThis
type DoNotUseThis struct {
	DoNotUseThis []*DoNotUseThisDefine `protobuf:"bytes,1,rep,name=DoNotUseThis" json:"DoNotUseThis,omitempty"`
}

func (m *DoNotUseThis) Reset()                    { *m = DoNotUseThis{} }
func (m *DoNotUseThis) String() string            { return proto.CompactTextString(m) }
func (*DoNotUseThis) ProtoMessage()               {}
func (*DoNotUseThis) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *DoNotUseThis) GetDoNotUseThis() []*DoNotUseThisDefine {
	if m != nil {
		return m.DoNotUseThis
	}
	return nil
}

// Defined in table: DoNotUseThis
type Position struct {
	X int32 `protobuf:"varint,1,opt,name=X" json:"X,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=Y" json:"Y,omitempty"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Position) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Position) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// Defined in table: DoNotUseThis
type PropPack struct {
	// 道具
	PropID int32 `protobuf:"varint,1,opt,name=PropID" json:"PropID,omitempty"`
	// 数量
	Num int32 `protobuf:"varint,2,opt,name=Num" json:"Num,omitempty"`
}

func (m *PropPack) Reset()                    { *m = PropPack{} }
func (m *PropPack) String() string            { return proto.CompactTextString(m) }
func (*PropPack) ProtoMessage()               {}
func (*PropPack) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *PropPack) GetPropID() int32 {
	if m != nil {
		return m.PropID
	}
	return 0
}

func (m *PropPack) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// Defined in table: DoNotUseThis
type Int32KV struct {
	K int32 `protobuf:"varint,1,opt,name=K" json:"K,omitempty"`
	V int32 `protobuf:"varint,2,opt,name=V" json:"V,omitempty"`
}

func (m *Int32KV) Reset()                    { *m = Int32KV{} }
func (m *Int32KV) String() string            { return proto.CompactTextString(m) }
func (*Int32KV) ProtoMessage()               {}
func (*Int32KV) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *Int32KV) GetK() int32 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *Int32KV) GetV() int32 {
	if m != nil {
		return m.V
	}
	return 0
}

// Defined in table: DoNotUseThis
type DoNotUseThisDefine struct {
	ConfID int32 `protobuf:"varint,1,opt,name=ConfID" json:"ConfID,omitempty"`
}

func (m *DoNotUseThisDefine) Reset()                    { *m = DoNotUseThisDefine{} }
func (m *DoNotUseThisDefine) String() string            { return proto.CompactTextString(m) }
func (*DoNotUseThisDefine) ProtoMessage()               {}
func (*DoNotUseThisDefine) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *DoNotUseThisDefine) GetConfID() int32 {
	if m != nil {
		return m.ConfID
	}
	return 0
}

func init() {
	proto.RegisterType((*DoNotUseThis)(nil), "gameconf.DoNotUseThis")
	proto.RegisterType((*Position)(nil), "gameconf.Position")
	proto.RegisterType((*PropPack)(nil), "gameconf.PropPack")
	proto.RegisterType((*Int32KV)(nil), "gameconf.Int32KV")
	proto.RegisterType((*DoNotUseThisDefine)(nil), "gameconf.DoNotUseThisDefine")
	proto.RegisterEnum("gameconf.ClientDeviceTyp", ClientDeviceTyp_name, ClientDeviceTyp_value)
	proto.RegisterEnum("gameconf.AccountLoginTyp", AccountLoginTyp_name, AccountLoginTyp_value)
	proto.RegisterEnum("gameconf.GenderTyp", GenderTyp_name, GenderTyp_value)
	proto.RegisterEnum("gameconf.WinLoseTyp", WinLoseTyp_name, WinLoseTyp_value)
	proto.RegisterEnum("gameconf.RoleTyp", RoleTyp_name, RoleTyp_value)
	proto.RegisterEnum("gameconf.GameModeTyp", GameModeTyp_name, GameModeTyp_value)
	proto.RegisterEnum("gameconf.ChatChannelTyp", ChatChannelTyp_name, ChatChannelTyp_value)
	proto.RegisterEnum("gameconf.ChatMsgTyp", ChatMsgTyp_name, ChatMsgTyp_value)
	proto.RegisterEnum("gameconf.DateTyp", DateTyp_name, DateTyp_value)
	proto.RegisterEnum("gameconf.KickUserOutReason", KickUserOutReason_name, KickUserOutReason_value)
	proto.RegisterEnum("gameconf.UserConnectState", UserConnectState_name, UserConnectState_value)
	proto.RegisterEnum("gameconf.LookerTyp", LookerTyp_name, LookerTyp_value)
	proto.RegisterEnum("gameconf.CardColorTyp", CardColorTyp_name, CardColorTyp_value)
	proto.RegisterEnum("gameconf.CountryTyp", CountryTyp_name, CountryTyp_value)
	proto.RegisterEnum("gameconf.SkillTyp", SkillTyp_name, SkillTyp_value)
	proto.RegisterEnum("gameconf.UserGameStatusTyp", UserGameStatusTyp_name, UserGameStatusTyp_value)
	proto.RegisterEnum("gameconf.GameStartTyp", GameStartTyp_name, GameStartTyp_value)
	proto.RegisterEnum("gameconf.SelectCardTyp", SelectCardTyp_name, SelectCardTyp_value)
	proto.RegisterEnum("gameconf.AreaTyp", AreaTyp_name, AreaTyp_value)
	proto.RegisterEnum("gameconf.ExpireTyp", ExpireTyp_name, ExpireTyp_value)
	proto.RegisterEnum("gameconf.Map", Map_name, Map_value)
}

func init() { proto.RegisterFile("gameconf/game_type.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x56, 0xdd, 0x72, 0xda, 0xc8,
	0x12, 0x0e, 0x02, 0xf3, 0xd3, 0x80, 0x3d, 0xd6, 0x39, 0x27, 0xf1, 0x39, 0x67, 0x2f, 0x52, 0xae,
	0xda, 0xad, 0x94, 0x6a, 0x2b, 0xa9, 0x4a, 0x52, 0x7b, 0xb9, 0x1b, 0x2c, 0x11, 0x4c, 0x81, 0x0c,
	0x41, 0x83, 0x89, 0xaf, 0xb6, 0x06, 0xd1, 0x31, 0x53, 0x88, 0x19, 0x56, 0x12, 0x8e, 0xf5, 0x08,
	0xfb, 0xb2, 0xfb, 0x0c, 0x5b, 0x2d, 0x8d, 0x62, 0xc8, 0xde, 0xa9, 0x7b, 0xba, 0xbf, 0xee, 0xfe,
	0x7a, 0x3e, 0x06, 0xb8, 0xb8, 0x17, 0x5b, 0x0c, 0xb5, 0xfa, 0xf2, 0x86, 0x3e, 0x7e, 0x4f, 0xb3,
	0x1d, 0xbe, 0xde, 0xc5, 0x3a, 0xd5, 0x76, 0xb3, 0x3c, 0xb9, 0x9c, 0x42, 0xc7, 0xd3, 0x37, 0x3a,
	0x9d, 0x27, 0xc8, 0xd7, 0x32, 0xb1, 0x3f, 0x1c, 0xdb, 0x17, 0x95, 0x97, 0xd5, 0x57, 0xed, 0xb7,
	0x3f, 0xbc, 0x2e, 0x13, 0x5e, 0x1f, 0x9e, 0x7a, 0xf8, 0x45, 0x2a, 0x9c, 0x1d, 0x65, 0x5c, 0xfe,
	0x04, 0xcd, 0xa9, 0x4e, 0x64, 0x2a, 0xb5, 0xb2, 0x3b, 0x50, 0xf9, 0x7c, 0x51, 0x79, 0x59, 0x79,
	0x75, 0x32, 0xab, 0x7c, 0x26, 0xeb, 0xee, 0xc2, 0x2a, 0xac, 0xbb, 0xcb, 0xf7, 0xd0, 0x9c, 0xc6,
	0x7a, 0x37, 0x15, 0xe1, 0xc6, 0x7e, 0x0e, 0x75, 0xfa, 0x1e, 0x7a, 0x26, 0xd8, 0x58, 0x36, 0x83,
	0xea, 0xcd, 0x7e, 0x6b, 0x72, 0xe8, 0xf3, 0xf2, 0x47, 0x68, 0x0c, 0x55, 0xfa, 0xee, 0xed, 0xe8,
	0x96, 0xe0, 0x46, 0x25, 0xf8, 0x88, 0xac, 0xdb, 0x12, 0xfc, 0xf6, 0xf2, 0x67, 0xb0, 0xff, 0xd9,
	0x28, 0x95, 0x71, 0xb5, 0xfa, 0xf2, 0x54, 0xa6, 0xb0, 0x9c, 0x6b, 0x38, 0x73, 0x23, 0x89, 0x2a,
	0xf5, 0xf0, 0x41, 0x86, 0xc8, 0xb3, 0x9d, 0x7d, 0x0a, 0xe0, 0x7a, 0x7c, 0xa8, 0x1e, 0x44, 0x24,
	0x57, 0xec, 0x99, 0xb1, 0x7b, 0x6a, 0x15, 0x6b, 0xb9, 0x62, 0x15, 0x1b, 0xa0, 0x4e, 0xe7, 0x93,
	0x80, 0x59, 0x76, 0x0b, 0x4e, 0x5c, 0x8f, 0x4f, 0x5d, 0xd6, 0x76, 0x3e, 0xc0, 0x59, 0x2f, 0x0c,
	0xf5, 0x5e, 0xa5, 0x63, 0x7d, 0x2f, 0x95, 0x41, 0xea, 0x8d, 0x0f, 0x90, 0xda, 0xd0, 0xe8, 0x8d,
	0x39, 0xc7, 0x24, 0x65, 0x15, 0x9b, 0x41, 0x87, 0x0c, 0xb1, 0x8c, 0x70, 0x2a, 0xe2, 0x0d, 0xb3,
	0x9c, 0x3e, 0xb4, 0x06, 0xa8, 0x56, 0x18, 0x9b, 0xdc, 0xa0, 0x7f, 0x9c, 0x1b, 0xf4, 0xb9, 0x2f,
	0x22, 0x64, 0x15, 0xbb, 0x0b, 0xad, 0xa0, 0xcf, 0x3f, 0xe2, 0x96, 0x4c, 0xcb, 0xee, 0x40, 0x33,
	0xe8, 0x73, 0xbe, 0x96, 0xf1, 0x8a, 0x55, 0x9d, 0x2b, 0x80, 0x85, 0x54, 0x63, 0x9d, 0x94, 0xd3,
	0x2c, 0x0e, 0x7b, 0x00, 0xa8, 0x2f, 0xc6, 0x7c, 0x21, 0x15, 0xab, 0x10, 0xe6, 0x62, 0xcc, 0x29,
	0x92, 0x59, 0xc6, 0xf0, 0x62, 0xf1, 0x95, 0x55, 0x9d, 0x37, 0xd0, 0x98, 0xe9, 0x28, 0x07, 0xe8,
	0x42, 0x6b, 0x76, 0x9c, 0x3f, 0xe3, 0xd3, 0x08, 0x97, 0xac, 0x42, 0xd3, 0xcf, 0x78, 0xb0, 0xcb,
	0x98, 0xe5, 0xfc, 0x0a, 0xed, 0x81, 0xd8, 0xa2, 0xaf, 0x57, 0x65, 0x55, 0x7f, 0x70, 0xcc, 0xa1,
	0x3f, 0xa0, 0x50, 0x8e, 0x8f, 0x34, 0xfc, 0x19, 0xb4, 0x0b, 0xfb, 0x56, 0xcb, 0x10, 0x99, 0xe5,
	0xfc, 0x59, 0x81, 0x53, 0x77, 0x2d, 0x52, 0x77, 0x2d, 0x94, 0xc2, 0x88, 0x30, 0xce, 0xa1, 0x9b,
	0x7b, 0x0e, 0x60, 0xbe, 0xb9, 0xa6, 0xb1, 0x7c, 0x10, 0x29, 0x51, 0x41, 0xdb, 0xc9, 0x5d, 0x54,
	0x9e, 0x59, 0x84, 0x5c, 0xd8, 0x63, 0xbd, 0x5c, 0x66, 0xac, 0x4a, 0x3c, 0x9b, 0x80, 0x48, 0x2f,
	0x45, 0xc4, 0x6a, 0x4f, 0x29, 0x1c, 0xc5, 0x96, 0x9d, 0x3c, 0xd9, 0x33, 0xad, 0xb7, 0xac, 0xe1,
	0xdc, 0x15, 0xb6, 0x9f, 0xdc, 0x97, 0xd7, 0xc1, 0x3f, 0x5e, 0x84, 0xeb, 0x73, 0x33, 0x47, 0x07,
	0x9a, 0xae, 0xcf, 0xfd, 0xe4, 0x7e, 0xe8, 0x31, 0x8b, 0xa8, 0x72, 0x7d, 0x1e, 0x64, 0x09, 0x97,
	0x3b, 0x56, 0xcd, 0xbb, 0xf5, 0x79, 0xff, 0x71, 0x17, 0x63, 0x92, 0x48, 0xad, 0x58, 0xcd, 0x79,
	0x84, 0x86, 0x27, 0xd2, 0x92, 0x22, 0x8f, 0x1f, 0xe0, 0x76, 0xa1, 0xe5, 0x71, 0x1e, 0x90, 0xd4,
	0x56, 0xc5, 0x8a, 0x3d, 0xce, 0x7d, 0xa9, 0xf6, 0xa9, 0xd9, 0x8e, 0xc7, 0xf9, 0xb5, 0xde, 0xc7,
	0xac, 0x4a, 0x3b, 0xf0, 0x38, 0xf7, 0x44, 0xc6, 0x6a, 0xe6, 0x60, 0x81, 0xb8, 0x61, 0x27, 0xd4,
	0x0e, 0x25, 0x69, 0x95, 0xae, 0x59, 0xdd, 0x1c, 0xdd, 0xa1, 0x88, 0x59, 0xc3, 0xf9, 0x03, 0xce,
	0x47, 0x32, 0xdc, 0xcc, 0x13, 0x8c, 0x27, 0xfb, 0x74, 0x86, 0x22, 0xd1, 0x8a, 0x7a, 0x18, 0xcd,
	0x27, 0x47, 0x6b, 0x1a, 0xcd, 0x27, 0x33, 0x8c, 0xe8, 0x06, 0xb3, 0x8a, 0x6d, 0xc3, 0xe9, 0x68,
	0x3e, 0xf9, 0x76, 0xad, 0xc3, 0x0d, 0xb3, 0x8c, 0x2f, 0xc0, 0xf8, 0x01, 0xe3, 0x7e, 0x1c, 0x6b,
	0x6a, 0xe8, 0xdf, 0xc0, 0xbe, 0xf9, 0xe6, 0xbb, 0xfb, 0x58, 0xac, 0x90, 0xd5, 0x9c, 0xdf, 0x80,
	0x51, 0x39, 0x57, 0x2b, 0x85, 0x61, 0x1a, 0xa4, 0x22, 0x45, 0x1a, 0x6b, 0x1e, 0x18, 0x0f, 0x7b,
	0x46, 0xcb, 0x99, 0x07, 0x9e, 0x4c, 0x42, 0xe3, 0xc9, 0xd5, 0x35, 0x0f, 0x3e, 0xed, 0x65, 0xca,
	0x2c, 0xe7, 0x03, 0xb4, 0xc6, 0x5a, 0x6f, 0x0a, 0x41, 0x74, 0xa1, 0xf5, 0x9d, 0x96, 0xc6, 0xfc,
	0x2a, 0x92, 0x39, 0x59, 0x1d, 0x68, 0x8e, 0xf9, 0x34, 0x12, 0x19, 0xc6, 0x85, 0x28, 0xc7, 0x7c,
	0xa0, 0x49, 0x0b, 0x0b, 0xe8, 0xb8, 0x22, 0x5e, 0xb9, 0x3a, 0xd2, 0xa5, 0xaa, 0xdc, 0xc3, 0x0b,
	0x45, 0xfb, 0x73, 0xf9, 0x35, 0x8a, 0x38, 0x2d, 0xf4, 0xe0, 0xba, 0xdc, 0x8d, 0xf6, 0x4b, 0x66,
	0x99, 0x50, 0x4f, 0x8a, 0x2d, 0x2d, 0xa4, 0x6a, 0x42, 0x83, 0x5d, 0x31, 0xdb, 0x08, 0xc0, 0x25,
	0x52, 0xe2, 0xcc, 0xc0, 0x8e, 0xbc, 0x63, 0x91, 0x8c, 0x86, 0x7c, 0x81, 0xb2, 0x18, 0x68, 0x34,
	0xe4, 0xc1, 0xf5, 0xbe, 0xe8, 0x8c, 0xfc, 0xfb, 0x62, 0x87, 0xa3, 0x21, 0xff, 0xb4, 0xa7, 0x5b,
	0xf1, 0x0b, 0x34, 0x83, 0x8d, 0x8c, 0x22, 0x33, 0x66, 0x70, 0xdc, 0x60, 0xc0, 0x3f, 0x8a, 0x10,
	0xe7, 0x3b, 0xa3, 0x7b, 0x3e, 0x15, 0x49, 0x22, 0x1f, 0x48, 0x34, 0x08, 0xe7, 0x44, 0x30, 0xdd,
	0x7c, 0x62, 0x77, 0x9f, 0x10, 0xc0, 0x19, 0xb4, 0xe7, 0x83, 0xef, 0x20, 0xc8, 0xf1, 0x31, 0x46,
	0x2c, 0x7e, 0x76, 0xc8, 0xf2, 0x45, 0x1a, 0xae, 0xa5, 0xba, 0x67, 0x16, 0x5d, 0x53, 0xf2, 0xcc,
	0x50, 0xac, 0xb2, 0x5c, 0x01, 0xd5, 0x32, 0x25, 0x97, 0x54, 0xcd, 0xf1, 0xa0, 0x63, 0x4a, 0xc4,
	0xa9, 0x11, 0xe6, 0x20, 0xe0, 0xd9, 0x0e, 0x9f, 0x6a, 0x30, 0xe8, 0x14, 0xae, 0x1b, 0x1d, 0x6f,
	0x45, 0x54, 0x28, 0xbc, 0xf0, 0xe4, 0x95, 0x98, 0xe5, 0xfc, 0x65, 0x41, 0x37, 0xc0, 0x08, 0xc3,
	0x94, 0x36, 0x42, 0x38, 0xf4, 0x93, 0xe6, 0xf2, 0x1b, 0xad, 0xb0, 0xa0, 0x2c, 0x70, 0x79, 0x4f,
	0x65, 0xc5, 0x3a, 0x03, 0x97, 0xfb, 0xd9, 0xe4, 0xab, 0x32, 0xbf, 0x6e, 0x2e, 0xef, 0x2b, 0xdc,
	0x92, 0x9c, 0x6d, 0x38, 0x2d, 0xcf, 0x0c, 0x2d, 0x35, 0xaa, 0x5e, 0xfa, 0xae, 0x44, 0x48, 0x42,
	0x28, 0xa2, 0xf2, 0x1c, 0x13, 0x55, 0x37, 0x51, 0xb9, 0x2f, 0x8f, 0x6a, 0xd0, 0x20, 0x81, 0xcb,
	0x27, 0xe9, 0x1a, 0xe3, 0xa2, 0x58, 0xd3, 0x7e, 0x01, 0xff, 0x3a, 0x72, 0x99, 0xec, 0x96, 0xfd,
	0x1f, 0x38, 0x3f, 0x3a, 0xc8, 0x21, 0xe0, 0x30, 0xfe, 0xb0, 0x5a, 0xfb, 0x30, 0xfe, 0xa9, 0x64,
	0x87, 0x68, 0xc9, 0x67, 0x4e, 0xaf, 0x51, 0x3c, 0x64, 0xac, 0x6b, 0xff, 0x0f, 0x9e, 0x53, 0x9c,
	0xc2, 0x1c, 0xb5, 0xa7, 0x56, 0x13, 0x85, 0xc5, 0xac, 0xa7, 0x66, 0xf2, 0x1c, 0x83, 0x9d, 0xd9,
	0xff, 0x87, 0x17, 0x4f, 0x53, 0x26, 0x38, 0x29, 0x71, 0x13, 0x64, 0xcc, 0x8c, 0xd2, 0x53, 0x99,
	0x2b, 0x8a, 0xd6, 0xce, 0x1d, 0x0f, 0x1a, 0xbd, 0x18, 0x05, 0x31, 0x0d, 0x50, 0xef, 0x95, 0x44,
	0x77, 0xa1, 0xd5, 0xe3, 0x7e, 0x36, 0x8d, 0x44, 0x88, 0x05, 0xd7, 0x3d, 0x7e, 0x25, 0xd2, 0x34,
	0x7f, 0x49, 0xe8, 0x51, 0x2a, 0x28, 0x2a, 0xce, 0xab, 0xce, 0x7b, 0x68, 0xf5, 0x1f, 0x77, 0x32,
	0x2e, 0xdf, 0x82, 0xef, 0xde, 0xa4, 0x3e, 0x9f, 0xe9, 0x7d, 0xae, 0xc1, 0xdc, 0xe0, 0x72, 0x8b,
	0x09, 0xb3, 0x9c, 0xff, 0x42, 0xd5, 0x17, 0x3b, 0xbb, 0x09, 0x35, 0x7f, 0xa6, 0xbf, 0xb2, 0x67,
	0xf9, 0x97, 0xab, 0x23, 0x56, 0x59, 0xd6, 0xf3, 0xff, 0x21, 0xef, 0xfe, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0xb8, 0x7d, 0x92, 0x27, 0xa3, 0x08, 0x00, 0x00,
}
